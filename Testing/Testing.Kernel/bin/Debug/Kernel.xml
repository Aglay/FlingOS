<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kernel</name>
    </assembly>
    <members>
        <member name="T:Kernel.BasicConsole">
            <summary>
            A basic console implementation - uses the BIOS's fixed text-video memory to output ASCII text.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.offset">
            <summary>
            The offset from the start of the memory (in characters) to write the next character to.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.vidMemBasePtr">
            <summary>
            A pointer to the start of the (character-based) video memory.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.rows">
            <summary>
            Numbers of rows in the video memory.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.cols">
            <summary>
            Number of columns in the video memory.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.colour">
            <summary>
            The colour to print characters in. Do not set directly, use SetTextColour/SetBackgroundColour.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.bg_colour">
            <summary>
            The background colour. Do not set directly, use SetTextColour/SetBackgroundColour.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.default_colour">
            <summary>
            Default colour to print characters in.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.warning_colour">
            <summary>
            Colour to print warning characters in.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.error_colour">
            <summary>
            Colour to print error characters in.
            </summary>
        </member>
        <member name="M:Kernel.BasicConsole.Init">
            <summary>
            Initialises the BasicConsole class.
            </summary>
        </member>
        <member name="M:Kernel.BasicConsole.SetTextColour(System.Char)">
            <summary>
            Sets the console text colour.
            </summary>
            <param name="aText_colour">The text colour to use.</param>
        </member>
        <member name="M:Kernel.BasicConsole.SetBgColour(System.Char)">
            <summary>
            Sets the console background colour.
            </summary>
            <param name="aBg_colour">The background colour to use.</param>
        </member>
        <member name="M:Kernel.BasicConsole.Clear">
            <summary>
            Clears the output to all black.
            </summary>
        </member>
        <member name="M:Kernel.BasicConsole.Write(System.String)">
            <summary>
            Writes the specified string to the output at the current offset. 
            </summary>
            <param name="str">The string to output.</param>
            <remarks>
            If necessary, this method will move all existing text up the necessary number of lines to fit the new text on the bottom 
            of the screen.
            </remarks>
        </member>
        <member name="M:Kernel.BasicConsole.WriteLine(System.String)">
            <summary>
            Writes the specified string to the output at the current offset then moves the offset to the end of the line.
            </summary>
            <param name="str">The string to output.</param>
            <remarks>
            This also blanks out the rest of the line to make sure no artifacts are left behind.
            </remarks>
        </member>
        <member name="M:Kernel.BasicConsole.WriteLine">
            <summary>
            Writes a blank line (line with a space).
            </summary>
        </member>
        <member name="M:Kernel.BasicConsole.PrintTestString">
            <summary>
            Prints the test string (all the keyboard characters) to the start of the output - overwrites any existing text.
            </summary>
        </member>
        <member name="P:Kernel.BasicConsole.Offset">
            <summary>
            The offset from the start of the memory (in characters) to write the next character to.
            </summary>
        </member>
        <member name="T:Kernel.Debug.BasicDebug">
            <summary>
            The basic kernel debugger code.
            </summary>
            <remarks>
            This is entirely made from plugged methods so that even if the 
            kernel compiler is broken, the debugger will still work.
            </remarks>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Init">
            <summary>
            Initialises the basic debugger
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.InitSerial">
            <summary>
            Initialises COM1 as serial connection to debug over
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.BeginEnableDebug">
            <summary>
            Begins enabling the debug interrupt handler
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.EndEnableDebug">
            <summary>
            Ends enabling the debug interrupt handler
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Int3">
            <summary>
            Invokes interrupt 3.
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Execute">
            <summary>
            The main execute method for the basic debugger
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.InsertCommandsList">
            <summary>
            Inserts the debug commands into the ASM.
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.SendBreakCmd">
            <summary>
            Sends the Break command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.SendBreakAddress">
            <summary>
            Sends the address of the last instruction that executed when the 
            break occurred.
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.SendRegisters">
            <summary>
            Sends the register values as they were before the interrupt.
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.SendArguments">
            <summary>
            Sends the arguments values as they were before the interrupt.
            Requires the debugger to send it how many bytes for 
            the arguments there are.
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.SendLocals">
            <summary>
            Sends the locals values as they were before the interrupt.
            Requires the debugger to send it how many bytes for 
            the arguments there are.
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.WaitForCommand">
            <summary>
            Waits for a command from the debugger.
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Serial_WriteByte(System.Byte)">
            <summary>
            Writes the specified value to the debug serial port. Not callable from C#.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Serial_WriteUInt16(System.UInt16)">
            <summary>
            Writes the specified value to the debug serial port. Not callable from C#.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Serial_WriteUInt32(System.UInt32)">
            <summary>
            Writes the specified value to the debug serial port. Not callable from C#.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Serial_WriteString(System.String)">
            <summary>
            Writes the specified value to the debug serial port. Not callable from C#.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Serial_ReadByte">
            <summary>
            Reads a byte from the debug serial port. Not callable from C#.
            </summary>
            <returns>The byte read.</returns>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Serial_ReadUInt16">
            <summary>
            Reads a UInt16 from the debug serial port. Not callable from C#.
            </summary>
            <returns>The UInt16 read.</returns>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Serial_ReadUInt32">
            <summary>
            Reads a UInt32 from the debug serial port. Not callable from C#.
            </summary>
            <returns>The UInt32 read.</returns>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Serial_SafeReadUInt32">
            <summary>
            Safely reads a UInt32 from the debug serial port
            </summary>
            <returns>The UInt32 read.</returns>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.ClearMessage">
            <summary>
            Clears the screen
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.DisplayMessage(System.String)">
            <summary>
            Displays the specified message to the screen.
            </summary>
            <param name="message">The message to display.</param>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.InterruptHandler">
            <summary>
            Inserts the plug for the Int1 and Int3 interrupt handler.
            </summary>
        </member>
        <member name="T:Kernel.Exceptions">
            <summary>
            Implements the lowest-level kernel exception handling.
            </summary>
        </member>
        <member name="F:Kernel.Exceptions.Throw_PanicMessage">
            <summary>
            The message to display when the Throw method panics.
            </summary>
        </member>
        <member name="F:Kernel.Exceptions.UnhandledException_PanicMessage">
            <summary>
            The message to display when the kernel panics.
            </summary>
        </member>
        <member name="F:Kernel.Exceptions.CurrentException">
            <summary>
            The current exception - null as soon as the exception has been handled.
            </summary>
        </member>
        <member name="F:Kernel.Exceptions.PendingException">
            <summary>
            Whether the current exception is pending being handled.
            </summary>
        </member>
        <member name="F:Kernel.Exceptions.CurrentHandlerPtr">
            <summary>
            Pointer to the current Exception Handler Info (a pointer to the
            struct on the stack).
            </summary>
        </member>
        <member name="M:Kernel.Exceptions.AddExceptionHandlerInfo(System.Void*,System.Void*)">
            <summary>
            Adds a new Exception Handler Info structure to the stack and sets 
            it as the current handler.
            </summary>
            <param name="handlerPtr">A pointer to the first op of the catch or finally handler.</param>
            <param name="filterPtr">0 = finally handler, 0xFFFFFFFF = catch handler with no filter. 
            Original intended use was as a pointer to the first op of the catch filter but never implemented like this.</param>
        </member>
        <member name="M:Kernel.Exceptions.Throw(Kernel.FOS_System.Exception)">
            <summary>
            Throws the specified exception.
            </summary>
            <param name="ex">The exception to throw.</param>
        </member>
        <member name="M:Kernel.Exceptions.ThrowFromPtr(System.UInt32*)">
            <summary>
            Throws the specified exception. Implementation used is eaxctly the 
            same as Throw (exact same plug used) just allows another way to 
            throw an exception.
            </summary>
            <param name="exPtr">The pointer to the exception to throw.</param>
        </member>
        <member name="M:Kernel.Exceptions.HandleException">
            <summary>
            Handles the current pending exception.
            </summary>
        </member>
        <member name="M:Kernel.Exceptions.HandleLeave(System.Void*)">
            <summary>
            Handles cleanly leaving a critical section (i.e. try or catch block)
            </summary>
            <param name="continuePtr">A pointer to the instruction to continue execution at.</param>
        </member>
        <member name="M:Kernel.Exceptions.HandleEndFinally">
            <summary>
            Handles cleanly leaving a "finally" critical section (i.e. finally block). 
            This may result in an exception being passed to the next handler if it has not been caught &amp; handled yet.
            </summary>
        </member>
        <member name="M:Kernel.Exceptions.Rethrow">
            <summary>
            Rethrows the current exception.
            </summary>
        </member>
        <member name="M:Kernel.Exceptions.Throw_DivideByZeroException">
            <summary>
            Throws a divide by zero exception.
            </summary>
            <remarks>
            Used by CPU interrupts to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.Exceptions.Throw_OverflowException">
            <summary>
            Throws an overflow exception.
            </summary>
            <remarks>
            Used by CPU interrupts to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.Exceptions.Throw_InvalidOpCodeException">
            <summary>
            Throws an invalid op code exception.
            </summary>
            <remarks>
            Used by CPU interrupts to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.Exceptions.Throw_DoubleFaultException">
            <summary>
            Throws a double fault exception.
            </summary>
            <remarks>
            Used by CPU interrupts to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.Exceptions.Throw_StackException">
            <summary>
            Throws a stack exception.
            </summary>
            <remarks>
            Used by CPU interrupts to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.Exceptions.Throw_PageFaultException(System.UInt32,System.UInt32)">
            <summary>
            Throws a page fault exception.
            </summary>
            <remarks>
            Used by CPU interrupts to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.Exceptions.Throw_NullReferenceException">
            <summary>
            Throws a Null Reference exception.
            </summary>
            <remarks>
            Used by compiler to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.Exceptions.Throw_ArrayTypeMismatchException">
            <summary>
            Throws an Array Type Mismatch exception.
            </summary>
            <remarks>
            Used by compiler to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.Exceptions.Throw_IndexOutOfRangeException">
            <summary>
            Throws a Index Out Of Range exception.
            </summary>
            <remarks>
            Used by compiler to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="T:Kernel.ExceptionHandlerInfo">
            <summary>
            Represents an Exception Handler Info.
            </summary>
            <remarks>
            <para>
            This structure is so closely linked to the ASM code that modifying it is a big NO!
            </para>
            <para>
            It is created by the AddExceptionHandlerInfo method on the stack but could technically be put 
            anywhere in memory. The order of the fields in the structure matters!
            </para>
            </remarks>
        </member>
        <member name="F:Kernel.ExceptionHandlerInfo.ESP">
            <summary>
            The value of ESP when the handler info was created. This value of 
            ESP is also a pointer to the first byte of this Exception Handler Info structure.
            The ESP register is restored to this value when a handler is entered or re-entered.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionHandlerInfo.EBP">
            <summary>
            The value of EBP when the handler info was created.
            The EBP register is restored to this value when a handler is entered or re-entered.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionHandlerInfo.HandlerAddress">
            <summary>
            The address of the first op of the handler / a pointer to the first op of the handler.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionHandlerInfo.FilterAddress">
            <summary>
            0x00000000 = indicates this is a finally handler. 
            0xFFFFFFFF = indicates this is a catch handler with no filter.
            0xXXXXXXXX = The address of the first op of the filter - has not actually been implemented! Behaviour for such values is undetermined.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionHandlerInfo.PrevHandlerAddress">
            <summary>
            A pointer to the previous exception handler info (i.e. the address of the previous info).
            </summary>
        </member>
        <member name="F:Kernel.ExceptionHandlerInfo.InHandler">
            <summary>
            Whether execution is currently inside the try-section or the handler-section of this exception handler info.
            </summary>
        </member>
        <member name="T:Kernel.GC">
            <summary>
            The garbage collector.
            </summary>
        </member>
        <member name="F:Kernel.GC.NumObjs">
            <summary>
            The total number of objects currently allocated by the GC.
            </summary>
        </member>
        <member name="F:Kernel.GC.GCInitialised">
            <summary>
            Whether the GC has been initialised yet or not.
            Used to prevent the GC running before it has been initialised properly.
            </summary>
        </member>
        <member name="F:Kernel.GC.InsideGC">
            <summary>
            Whether the GC is currently executing. Used to prevent the GC calling itself (or ending up in loops with
            called methods re-calling the GC!)
            </summary>
        </member>
        <member name="M:Kernel.GC.Init">
            <summary>
            Intialises the GC.
            </summary>
        </member>
        <member name="M:Kernel.GC.NewObj(Kernel.FOS_System.Type)">
            <summary>
            Creates a new object of specified type (but does not call the default constructor).
            </summary>
            <param name="theType">The type of object to create.</param>
            <returns>A pointer to the new object in memory.</returns>
        </member>
        <member name="M:Kernel.GC.NewArr(System.Int32,Kernel.FOS_System.Type)">
            <summary>
            Creates a new array with specified element type (but does not call the default constructor).
            </summary>
            <remarks>"length" param placed first so that calling NewArr method is simple
            with regards to pushing params onto the stack.</remarks>
            <param name="theType">The type of element in the array to create.</param>
            <returns>A pointer to the new array in memory.</returns>
        </member>
        <member name="M:Kernel.GC.IncrementRefCount(Kernel.FOS_System.Object)">
            <summary>
            Increments the ref count of a GC managed object.
            </summary>
            <remarks>
            Uses underlying increment ref count method.
            </remarks>
            <param name="anObj">The object to increment the ref count of.</param>
        </member>
        <member name="M:Kernel.GC._IncrementRefCount(System.Byte*)">
            <summary>
            Underlying method that increments the ref count of a GC managed object.
            </summary>
            <remarks>
            This method checks that the pointer is not a null pointer and also checks for the GC signature 
            so string literals and the like don't accidentally get treated as normal GC managed strings.
            </remarks>
            <param name="objPtr">Pointer to the object to increment the ref count of.</param>
        </member>
        <member name="M:Kernel.GC.DecrementRefCount(Kernel.FOS_System.Object)">
            <summary>
            Decrements the ref count of a GC managed object.
            </summary>
            <remarks>
            This method checks that the pointer is not a null pointer and also checks for the GC signature 
            so string literals and the like don't accidentally get treated as normal GC managed strings.
            </remarks>
            <param name="anObj">The object to decrement the ref count of.</param>
        </member>
        <member name="M:Kernel.GC.DecrementRefCount(Kernel.FOS_System.Object,System.Boolean)">
            <summary>
            Decrements the ref count of a GC managed object.
            </summary>
            <remarks>
            This method checks that the pointer is not a null pointer and also checks for the GC signature 
            so string literals and the like don't accidentally get treated as normal GC managed strings.
            </remarks>
            <param name="anObj">The object to decrement the ref count of.</param>
            <param name="overrideInside">Whether to ignore the InsideGC test or not.</param>
        </member>
        <member name="M:Kernel.GC._DecrementRefCount(System.Byte*)">
            <summary>
            Underlying method that decrements the ref count of a GC managed object.
            </summary>
            <remarks>
            This method checks that the pointer is not a null pointer and also checks for the GC signature 
            so string literals and the like don't accidentally get treated as normal GC managed strings.
            </remarks>
            <param name="objPtr">A pointer to the object to decrement the ref count of.</param>
        </member>
        <member name="M:Kernel.GC.CheckSignature(Kernel.GCHeader*)">
            <summary>
            Checks the GC header is valid by checking for the GC signature.
            </summary>
            <param name="headerPtr">A pointer to the header to check.</param>
            <returns>True if the signature is found and is correct.</returns>
        </member>
        <member name="M:Kernel.GC.SetSignature(Kernel.GCHeader*)">
            <summary>
            Sets the GC signature in the specified GC header.
            </summary>
            <param name="headerPtr">A pointer to the header to set the signature in.</param>
        </member>
        <member name="T:Kernel.GCHeader">
            <summary>
            Represents the GC header that is put in memory in front of every object so the GC can manage the object.
            </summary>
        </member>
        <member name="F:Kernel.GCHeader.Sig1">
            <summary>
            The first 4 bytes of the GC signature.
            </summary>
        </member>
        <member name="F:Kernel.GCHeader.Sig2">
            <summary>
            The second 4 bytes of the GC signature.
            </summary>
        </member>
        <member name="F:Kernel.GCHeader.Checksum">
            <summary>
            A checksum value.
            </summary>
        </member>
        <member name="F:Kernel.GCHeader.RefCount">
            <summary>
            The current reference count for the object associated with this header.
            </summary>
        </member>
        <member name="T:Kernel.HeapBlock">
            <summary>
            Represents a block of memory that has been allocated for use by the heap.
            </summary>
        </member>
        <member name="F:Kernel.HeapBlock.next">
            <summary>
            A pointer to the next heap block.
            </summary>
        </member>
        <member name="F:Kernel.HeapBlock.size">
            <summary>
            The size of the block of memory allocated.
            </summary>
        </member>
        <member name="F:Kernel.HeapBlock.used">
            <summary>
            The amount of memory in the block that has been used.
            </summary>
        </member>
        <member name="F:Kernel.HeapBlock.bsize">
            <summary>
            The size of the chunks to use when allocating memory.
            </summary>
        </member>
        <member name="F:Kernel.HeapBlock.lfb">
            <summary>
            Used for optimisation.
            </summary>
        </member>
        <member name="T:Kernel.Heap">
            <summary>
            The kernel heap - currently a very simple implementation.
            </summary>
        </member>
        <member name="F:Kernel.Heap.fblock">
            <summary>
            A pointer to the most-recently added heap block.
            </summary>
        </member>
        <member name="F:Kernel.Heap.FixedHeapInitialised">
            <summary>
            Whether the kernel's fixed heap has been initialised or not.
            </summary>
        </member>
        <member name="M:Kernel.Heap.GetFixedHeapPtr">
            <summary>
            Gets a pointer to the block of memory to allocate to the kernel's fixed heap.
            </summary>
            <returns>The pointer to the block of memory.</returns>
        </member>
        <member name="M:Kernel.Heap.GetFixedHeapSize">
            <summary>
            Gets the size of the block of memory to allocate to the kernel's fixed heap.
            </summary>
            <returns>The size of the block of memory.</returns>
        </member>
        <member name="M:Kernel.Heap.InitFixedHeap">
            <summary>
            Intialises the kernel's fixed heap.
            </summary>
        </member>
        <member name="M:Kernel.Heap.Init">
            <summary>
            Intialises the heap.
            </summary>
        </member>
        <member name="M:Kernel.Heap.AddBlock(System.UInt32*,System.UInt32,System.UInt32)">
            <summary>
            Adds a contiguous block of memory to the heap so it can be used for allocating memory to objects.
            </summary>
            <param name="addr">The address of the start of the block of memory.</param>
            <param name="size">The size of the block of memory to add.</param>
            <param name="bsize">The size of the chunks to use when allocating memory.</param>
            <returns>Returns 1 if the block was added successfully.</returns>
        </member>
        <member name="M:Kernel.Heap.GetNID(System.Byte,System.Byte)">
            <summary>
            Don't understand what this actually does...anyone care to inform me?
            </summary>
            <param name="a">Umm...</param>
            <param name="b">Umm...</param>
            <returns>Umm...the NID I guess... :)</returns>
        </member>
        <member name="M:Kernel.Heap.Alloc(System.UInt32)">
            <summary>
            Attempts to allocate the specified amount of memory from the heap.
            </summary>
            <param name="size">The amount of memory to try and allocate.</param>
            <returns>A pointer to the start of the allocated memory or a null pointer if not enough 
            contiguous memory is available.</returns>
        </member>
        <member name="M:Kernel.Heap.Free(System.Void*)">
            <summary>
            Frees the specified memory giving it back to the heap.
            </summary>
            <param name="ptr">A pointer to the memory to free.</param>
        </member>
        <member name="P:Kernel.Heap.FBlock">
            <summary>
            A pointer to the most-recently added heap block.
            </summary>
        </member>
        <member name="T:Kernel.PreReqs">
            <summary>
            Contains plugged methos that are pre-requisites for the kernel to boot.
            For example, the Multiboot Signature.
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.MultibootSignature">
            <summary>
            Inserts the multiboot signature at the start of the file.
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.Kernel_Start">
            <summary>
            Inserts the pre-entrypoint kernel start method plug.
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.InitStack">
            <summary>
            Inserts the initialise stack code. 
            Kernel stack space is currently hard-coded into the 
            Multiboot Signature asm.
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.InitGDT">
            <summary>
            Initialises the Global Descriptor Table.
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.InitIDT">
            <summary>
            Initialises the Interrupt Descriptor Table.
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.SSEInit">
            <summary>
            Initialises CPU SSE commands (i.e. allows them to be used).
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.MainEntrypoint">
            <summary>
            Inserts the stub that calls the main kernel entrypoint.
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.Reset">
            <summary>
            Resets the OS / CPU / etc. i.e. terminates the OS
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.HandleNoMultiboot">
            <summary>
            Inserts the method that handles what happens when the Multiboot
            Signature is invalid or undetected.
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.WriteDebugVideo(System.String,System.UInt32)">
            <summary>
            Writes a piece of text to the first line of the screen
            </summary>
            <param name="aText">The text to write. First dword should be the length of the string. (Inserted by compiler for string literals)</param>
            <param name="aColour">The foreground/background (DOS) colour to write in - 0xXY where X is background colour and Y is foreground colour.</param>
        </member>
        <member name="T:Kernel.Kernel">
            <summary>
            The main class (containing the kernel entry point) for the Fling OS kernel.
            </summary>
        </member>
        <member name="M:Kernel.Kernel.#cctor">
            <summary>
            Initialises static stuff within the kernel (such as calling GC.Init and BasicDebug.Init)
            </summary>
        </member>
        <member name="M:Kernel.Kernel.CallStaticConstructors">
            <summary>
            Filled-in by the compiler.
            </summary>
        </member>
        <member name="M:Kernel.Kernel.Main">
            <summary>
            Main kernel entry point
            </summary>
        </member>
        <member name="M:Kernel.Kernel.Halt">
            <summary>
            Halts the kernel and halts the CPU.
            </summary>
        </member>
        <member name="M:Kernel.Kernel.ManagedMain">
            <summary>
            The actual main method for the kernel - by this point, all memory management, exception handling 
            etc has been set up properly.
            </summary>
        </member>
    </members>
</doc>
