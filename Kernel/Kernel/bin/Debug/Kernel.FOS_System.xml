<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kernel.FOS_System</name>
    </assembly>
    <members>
        <member name="T:Kernel.FOS_System.Exception">
            <summary>
            An exception object.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Object">
            <summary>
            All objects (that are GC managed) should derive from this type.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.ObjectWithType">
            <summary>
            Represents an object with a type. You should use the <see cref="T:Kernel.FOS_System.Object"/> class.
            </summary>
            <remarks>
            We implement it like this so that _Type field is always the first
            field in memory of all objects.
            </remarks>
        </member>
        <member name="F:Kernel.FOS_System.ObjectWithType._Type">
            <summary>
            The underlying, specific type of the object specified when it was created.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Exception.Message">
            <summary>
            The exception message.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.InvalidOpCodeException">
            <summary>
            Represents an invalid op-code exception.
            Usually thrown by the hardware interrupt.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.InvalidOpCodeException.#ctor">
            <summary>
            Sets the message to "Attempted to execute an invalid op code."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.DoubleFaultException">
            <summary>
            Represents a double fault exception.
            Usually thrown by the hardware interrupt.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.DoubleFaultException.#ctor">
            <summary>
            Sets the message to "Double fault exception."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.PageFaultException">
            <summary>
            Represents a page fault exception.
            Usually thrown by the hardware interrupt.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Exceptions.PageFaultException.errorCode">
            <summary>
            The error code passed with the exception.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Exceptions.PageFaultException.address">
            <summary>
            The (virtual) address that caused the exception.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.PageFaultException.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Sets the message to "Page fault"
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.StackException">
            <summary>
            Represents a stack exception.
            Usually thrown by the hardware interrupt.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.StackException.#ctor">
            <summary>
            Sets the message to "Stack error."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.OverflowException">
            <summary>
            Represents an overflow exception.
            Usually thrown by the hardware interrupt.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.OverflowException.#ctor">
            <summary>
            Sets the message to "Overflow exception."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.DivideByZeroException">
            <summary>
            Represents a divide by zero exception.
            Usually thrown by hardware interrupt 0 when code attempts to divide a number (always integer?) by 0.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.DivideByZeroException.#ctor">
            <summary>
            Sets the message to "Attempt to divide by zero invalid."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Int64">
            <summary>
            Replacement class for methods, properties and fields usually found on standard System.Int64 type.
            </summary>
        </member>
        <member name="P:Kernel.FOS_System.Int64.MaxValue">
            <summary>
            Returns the maximum value of an Int32.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Int32">
            <summary>
            Replacement class for methods, properties and fields usually found on standard System.Int32 type.
            </summary>
        </member>
        <member name="P:Kernel.FOS_System.Int32.MaxValue">
            <summary>
            Returns the maximum value of an Int32.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.String">
            <summary>
            Replacement class for methods, properties and fields usually found on standard System.String type.
            Also contains utility methods for low-level string manipulation.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.String.GetLength(System.String)">
            <summary>
            Gets the length of the specified string.
            </summary>
            <param name="aString">The string to get the length of.</param>
            <returns>The length of the specified string.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.GetCharPointer(System.String)">
            <summary>
            Gets a pointer to the first char (that represents a character) of the specified string.
            </summary>
            <param name="aString">The string to get a pointer to.</param>
            <returns>A pointer to the first char (that represents a character) of the specified string.</returns>
            <remarks>
            Skips over the length dword at the start of the string.
            </remarks>
        </member>
        <member name="T:Kernel.FOS_System.Type">
            <summary>
            Represents an object type specification.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Type.Size">
            <summary>
            The size of the object in memory.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Type.Id">
            <summary>
            The type ID.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Type.op_Equality(Kernel.FOS_System.Type,Kernel.FOS_System.Type)">
            <summary>
            Compares two types by ID to see if they represent the same type.
            </summary>
            <param name="x">The first type to compare with the second.</param>
            <param name="y">The second type to compare with the first.</param>
            <returns>True if they are equal, otherwise false.</returns>
        </member>
        <member name="M:Kernel.FOS_System.Type.op_Inequality(Kernel.FOS_System.Type,Kernel.FOS_System.Type)">
            <summary>
            Compares two types by ID to see if they represent the different types.
            </summary>
            <param name="x">The first type to compare with the second.</param>
            <param name="y">The second type to compare with the first.</param>
            <returns>True if they are not equal, otherwise false.</returns>
        </member>
    </members>
</doc>
