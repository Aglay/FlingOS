<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kernel.FOS_System</name>
    </assembly>
    <members>
        <member name="T:Kernel.FOS_System.Object">
            <summary>
            All objects (that are GC managed) should derive from this type.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.ObjectWithType">
            <summary>
            Represents an object with a type. You should use the <see cref="T:Kernel.FOS_System.Object"/> class.
            </summary>
            <remarks>
            We implement it like this so that _Type field is always the first
            field in memory of all objects.
            </remarks>
        </member>
        <member name="F:Kernel.FOS_System.ObjectWithType._Type">
            <summary>
            The underlying, specific type of the object specified when it was created.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exception">
            <summary>
            An exception object.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Exception.Message">
            <summary>
            The exception message.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exception.#ctor">
            <summary>
            Creates a new, empty exception.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exception.#ctor(System.String)">
            <summary>
            Creates a new exception with specified message.
            </summary>
            <param name="aMessage">The exception message.</param>
        </member>
        <member name="T:Kernel.ExceptionMethods">
            <summary>
            Implements the lowest-level kernel exception handling.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionMethods.Throw_PanicMessage">
            <summary>
            The message to display when the Throw method panics.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionMethods.UnhandledException_PanicMessage">
            <summary>
            The message to display when the kernel panics.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionMethods.CurrentException">
            <summary>
            The current exception - null as soon as the exception has been handled.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionMethods.PendingException">
            <summary>
            Whether the current exception is pending being handled.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionMethods.CurrentHandlerPtr">
            <summary>
            Pointer to the current Exception Handler Info (a pointer to the
            struct on the stack).
            </summary>
        </member>
        <member name="M:Kernel.ExceptionMethods.AddExceptionHandlerInfo(System.Void*,System.Void*)">
            <summary>
            Adds a new Exception Handler Info structure to the stack and sets 
            it as the current handler.
            </summary>
            <param name="handlerPtr">A pointer to the first op of the catch or finally handler.</param>
            <param name="filterPtr">0 = finally handler, 0xFFFFFFFF = catch handler with no filter. 
            Original intended use was as a pointer to the first op of the catch filter but never implemented like this.</param>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw(Kernel.FOS_System.Exception)">
            <summary>
            Throws the specified exception.
            </summary>
            <param name="ex">The exception to throw.</param>
        </member>
        <member name="M:Kernel.ExceptionMethods.ThrowFromPtr(System.UInt32*)">
            <summary>
            Throws the specified exception. Implementation used is eaxctly the 
            same as Throw (exact same plug used) just allows another way to 
            throw an exception.
            </summary>
            <param name="exPtr">The pointer to the exception to throw.</param>
        </member>
        <member name="M:Kernel.ExceptionMethods.HandleException">
            <summary>
            Handles the current pending exception.
            </summary>
        </member>
        <member name="M:Kernel.ExceptionMethods.HandleLeave(System.Void*)">
            <summary>
            Handles cleanly leaving a critical section (i.e. try or catch block)
            </summary>
            <param name="continuePtr">A pointer to the instruction to continue execution at.</param>
        </member>
        <member name="M:Kernel.ExceptionMethods.HandleEndFinally">
            <summary>
            Handles cleanly leaving a "finally" critical section (i.e. finally block). 
            This may result in an exception being passed to the next handler if it has not been caught &amp; handled yet.
            </summary>
        </member>
        <member name="M:Kernel.ExceptionMethods.Rethrow">
            <summary>
            Rethrows the current exception.
            </summary>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw_DivideByZeroException">
            <summary>
            Throws a divide by zero exception.
            </summary>
            <remarks>
            Used by CPU interrupts to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw_OverflowException">
            <summary>
            Throws an overflow exception.
            </summary>
            <remarks>
            Used by CPU interrupts to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw_InvalidOpCodeException">
            <summary>
            Throws an invalid op code exception.
            </summary>
            <remarks>
            Used by CPU interrupts to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw_DoubleFaultException">
            <summary>
            Throws a double fault exception.
            </summary>
            <remarks>
            Used by CPU interrupts to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw_StackException">
            <summary>
            Throws a stack exception.
            </summary>
            <remarks>
            Used by CPU interrupts to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw_PageFaultException(System.UInt32,System.UInt32)">
            <summary>
            Throws a page fault exception.
            </summary>
            <remarks>
            Used by CPU interrupts to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw_NullReferenceException">
            <summary>
            Throws a Null Reference exception.
            </summary>
            <remarks>
            Used by compiler to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw_ArrayTypeMismatchException">
            <summary>
            Throws an Array Type Mismatch exception.
            </summary>
            <remarks>
            Used by compiler to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw_IndexOutOfRangeException">
            <summary>
            Throws a Index Out Of Range exception.
            </summary>
            <remarks>
            Used by compiler to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="T:Kernel.ExceptionHandlerInfo">
            <summary>
            Represents an Exception Handler Info.
            </summary>
            <remarks>
            <para>
            This structure is so closely linked to the ASM code that modifying it is a big NO!
            </para>
            <para>
            It is created by the AddExceptionHandlerInfo method on the stack but could technically be put 
            anywhere in memory. The order of the fields in the structure matters!
            </para>
            </remarks>
        </member>
        <member name="F:Kernel.ExceptionHandlerInfo.ESP">
            <summary>
            The value of ESP when the handler info was created. This value of 
            ESP is also a pointer to the first byte of this Exception Handler Info structure.
            The ESP register is restored to this value when a handler is entered or re-entered.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionHandlerInfo.EBP">
            <summary>
            The value of EBP when the handler info was created.
            The EBP register is restored to this value when a handler is entered or re-entered.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionHandlerInfo.HandlerAddress">
            <summary>
            The address of the first op of the handler / a pointer to the first op of the handler.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionHandlerInfo.FilterAddress">
            <summary>
            0x00000000 = indicates this is a finally handler. 
            0xFFFFFFFF = indicates this is a catch handler with no filter.
            0xXXXXXXXX = The address of the first op of the filter - has not actually been implemented! Behaviour for such values is undetermined.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionHandlerInfo.PrevHandlerAddress">
            <summary>
            A pointer to the previous exception handler info (i.e. the address of the previous info).
            </summary>
        </member>
        <member name="F:Kernel.ExceptionHandlerInfo.InHandler">
            <summary>
            Whether execution is currently inside the try-section or the handler-section of this exception handler info.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.ArgumentException">
            <summary>
            Represents an argument exception.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.ArgumentException.#ctor(System.String)">
            <summary>
            Sets the message to "Argument exception."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.InvalidOpCodeException">
            <summary>
            Represents an invalid op-code exception.
            Usually thrown by the hardware interrupt.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.InvalidOpCodeException.#ctor">
            <summary>
            Sets the message to "Attempted to execute an invalid op code."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.DoubleFaultException">
            <summary>
            Represents a double fault exception.
            Usually thrown by the hardware interrupt.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.DoubleFaultException.#ctor">
            <summary>
            Sets the message to "Double fault exception."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.NullReferenceException">
            <summary>
            Represents a null reference exception.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.NullReferenceException.#ctor">
            <summary>
            Sets the message to "Null reference exception."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.IndexOutOfRangeException">
            <summary>
            Represents an index out of range exception.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.IndexOutOfRangeException.#ctor">
            <summary>
            Sets the message to "Index out of range exception."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.PageFaultException">
            <summary>
            Represents a page fault exception.
            Usually thrown by the hardware interrupt.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Exceptions.PageFaultException.errorCode">
            <summary>
            The error code passed with the exception.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Exceptions.PageFaultException.address">
            <summary>
            The (virtual) address that caused the exception.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.PageFaultException.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Sets the message to "Page fault"
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.ArrayTypeMismatchException">
            <summary>
            Represents a array type mismatch exception.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.ArrayTypeMismatchException.#ctor">
            <summary>
            Sets the message to "Array type mismatch exception."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.StackException">
            <summary>
            Represents a stack exception.
            Usually thrown by the hardware interrupt.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.StackException.#ctor">
            <summary>
            Sets the message to "Stack error."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.OverflowException">
            <summary>
            Represents an overflow exception.
            Usually thrown by the hardware interrupt.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.OverflowException.#ctor">
            <summary>
            Sets the message to "Overflow exception."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.DivideByZeroException">
            <summary>
            Represents a divide by zero exception.
            Usually thrown by hardware interrupt 0 when code attempts to divide a number (always integer?) by 0.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.DivideByZeroException.#ctor">
            <summary>
            Sets the message to "Attempt to divide by zero invalid."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.GC">
            <summary>
            The garbage collector.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.GC.NumObjs">
            <summary>
            The total number of objects currently allocated by the GC.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.GC.GCInitialised">
            <summary>
            Whether the GC has been initialised yet or not.
            Used to prevent the GC running before it has been initialised properly.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.GC.InsideGC">
            <summary>
            Whether the GC is currently executing. Used to prevent the GC calling itself (or ending up in loops with
            called methods re-calling the GC!)
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.GC.Init">
            <summary>
            Intialises the GC.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.GC.NewObj(Kernel.FOS_System.Type)">
            <summary>
            Creates a new object of specified type (but does not call the default constructor).
            </summary>
            <param name="theType">The type of object to create.</param>
            <returns>A pointer to the new object in memory.</returns>
        </member>
        <member name="M:Kernel.FOS_System.GC.NewArr(System.Int32,Kernel.FOS_System.Type)">
            <summary>
            Creates a new array with specified element type (but does not call the default constructor).
            </summary>
            <remarks>"length" param placed first so that calling NewArr method is simple
            with regards to pushing params onto the stack.</remarks>
            <param name="theType">The type of element in the array to create.</param>
            <returns>A pointer to the new array in memory.</returns>
        </member>
        <member name="M:Kernel.FOS_System.GC.NewString(System.Int32)">
            <summary>
            DO NOT CALL DIRECTLY. Use FOS_System.String.New
            Creates a new string with specified length (but does not call the default constructor).
            </summary>
            <returns>A pointer to the new string in memory.</returns>
        </member>
        <member name="M:Kernel.FOS_System.GC.IncrementRefCount(Kernel.FOS_System.Object)">
            <summary>
            Increments the ref count of a GC managed object.
            </summary>
            <remarks>
            Uses underlying increment ref count method.
            </remarks>
            <param name="anObj">The object to increment the ref count of.</param>
        </member>
        <member name="M:Kernel.FOS_System.GC._IncrementRefCount(System.Byte*)">
            <summary>
            Underlying method that increments the ref count of a GC managed object.
            </summary>
            <remarks>
            This method checks that the pointer is not a null pointer and also checks for the GC signature 
            so string literals and the like don't accidentally get treated as normal GC managed strings.
            </remarks>
            <param name="objPtr">Pointer to the object to increment the ref count of.</param>
        </member>
        <member name="M:Kernel.FOS_System.GC.DecrementRefCount(Kernel.FOS_System.Object)">
            <summary>
            Decrements the ref count of a GC managed object.
            </summary>
            <remarks>
            This method checks that the pointer is not a null pointer and also checks for the GC signature 
            so string literals and the like don't accidentally get treated as normal GC managed strings.
            </remarks>
            <param name="anObj">The object to decrement the ref count of.</param>
        </member>
        <member name="M:Kernel.FOS_System.GC.DecrementRefCount(Kernel.FOS_System.Object,System.Boolean)">
            <summary>
            Decrements the ref count of a GC managed object.
            </summary>
            <remarks>
            This method checks that the pointer is not a null pointer and also checks for the GC signature 
            so string literals and the like don't accidentally get treated as normal GC managed strings.
            </remarks>
            <param name="anObj">The object to decrement the ref count of.</param>
            <param name="overrideInside">Whether to ignore the InsideGC test or not.</param>
        </member>
        <member name="M:Kernel.FOS_System.GC._DecrementRefCount(System.Byte*)">
            <summary>
            Underlying method that decrements the ref count of a GC managed object.
            </summary>
            <remarks>
            This method checks that the pointer is not a null pointer and also checks for the GC signature 
            so string literals and the like don't accidentally get treated as normal GC managed strings.
            </remarks>
            <param name="objPtr">A pointer to the object to decrement the ref count of.</param>
        </member>
        <member name="M:Kernel.FOS_System.GC.CheckSignature(Kernel.FOS_System.GCHeader*)">
            <summary>
            Checks the GC header is valid by checking for the GC signature.
            </summary>
            <param name="headerPtr">A pointer to the header to check.</param>
            <returns>True if the signature is found and is correct.</returns>
        </member>
        <member name="M:Kernel.FOS_System.GC.SetSignature(Kernel.FOS_System.GCHeader*)">
            <summary>
            Sets the GC signature in the specified GC header.
            </summary>
            <param name="headerPtr">A pointer to the header to set the signature in.</param>
        </member>
        <member name="T:Kernel.FOS_System.GCHeader">
            <summary>
            Represents the GC header that is put in memory in front of every object so the GC can manage the object.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.GCHeader.Sig1">
            <summary>
            The first 4 bytes of the GC signature.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.GCHeader.Sig2">
            <summary>
            The second 4 bytes of the GC signature.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.GCHeader.Checksum">
            <summary>
            A checksum value.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.GCHeader.RefCount">
            <summary>
            The current reference count for the object associated with this header.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.HeapBlock">
            <summary>
            Represents a block of memory that has been allocated for use by the heap.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.HeapBlock.next">
            <summary>
            A pointer to the next heap block.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.HeapBlock.size">
            <summary>
            The size of the block of memory allocated.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.HeapBlock.used">
            <summary>
            The amount of memory in the block that has been used.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.HeapBlock.bsize">
            <summary>
            The size of the chunks to use when allocating memory.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.HeapBlock.lfb">
            <summary>
            Used for optimisation.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Heap">
            <summary>
            The kernel heap - currently a very simple implementation.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Heap.fblock">
            <summary>
            A pointer to the most-recently added heap block.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Heap.FixedHeapInitialised">
            <summary>
            Whether the kernel's fixed heap has been initialised or not.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Heap.GetFixedHeapPtr">
            <summary>
            Gets a pointer to the block of memory to allocate to the kernel's fixed heap.
            </summary>
            <returns>The pointer to the block of memory.</returns>
        </member>
        <member name="M:Kernel.FOS_System.Heap.GetFixedHeapSize">
            <summary>
            Gets the size of the block of memory to allocate to the kernel's fixed heap.
            </summary>
            <returns>The size of the block of memory.</returns>
        </member>
        <member name="M:Kernel.FOS_System.Heap.InitFixedHeap">
            <summary>
            Intialises the kernel's fixed heap.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Heap.Init">
            <summary>
            Intialises the heap.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Heap.AddBlock(System.UInt32*,System.UInt32,System.UInt32)">
            <summary>
            Adds a contiguous block of memory to the heap so it can be used for allocating memory to objects.
            </summary>
            <param name="addr">The address of the start of the block of memory.</param>
            <param name="size">The size of the block of memory to add.</param>
            <param name="bsize">The size of the chunks to use when allocating memory.</param>
            <returns>Returns 1 if the block was added successfully.</returns>
        </member>
        <member name="M:Kernel.FOS_System.Heap.GetNID(System.Byte,System.Byte)">
            <summary>
            Don't understand what this actually does...anyone care to inform me?
            </summary>
            <param name="a">Umm...</param>
            <param name="b">Umm...</param>
            <returns>Umm...the NID I guess... :)</returns>
        </member>
        <member name="M:Kernel.FOS_System.Heap.Alloc(System.UInt32)">
            <summary>
            Attempts to allocate the specified amount of memory from the heap.
            </summary>
            <param name="size">The amount of memory to try and allocate.</param>
            <returns>A pointer to the start of the allocated memory or a null pointer if not enough 
            contiguous memory is available.</returns>
        </member>
        <member name="M:Kernel.FOS_System.Heap.Free(System.Void*)">
            <summary>
            Frees the specified memory giving it back to the heap.
            </summary>
            <param name="ptr">A pointer to the memory to free.</param>
        </member>
        <member name="P:Kernel.FOS_System.Heap.FBlock">
            <summary>
            A pointer to the most-recently added heap block.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Int64">
            <summary>
            Replacement class for methods, properties and fields usually found on standard System.Int64 type.
            </summary>
        </member>
        <member name="P:Kernel.FOS_System.Int64.MaxValue">
            <summary>
            Returns the maximum value of an Int32.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Int32">
            <summary>
            Replacement class for methods, properties and fields usually found on standard System.Int32 type.
            </summary>
        </member>
        <member name="P:Kernel.FOS_System.Int32.MaxValue">
            <summary>
            Returns the maximum value of an Int32.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.String">
            <summary>
            Replacement class for methods, properties and fields usually found on standard System.String type.
            Also contains utility methods for low-level string manipulation.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.String.GetLength(System.String)">
            <summary>
            Gets the length of the specified string.
            </summary>
            <param name="aString">The string to get the length of.</param>
            <returns>The length of the specified string.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.GetCharPointer(System.String)">
            <summary>
            Gets a pointer to the first char (that represents a character) of the specified string.
            </summary>
            <param name="aString">The string to get a pointer to.</param>
            <returns>A pointer to the first char (that represents a character) of the specified string.</returns>
            <remarks>
            Skips over the length dword at the start of the string.
            </remarks>
        </member>
        <member name="M:Kernel.FOS_System.String.New(System.Int32)">
            <summary>
            Creates a new, blank FOS_System.String of specified length.
            IMPORTANT NOTE: You MUST assign the return value of this to a variable / local / arg / 
            field etc. You may not use IL or C# that results in an IL Pop op of the return value
            of this method as it will screw up the GC RefCount handling.
            </summary>
            <param name="length">The length of the string to create.</param>
            <returns>The new string.</returns>
        </member>
        <member name="T:Kernel.FOS_System.Type">
            <summary>
            Represents an object type specification.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Type.Size">
            <summary>
            The size of the object in memory.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Type.Id">
            <summary>
            The type ID.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Type.StackSize">
            <summary>
            The size of the type when on the stack or in an array.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Type.IsValueType">
            <summary>
            Whether the type is a value type or not.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Type.MethodTablePtr">
            <summary>
            A pointer to the start of the method table.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Type.op_Equality(Kernel.FOS_System.Type,Kernel.FOS_System.Type)">
            <summary>
            Compares two types by ID to see if they represent the same type.
            </summary>
            <param name="x">The first type to compare with the second.</param>
            <param name="y">The second type to compare with the first.</param>
            <returns>True if they are equal, otherwise false.</returns>
        </member>
        <member name="M:Kernel.FOS_System.Type.op_Inequality(Kernel.FOS_System.Type,Kernel.FOS_System.Type)">
            <summary>
            Compares two types by ID to see if they represent the different types.
            </summary>
            <param name="x">The first type to compare with the second.</param>
            <param name="y">The second type to compare with the first.</param>
            <returns>True if they are not equal, otherwise false.</returns>
        </member>
    </members>
</doc>
