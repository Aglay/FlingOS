<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kernel</name>
    </assembly>
    <members>
        <member name="T:Kernel.BasicConsole">
            <summary>
            A basic console implementation - uses the BIOS's fixed text-video memory to output ASCII text.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.offset">
            <summary>
            The offset from the start of the memory (in characters) to write the next character to.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.vidMemBasePtr">
            <summary>
            A pointer to the start of the (character-based) video memory.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.rows">
            <summary>
            Numbers of rows in the video memory.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.cols">
            <summary>
            Number of columns in the video memory.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.colour">
            <summary>
            The colour to print characters in. Do not set directly, use SetTextColour/SetBackgroundColour.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.bg_colour">
            <summary>
            The background colour. Do not set directly, use SetTextColour/SetBackgroundColour.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.default_colour">
            <summary>
            Default colour to print characters in.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.warning_colour">
            <summary>
            Colour to print warning characters in.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.error_colour">
            <summary>
            Colour to print error characters in.
            </summary>
        </member>
        <member name="M:Kernel.BasicConsole.Init">
            <summary>
            Initialises the BasicConsole class.
            </summary>
        </member>
        <member name="M:Kernel.BasicConsole.SetTextColour(System.Char)">
            <summary>
            Sets the console text colour.
            </summary>
            <param name="aText_colour">The text colour to use.</param>
        </member>
        <member name="M:Kernel.BasicConsole.SetBgColour(System.Char)">
            <summary>
            Sets the console background colour.
            </summary>
            <param name="aBg_colour">The background colour to use.</param>
        </member>
        <member name="M:Kernel.BasicConsole.Clear">
            <summary>
            Clears the output to all black.
            </summary>
        </member>
        <member name="M:Kernel.BasicConsole.Write(System.String)">
            <summary>
            Writes the specified string to the output at the current offset. 
            </summary>
            <param name="str">The string to output.</param>
            <remarks>
            If necessary, this method will move all existing text up the necessary number of lines to fit the new text on the bottom 
            of the screen.
            </remarks>
        </member>
        <member name="M:Kernel.BasicConsole.WriteLine(System.String)">
            <summary>
            Writes the specified string to the output at the current offset then moves the offset to the end of the line.
            </summary>
            <param name="str">The string to output.</param>
            <remarks>
            This also blanks out the rest of the line to make sure no artifacts are left behind.
            </remarks>
        </member>
        <member name="M:Kernel.BasicConsole.WriteLine">
            <summary>
            Writes a blank line (line with a space).
            </summary>
        </member>
        <member name="M:Kernel.BasicConsole.PrintTestString">
            <summary>
            Prints the test string (all the keyboard characters) to the start of the output - overwrites any existing text.
            </summary>
        </member>
        <member name="P:Kernel.BasicConsole.Offset">
            <summary>
            The offset from the start of the memory (in characters) to write the next character to.
            </summary>
        </member>
        <member name="T:Kernel.Debug.BasicDebug">
            <summary>
            The basic kernel debugger code.
            </summary>
            <remarks>
            This is entirely made from plugged methods so that even if the 
            kernel compiler is broken, the debugger will still work.
            </remarks>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Init">
            <summary>
            Initialises the basic debugger
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.InitSerial">
            <summary>
            Initialises COM1 as serial connection to debug over
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.BeginEnableDebug">
            <summary>
            Begins enabling the debug interrupt handler
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.EndEnableDebug">
            <summary>
            Ends enabling the debug interrupt handler
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Int3">
            <summary>
            Invokes interrupt 3.
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Execute">
            <summary>
            The main execute method for the basic debugger
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.InsertCommandsList">
            <summary>
            Inserts the debug commands into the ASM.
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.SendBreakCmd">
            <summary>
            Sends the Break command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.SendBreakAddress">
            <summary>
            Sends the address of the last instruction that executed when the 
            break occurred.
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.SendRegisters">
            <summary>
            Sends the register values as they were before the interrupt.
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.SendArguments">
            <summary>
            Sends the arguments values as they were before the interrupt.
            Requires the debugger to send it how many bytes for 
            the arguments there are.
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.SendLocals">
            <summary>
            Sends the locals values as they were before the interrupt.
            Requires the debugger to send it how many bytes for 
            the arguments there are.
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.WaitForCommand">
            <summary>
            Waits for a command from the debugger.
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Serial_WriteByte(System.Byte)">
            <summary>
            Writes the specified value to the debug serial port. Not callable from C#.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Serial_WriteUInt16(System.UInt16)">
            <summary>
            Writes the specified value to the debug serial port. Not callable from C#.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Serial_WriteUInt32(System.UInt32)">
            <summary>
            Writes the specified value to the debug serial port. Not callable from C#.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Serial_WriteString(System.String)">
            <summary>
            Writes the specified value to the debug serial port. Not callable from C#.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Serial_ReadByte">
            <summary>
            Reads a byte from the debug serial port. Not callable from C#.
            </summary>
            <returns>The byte read.</returns>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Serial_ReadUInt16">
            <summary>
            Reads a UInt16 from the debug serial port. Not callable from C#.
            </summary>
            <returns>The UInt16 read.</returns>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Serial_ReadUInt32">
            <summary>
            Reads a UInt32 from the debug serial port. Not callable from C#.
            </summary>
            <returns>The UInt32 read.</returns>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.Serial_SafeReadUInt32">
            <summary>
            Safely reads a UInt32 from the debug serial port
            </summary>
            <returns>The UInt32 read.</returns>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.ClearMessage">
            <summary>
            Clears the screen
            </summary>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.DisplayMessage(System.String)">
            <summary>
            Displays the specified message to the screen.
            </summary>
            <param name="message">The message to display.</param>
        </member>
        <member name="M:Kernel.Debug.BasicDebug.InterruptHandler">
            <summary>
            Inserts the plug for the Int1 and Int3 interrupt handler.
            </summary>
        </member>
        <member name="T:Kernel.PreReqs">
            <summary>
            Contains plugged methos that are pre-requisites for the kernel to boot.
            For example, the Multiboot Signature.
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.MultibootSignature">
            <summary>
            Inserts the multiboot signature at the start of the file.
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.Kernel_Start">
            <summary>
            Inserts the pre-entrypoint kernel start method plug.
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.InitStack">
            <summary>
            Inserts the initialise stack code. 
            Kernel stack space is currently hard-coded into the 
            Multiboot Signature asm.
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.InitGDT">
            <summary>
            Initialises the Global Descriptor Table.
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.InitIDT">
            <summary>
            Initialises the Interrupt Descriptor Table.
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.SSEInit">
            <summary>
            Initialises CPU SSE commands (i.e. allows them to be used).
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.MainEntrypoint">
            <summary>
            Inserts the stub that calls the main kernel entrypoint.
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.Reset">
            <summary>
            Resets the OS / CPU / etc. i.e. terminates the OS
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.HandleNoMultiboot">
            <summary>
            Inserts the method that handles what happens when the Multiboot
            Signature is invalid or undetected.
            </summary>
        </member>
        <member name="M:Kernel.PreReqs.WriteDebugVideo(System.String,System.UInt32)">
            <summary>
            Writes a piece of text to the first line of the screen
            </summary>
            <param name="aText">The text to write. First dword should be the length of the string. (Inserted by compiler for string literals)</param>
            <param name="aColour">The foreground/background (DOS) colour to write in - 0xXY where X is background colour and Y is foreground colour.</param>
        </member>
        <member name="T:Kernel.Kernel">
            <summary>
            The main class (containing the kernel entry point) for the Fling OS kernel.
            </summary>
        </member>
        <member name="M:Kernel.Kernel.#cctor">
            <summary>
            Initialises static stuff within the kernel (such as calling GC.Init and BasicDebug.Init)
            </summary>
        </member>
        <member name="M:Kernel.Kernel.CallStaticConstructors">
            <summary>
            Filled-in by the compiler.
            </summary>
        </member>
        <member name="M:Kernel.Kernel.Main">
            <summary>
            Main kernel entry point
            </summary>
        </member>
        <member name="M:Kernel.Kernel.Halt">
            <summary>
            Halts the kernel and halts the CPU.
            </summary>
        </member>
        <member name="M:Kernel.Kernel.ManagedMain">
            <summary>
            The actual main method for the kernel - by this point, all memory management, exception handling 
            etc has been set up properly.
            </summary>
        </member>
    </members>
</doc>
