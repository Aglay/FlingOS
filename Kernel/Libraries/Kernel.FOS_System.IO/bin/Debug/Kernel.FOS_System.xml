<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kernel.FOS_System</name>
    </assembly>
    <members>
        <member name="T:Kernel.FOS_System.Array">
            <summary>
            Represents the underlying type of any array within the Kernel.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Object">
            <summary>
            All objects (that are GC managed) should derive from this type.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.ObjectWithType">
            <summary>
            Represents an object with a type. You should use the <see cref="T:Kernel.FOS_System.Object"/> class.
            </summary>
            <remarks>
            We implement it like this so that _Type field is always the first
            field in memory of all objects.
            </remarks>
        </member>
        <member name="F:Kernel.FOS_System.ObjectWithType._Type">
            <summary>
            The underlying, specific type of the object specified when it was created.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Array.length">
            <summary>
            The length of the array. Can also use standard System.Array.Length e.g. new object[5].Length.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Array.elemType">
            <summary>
            The type of the elements within the array. Do NOT change this except during array setup 
            (i.e. in GC.NewArr method).
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Array.op_Implicit(System.Object[])~Kernel.FOS_System.Array">
            <summary>
            Implicitly converts a System.Array to an FOS_System.Array. The two are one and the same thing within the 
            kernel just Fos_System.Array allows access to actual fields.
            </summary>
            <param name="x">The System.Array to convert.</param>
            <returns>The FOS_System.Array (a reference to the exact same object).</returns>
        </member>
        <member name="M:Kernel.FOS_System.Array.Copy(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies the number of elements ("count") at sourceOffset from source to elements in dest at destOffset.
            </summary>
            <param name="source">The array to copy elements from.</param>
            <param name="sourceOffset">The offset in the source array to start copying at.</param>
            <param name="dest">The array to copy elements to.</param>
            <param name="destOffset">The offset in the destination array to start copying to.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="T:Kernel.BasicConsole">
            <summary>
            A basic console implementation - uses the BIOS's fixed text-video memory to output ASCII text.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.offset">
            <summary>
            The offset from the start of the memory (in characters) to write the next character to.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.vidMemBasePtr">
            <summary>
            A pointer to the start of the (character-based) video memory.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.rows">
            <summary>
            Numbers of rows in the video memory.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.cols">
            <summary>
            Number of columns in the video memory.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.colour">
            <summary>
            The colour to print characters in. Do not set directly, use SetTextColour/SetBackgroundColour.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.bg_colour">
            <summary>
            The background colour. Do not set directly, use SetTextColour/SetBackgroundColour.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.default_colour">
            <summary>
            Default colour to print characters in.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.warning_colour">
            <summary>
            Colour to print warning characters in.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.error_colour">
            <summary>
            Colour to print error characters in.
            </summary>
        </member>
        <member name="M:Kernel.BasicConsole.Init">
            <summary>
            Initialises the BasicConsole class.
            </summary>
        </member>
        <member name="M:Kernel.BasicConsole.SetTextColour(System.Char)">
            <summary>
            Sets the console text colour.
            </summary>
            <param name="aText_colour">The text colour to use.</param>
        </member>
        <member name="M:Kernel.BasicConsole.SetBgColour(System.Char)">
            <summary>
            Sets the console background colour.
            </summary>
            <param name="aBg_colour">The background colour to use.</param>
        </member>
        <member name="M:Kernel.BasicConsole.Clear">
            <summary>
            Clears the output to all black.
            </summary>
        </member>
        <member name="M:Kernel.BasicConsole.Write(Kernel.FOS_System.String)">
            <summary>
            Writes the specified string to the output at the current offset. 
            </summary>
            <param name="str">The string to output.</param>
            <remarks>
            If necessary, this method will move all existing text up the necessary number of lines to fit the new text on the bottom 
            of the screen.
            </remarks>
        </member>
        <member name="M:Kernel.BasicConsole.WriteLine(Kernel.FOS_System.String)">
            <summary>
            Writes the specified string to the output at the current offset then moves the offset to the end of the line.
            </summary>
            <param name="str">The string to output.</param>
            <remarks>
            This also blanks out the rest of the line to make sure no artifacts are left behind.
            </remarks>
        </member>
        <member name="M:Kernel.BasicConsole.WriteLine">
            <summary>
            Writes a blank line (line with a space).
            </summary>
        </member>
        <member name="M:Kernel.BasicConsole.PrintTestString">
            <summary>
            Prints the test string (all the keyboard characters) to the start of the output - overwrites any existing text.
            </summary>
        </member>
        <member name="F:Kernel.BasicConsole.DisableDelayOutput">
            <summary>
            Whether to disable the delay output method. Used when debugging is enabled.
            </summary>
        </member>
        <member name="M:Kernel.BasicConsole.DelayOutput(System.Int32)">
            <summary>
            Synchronous processing delay.
            </summary>
        </member>
        <member name="P:Kernel.BasicConsole.Offset">
            <summary>
            The offset from the start of the memory (in characters) to write the next character to.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.ByteConverter">
            <summary>
            Methods for converting to and from byte arrays.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.ByteConverter.ToUInt16(System.Byte[],System.UInt32)">
            <summary>
            Converts 2 bytes from the specified byte array at the specified index into a UInt16.
            </summary>
            <param name="n">The byte array from which to convert bytes.</param>
            <param name="aPos">The index of the first of the two bytes to convert.</param>
            <returns>The converted UInt16.</returns>
        </member>
        <member name="M:Kernel.FOS_System.ByteConverter.ToUInt32(System.Byte[],System.UInt32)">
            <summary>
            Converts 4 bytes from the specified byte array at the specified index into a UInt32.
            </summary>
            <param name="n">The byte array from which to convert bytes.</param>
            <param name="aPos">The index of the first of the four bytes to convert.</param>
            <returns>The converted UInt32.</returns>
        </member>
        <member name="M:Kernel.FOS_System.ByteConverter.GetASCIIBytes(Kernel.FOS_System.String)">
            <summary>
            Converts the specified ASCII encoded string into an array of ASCII encoded bytes.
            </summary>
            <param name="asciiString">The ASCII encoded string to convert.</param>
            <returns>The ASCII encoded bytes.</returns>
        </member>
        <member name="M:Kernel.FOS_System.ByteConverter.GetUTF16Bytes(Kernel.FOS_System.String,System.Int32,System.Int32)">
            <summary>
            Converts the specified ASCII encoded string into an array of UTF16 encoded bytes.
            </summary>
            <param name="asciiString">The ASCII encoded string to convert.</param>
            <param name="offset">The offset within the ASCII string at which to start converting.</param>
            <param name="count">The number of characters to convert.</param>
            <returns>The UTF16 encoded bytes.</returns>
        </member>
        <member name="M:Kernel.FOS_System.ByteConverter.GetASCIIStringFromASCII(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Converts the specified bytes to an ASCII encoded string, treating the bytes as ASCII encoded bytes.
            </summary>
            <param name="n">The bytes to convert.</param>
            <param name="aStart">The index in the array at which to start converting bytes.</param>
            <param name="aCharCount">The number of characters to convert.</param>
            <returns>The ASCII encoded string.</returns>
        </member>
        <member name="M:Kernel.FOS_System.ByteConverter.GetASCIIStringFromUTF16(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Converts the specified bytes to an ASCII encoded string, treating the bytes as UTF16 encoded bytes.
            </summary>
            <param name="n">The bytes to convert.</param>
            <param name="aStart">The index in the array at which to start converting bytes.</param>
            <param name="aCharCount">The number of characters to convert.</param>
            <returns>The ASCII encoded string.</returns>
        </member>
        <member name="T:Kernel.FOS_System.Collections.List">
            <summary>
            Represents a weakly typed list of objects (which must be derived from FOS_System.Object) that can be accessed by 
            index. Provides methods to search and manipulate lists.
            </summary>
            <remarks>
            The job of knowing which type of object is contained within the list is left to the developer. This is a 
            significant issue but one which we can't solve yet since generics aren't supported properly yet.
            </remarks>
        </member>
        <member name="F:Kernel.FOS_System.Collections.List._array">
            <summary>
            The underlying object array.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Collections.List.currIndex">
            <summary>
            The "currentIndex" is the index to insert the next new item.
            It is the index immediately after the last-set item in the array.
            It thus also acts as an item count.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Collections.List.#ctor">
            <summary>
            Creates a new list with initial capacity of 5.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Collections.List.#ctor(System.Int32)">
            <summary>
            Creates a new list with specified initial capacity. Use this to optimise memory usage.
            </summary>
            <param name="capacity">The initial capacity of the list.</param>
        </member>
        <member name="M:Kernel.FOS_System.Collections.List.Add(Kernel.FOS_System.Object)">
            <summary>
            Adds the specified object to the list.
            </summary>
            <param name="obj">The object to add.</param>
        </member>
        <member name="M:Kernel.FOS_System.Collections.List.Remove(Kernel.FOS_System.Object)">
            <summary>
            Removes the specified object from the list.
            </summary>
            <param name="obj">The object to remove.</param>
        </member>
        <member name="M:Kernel.FOS_System.Collections.List.RemoveAt(System.Int32)">
            <summary>
            The removes the object at the specified index from the list.
            </summary>
            <param name="index">The index of the object to remove.</param>
        </member>
        <member name="M:Kernel.FOS_System.Collections.List.Empty">
            <summary>
            Empties the list of all objects but does not alter the list capacity.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Collections.List.ExpandCapacity(System.Int32)">
            <summary>
            Expands the capacity of the internel array that stores the objects.
            </summary>
            <param name="amount">The amount to expand the capacity by.</param>
        </member>
        <member name="P:Kernel.FOS_System.Collections.List.Count">
            <summary>
            The number of elements in the list.
            </summary>
        </member>
        <member name="P:Kernel.FOS_System.Collections.List.Item(System.Int32)">
            <summary>
            Gets the object at the specified index.
            </summary>
            <param name="index">The index of the object to get.</param>
            <returns>The object at the specified index.</returns>
            <exception cref="T:Kernel.FOS_System.Exceptions.IndexOutOfRangeException">
            Throws IndexOutOfRangeException if "index" is &lt; 0 or greater than the length of the list.
            </exception>
        </member>
        <member name="T:Kernel.FOS_System.Collections.UInt32List">
            <summary>
            Represents a strongly typed list of UInt32s that can be accessed by 
            index. Provides methods to search and manipulate lists.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Collections.UInt32List._array">
            <summary>
            The underlying object array.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Collections.UInt32List.currIndex">
            <summary>
            The "currentIndex" is the index to insert the next new item.
            It is the index immediately after the last-set item in the array.
            It thus also acts as an item count.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Collections.UInt32List.#ctor">
            <summary>
            Creates a new list with initial capacity of 5.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Collections.UInt32List.#ctor(System.Int32)">
            <summary>
            Creates a new list with specified initial capacity. Use this to optimise memory usage.
            </summary>
            <param name="capacity">The initial capacity of the list.</param>
        </member>
        <member name="M:Kernel.FOS_System.Collections.UInt32List.Add(System.UInt32)">
            <summary>
            Adds the specified UInt32 to the list.
            </summary>
            <param name="obj">The UInt32 to add.</param>
        </member>
        <member name="M:Kernel.FOS_System.Collections.UInt32List.Remove(System.UInt32)">
            <summary>
            Removes the first equal value of the specified UInt32 from the list.
            </summary>
            <param name="obj">The UInt32 to remove.</param>
        </member>
        <member name="M:Kernel.FOS_System.Collections.UInt32List.ExpandCapacity(System.Int32)">
            <summary>
            Expands the capacity of the internel array that stores the UInt32s.
            </summary>
            <param name="amount">The amount to expand the capacity by.</param>
        </member>
        <member name="P:Kernel.FOS_System.Collections.UInt32List.Count">
            <summary>
            The number of elements in the list.
            </summary>
        </member>
        <member name="P:Kernel.FOS_System.Collections.UInt32List.Item(System.Int32)">
            <summary>
            Gets the UInt32 at the specified index.
            </summary>
            <param name="index">The index of the UInt32 to get.</param>
            <returns>The UInt32 at the specified index.</returns>
            <exception cref="T:Kernel.FOS_System.Exceptions.IndexOutOfRangeException">
            Throws IndexOutOfRangeException if "index" is &lt; 0 or greater than the length of the list.
            </exception>
        </member>
        <member name="T:Kernel.FOS_System.Exception">
            <summary>
            An exception object.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Exception.Message">
            <summary>
            The exception message.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exception.#ctor">
            <summary>
            Creates a new, empty exception.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exception.#ctor(Kernel.FOS_System.String)">
            <summary>
            Creates a new exception with specified message.
            </summary>
            <param name="aMessage">The exception message.</param>
        </member>
        <member name="T:Kernel.ExceptionMethods">
            <summary>
            Implements the lowest-level kernel exception handling.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionMethods.Throw_PanicMessage">
            <summary>
            The message to display when the Throw method panics.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionMethods.UnhandledException_PanicMessage">
            <summary>
            The message to display when the kernel panics.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionMethods.CurrentException">
            <summary>
            The current exception - null as soon as the exception has been handled.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionMethods.PendingException">
            <summary>
            Whether the current exception is pending being handled.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionMethods.CurrentHandlerPtr">
            <summary>
            Pointer to the current Exception Handler Info (a pointer to the
            struct on the stack).
            </summary>
        </member>
        <member name="M:Kernel.ExceptionMethods.AddExceptionHandlerInfo(System.Void*,System.Void*)">
            <summary>
            Adds a new Exception Handler Info structure to the stack and sets 
            it as the current handler.
            </summary>
            <param name="handlerPtr">A pointer to the first op of the catch or finally handler.</param>
            <param name="filterPtr">0 = finally handler, 0xFFFFFFFF = catch handler with no filter. 
            Original intended use was as a pointer to the first op of the catch filter but never implemented like this.</param>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw(Kernel.FOS_System.Exception)">
            <summary>
            Throws the specified exception.
            </summary>
            <param name="ex">The exception to throw.</param>
        </member>
        <member name="M:Kernel.ExceptionMethods.ThrowFromPtr(System.UInt32*)">
            <summary>
            Throws the specified exception. Implementation used is eaxctly the 
            same as Throw (exact same plug used) just allows another way to 
            throw an exception.
            </summary>
            <param name="exPtr">The pointer to the exception to throw.</param>
        </member>
        <member name="M:Kernel.ExceptionMethods.HandleException">
            <summary>
            Handles the current pending exception.
            </summary>
        </member>
        <member name="M:Kernel.ExceptionMethods.HandleLeave(System.Void*)">
            <summary>
            Handles cleanly leaving a critical section (i.e. try or catch block)
            </summary>
            <param name="continuePtr">A pointer to the instruction to continue execution at.</param>
        </member>
        <member name="M:Kernel.ExceptionMethods.HandleEndFinally">
            <summary>
            Handles cleanly leaving a "finally" critical section (i.e. finally block). 
            This may result in an exception being passed to the next handler if it has not been caught &amp; handled yet.
            </summary>
        </member>
        <member name="M:Kernel.ExceptionMethods.Rethrow">
            <summary>
            Rethrows the current exception.
            </summary>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw_DivideByZeroException">
            <summary>
            Throws a divide by zero exception.
            </summary>
            <remarks>
            Used by CPU interrupts to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw_OverflowException">
            <summary>
            Throws an overflow exception.
            </summary>
            <remarks>
            Used by CPU interrupts to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw_InvalidOpCodeException">
            <summary>
            Throws an invalid op code exception.
            </summary>
            <remarks>
            Used by CPU interrupts to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw_DoubleFaultException">
            <summary>
            Throws a double fault exception.
            </summary>
            <remarks>
            Used by CPU interrupts to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw_StackException">
            <summary>
            Throws a stack exception.
            </summary>
            <remarks>
            Used by CPU interrupts to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw_PageFaultException(System.UInt32,System.UInt32)">
            <summary>
            Throws a page fault exception.
            </summary>
            <remarks>
            Used by CPU interrupts to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw_NullReferenceException">
            <summary>
            Throws a Null Reference exception.
            </summary>
            <remarks>
            Used by compiler to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw_ArrayTypeMismatchException">
            <summary>
            Throws an Array Type Mismatch exception.
            </summary>
            <remarks>
            Used by compiler to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="M:Kernel.ExceptionMethods.Throw_IndexOutOfRangeException">
            <summary>
            Throws a Index Out Of Range exception.
            </summary>
            <remarks>
            Used by compiler to handle the creation of the exception object and calling Throw.
            </remarks>
        </member>
        <member name="T:Kernel.ExceptionHandlerInfo">
            <summary>
            Represents an Exception Handler Info.
            </summary>
            <remarks>
            <para>
            This structure is so closely linked to the ASM code that modifying it is a big NO!
            </para>
            <para>
            It is created by the AddExceptionHandlerInfo method on the stack but could technically be put 
            anywhere in memory. The order of the fields in the structure matters!
            </para>
            </remarks>
        </member>
        <member name="F:Kernel.ExceptionHandlerInfo.ESP">
            <summary>
            The value of ESP when the handler info was created. This value of 
            ESP is also a pointer to the first byte of this Exception Handler Info structure.
            The ESP register is restored to this value when a handler is entered or re-entered.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionHandlerInfo.EBP">
            <summary>
            The value of EBP when the handler info was created.
            The EBP register is restored to this value when a handler is entered or re-entered.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionHandlerInfo.HandlerAddress">
            <summary>
            The address of the first op of the handler / a pointer to the first op of the handler.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionHandlerInfo.FilterAddress">
            <summary>
            0x00000000 = indicates this is a finally handler. 
            0xFFFFFFFF = indicates this is a catch handler with no filter.
            0xXXXXXXXX = The address of the first op of the filter - has not actually been implemented! Behaviour for such values is undetermined.
            </summary>
        </member>
        <member name="F:Kernel.ExceptionHandlerInfo.PrevHandlerAddress">
            <summary>
            A pointer to the previous exception handler info (i.e. the address of the previous info).
            </summary>
        </member>
        <member name="F:Kernel.ExceptionHandlerInfo.InHandler">
            <summary>
            Whether execution is currently inside the try-section or the handler-section of this exception handler info.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.NotSupportedException">
            <summary>
            Represents a not supported exception.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.NotSupportedException.#ctor(Kernel.FOS_System.String)">
            <summary>
            Sets the message to "Not supported exception."
            </summary>
            <param name="anExtendedMessage">The extended message to append to the main message.</param>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.ArgumentException">
            <summary>
            Represents an argument exception.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.ArgumentException.#ctor(Kernel.FOS_System.String)">
            <summary>
            Sets the message to "Argument exception".
            </summary>
            <param name="anExtendedMessage">
            The extended message to append to the main message. Should specify which argument caused the exception.
            </param>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.InvalidOpCodeException">
            <summary>
            Represents an invalid op-code exception.
            Usually thrown by the hardware interrupt.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.InvalidOpCodeException.#ctor">
            <summary>
            Sets the message to "Attempted to execute an invalid op code."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.DoubleFaultException">
            <summary>
            Represents a double fault exception.
            Usually thrown by the hardware interrupt.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.DoubleFaultException.#ctor">
            <summary>
            Sets the message to "Double fault exception."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.NullReferenceException">
            <summary>
            Represents a null reference exception.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.NullReferenceException.#ctor">
            <summary>
            Sets the message to "Null reference exception."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.IndexOutOfRangeException">
            <summary>
            Represents an index out of range exception.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.IndexOutOfRangeException.#ctor">
            <summary>
            Sets the message to "Index out of range exception."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.PageFaultException">
            <summary>
            Represents a page fault exception.
            Usually thrown by the hardware interrupt.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Exceptions.PageFaultException.errorCode">
            <summary>
            The error code passed with the exception.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Exceptions.PageFaultException.address">
            <summary>
            The (virtual) address that caused the exception.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.PageFaultException.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Sets the message to "Page fault"
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.ArrayTypeMismatchException">
            <summary>
            Represents a array type mismatch exception.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.ArrayTypeMismatchException.#ctor">
            <summary>
            Sets the message to "Array type mismatch exception."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.StackException">
            <summary>
            Represents a stack exception.
            Usually thrown by the hardware interrupt.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.StackException.#ctor">
            <summary>
            Sets the message to "Stack error."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.OverflowException">
            <summary>
            Represents an overflow exception.
            Usually thrown by the hardware interrupt.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.OverflowException.#ctor">
            <summary>
            Sets the message to "Overflow exception."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Exceptions.DivideByZeroException">
            <summary>
            Represents a divide by zero exception.
            Usually thrown by hardware interrupt 0 when code attempts to divide a number (always integer?) by 0.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Exceptions.DivideByZeroException.#ctor">
            <summary>
            Sets the message to "Attempt to divide by zero invalid."
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.GC">
            <summary>
            The garbage collector.
            </summary>
            <remarks>
            Make sure all methods that the GC calls are marked with [Compiler.NoGC] (including
            get-set property methods! Apply the attribute to the get/set keywords not the property
            declaration (/name).
            </remarks>
        </member>
        <member name="F:Kernel.FOS_System.GC.NumObjs">
            <summary>
            The total number of objects currently allocated by the GC.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.GC.GCInitialised">
            <summary>
            Whether the GC has been initialised yet or not.
            Used to prevent the GC running before it has been initialised properly.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.GC.InsideGC">
            <summary>
            Whether the GC is currently executing. Used to prevent the GC calling itself (or ending up in loops with
            called methods re-calling the GC!)
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.GC.NumStrings">
            <summary>
            The number of strings currently allocated on the heap.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.GC.CleanupList">
            <summary>
            The linked-list of objects to clean up.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.GC.Init">
            <summary>
            Intialises the GC.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.GC.NewObj(Kernel.FOS_System.Type)">
            <summary>
            Creates a new object of specified type (but does not call the default constructor).
            </summary>
            <param name="theType">The type of object to create.</param>
            <returns>A pointer to the new object in memory.</returns>
        </member>
        <member name="M:Kernel.FOS_System.GC.NewArr(System.Int32,Kernel.FOS_System.Type)">
            <summary>
            Creates a new array with specified element type (but does not call the default constructor).
            </summary>
            <remarks>"length" param placed first so that calling NewArr method is simple
            with regards to pushing params onto the stack.</remarks>
            <param name="length">The length of the array to create.</param>
            <param name="elemType">The type of element in the array to create.</param>
            <returns>A pointer to the new array in memory.</returns>
        </member>
        <member name="M:Kernel.FOS_System.GC.NewString(System.Int32)">
            <summary>
            DO NOT CALL DIRECTLY. Use FOS_System.String.New
            Creates a new string with specified length (but does not call the default constructor).
            </summary>
            <returns>A pointer to the new string in memory.</returns>
        </member>
        <member name="M:Kernel.FOS_System.GC.IncrementRefCount(Kernel.FOS_System.Object)">
            <summary>
            Increments the ref count of a GC managed object.
            </summary>
            <remarks>
            Uses underlying increment ref count method.
            </remarks>
            <param name="anObj">The object to increment the ref count of.</param>
        </member>
        <member name="M:Kernel.FOS_System.GC._IncrementRefCount(System.Byte*)">
            <summary>
            Underlying method that increments the ref count of a GC managed object.
            </summary>
            <remarks>
            This method checks that the pointer is not a null pointer and also checks for the GC signature 
            so string literals and the like don't accidentally get treated as normal GC managed strings.
            </remarks>
            <param name="objPtr">Pointer to the object to increment the ref count of.</param>
        </member>
        <member name="M:Kernel.FOS_System.GC.DecrementRefCount(Kernel.FOS_System.Object)">
            <summary>
            Decrements the ref count of a GC managed object.
            </summary>
            <remarks>
            This method checks that the pointer is not a null pointer and also checks for the GC signature 
            so string literals and the like don't accidentally get treated as normal GC managed strings.
            </remarks>
            <param name="anObj">The object to decrement the ref count of.</param>
        </member>
        <member name="M:Kernel.FOS_System.GC.DecrementRefCount(Kernel.FOS_System.Object,System.Boolean)">
            <summary>
            Decrements the ref count of a GC managed object.
            </summary>
            <remarks>
            This method checks that the pointer is not a null pointer and also checks for the GC signature 
            so string literals and the like don't accidentally get treated as normal GC managed strings.
            </remarks>
            <param name="anObj">The object to decrement the ref count of.</param>
            <param name="overrideInside">Whether to ignore the InsideGC test or not.</param>
        </member>
        <member name="M:Kernel.FOS_System.GC._DecrementRefCount(System.Byte*)">
            <summary>
            Underlying method that decrements the ref count of a GC managed object.
            </summary>
            <remarks>
            This method checks that the pointer is not a null pointer and also checks for the GC signature 
            so string literals and the like don't accidentally get treated as normal GC managed strings.
            </remarks>
            <param name="objPtr">A pointer to the object to decrement the ref count of.</param>
        </member>
        <member name="M:Kernel.FOS_System.GC.CheckSignature(Kernel.FOS_System.GCHeader*)">
            <summary>
            Checks the GC header is valid by checking for the GC signature.
            </summary>
            <param name="headerPtr">A pointer to the header to check.</param>
            <returns>True if the signature is found and is correct.</returns>
        </member>
        <member name="M:Kernel.FOS_System.GC.SetSignature(Kernel.FOS_System.GCHeader*)">
            <summary>
            Sets the GC signature in the specified GC header.
            </summary>
            <param name="headerPtr">A pointer to the header to set the signature in.</param>
        </member>
        <member name="M:Kernel.FOS_System.GC.Cleanup">
            <summary>
            Scans the CleanupList to free objects from memory.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.GC.AddObjectToCleanup(Kernel.FOS_System.GCHeader*,System.Void*)">
            <summary>
            Adds an object to the cleanup list.
            </summary>
            <param name="objHeaderPtr">A pointer to the object's header.</param>
            <param name="objPtr">A pointer to the object.</param>
        </member>
        <member name="M:Kernel.FOS_System.GC.RemoveObjectToCleanup(Kernel.FOS_System.GCHeader*)">
            <summary>
            Removes an object from the cleanup list.
            </summary>
            <param name="objHeaderPtr">A pointer to the object's header.</param>
        </member>
        <member name="M:Kernel.FOS_System.GC.RemoveObjectToCleanup(Kernel.FOS_System.ObjectToCleanup*)">
            <summary>
            Removes an object from the cleanup list.
            </summary>
            <param name="objToCleanupPtr">A pointer to the cleanup-list element.</param>
        </member>
        <member name="T:Kernel.FOS_System.GCHeader">
            <summary>
            Represents the GC header that is put in memory in front of every object so the GC can manage the object.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.GCHeader.Sig1">
            <summary>
            The first 4 bytes of the GC signature.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.GCHeader.Sig2">
            <summary>
            The second 4 bytes of the GC signature.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.GCHeader.Checksum">
            <summary>
            A checksum value.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.GCHeader.RefCount">
            <summary>
            The current reference count for the object associated with this header.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.ObjectToCleanup">
            <summary>
            Represents an object to be garbage collected (i.e. freed from memory).
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.ObjectToCleanup.objPtr">
            <summary>
            The pointer to the object.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.ObjectToCleanup.objHeaderPtr">
            <summary>
            The pointer to the object's header.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.ObjectToCleanup.prevPtr">
            <summary>
            A pointer to the previous item in the cleanup list.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.ObjectToCleanup.nextPtr">
            <summary>
            A pointer to the next item in the cleanup list.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.HeapBlock">
            <summary>
            Represents a block of memory that has been allocated for use by the heap.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.HeapBlock.next">
            <summary>
            A pointer to the next heap block.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.HeapBlock.size">
            <summary>
            The size of the block of memory allocated.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.HeapBlock.used">
            <summary>
            The amount of memory in the block that has been used.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.HeapBlock.bsize">
            <summary>
            The size of the chunks to use when allocating memory.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.HeapBlock.lfb">
            <summary>
            Used for optimisation.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Heap">
            <summary>
            The kernel heap - currently a very simple implementation.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Heap.fblock">
            <summary>
            A pointer to the most-recently added heap block.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Heap.GetTotalFreeMem">
            <summary>
            Calculates the total amount of free memory in the heap.
            </summary>
            <returns>The total amount of free memory in the heap.</returns>
        </member>
        <member name="M:Kernel.FOS_System.Heap.GetFreeMem(Kernel.FOS_System.HeapBlock*)">
            <summary>
            Calculates the amount of free memory in the specified block.
            </summary>
            <param name="aBlock">The block to calculate free mem of.</param>
            <returns>The amount of free memory in bytes.</returns>
        </member>
        <member name="F:Kernel.FOS_System.Heap.FixedHeapInitialised">
            <summary>
            Whether the kernel's fixed heap has been initialised or not.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Heap.GetFixedHeapPtr">
            <summary>
            Gets a pointer to the block of memory to allocate to the kernel's fixed heap.
            </summary>
            <returns>The pointer to the block of memory.</returns>
        </member>
        <member name="M:Kernel.FOS_System.Heap.GetFixedHeapSize">
            <summary>
            Gets the size of the block of memory to allocate to the kernel's fixed heap.
            </summary>
            <returns>The size of the block of memory.</returns>
        </member>
        <member name="M:Kernel.FOS_System.Heap.InitFixedHeap">
            <summary>
            Intialises the kernel's fixed heap.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Heap.Init">
            <summary>
            Intialises the heap.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Heap.AddBlock(System.UInt32*,System.UInt32,System.UInt32)">
            <summary>
            Adds a contiguous block of memory to the heap so it can be used for allocating memory to objects.
            </summary>
            <param name="addr">The address of the start of the block of memory.</param>
            <param name="size">The size of the block of memory to add.</param>
            <param name="bsize">The size of the chunks to use when allocating memory.</param>
            <returns>Returns 1 if the block was added successfully.</returns>
        </member>
        <member name="M:Kernel.FOS_System.Heap.GetNID(System.Byte,System.Byte)">
            <summary>
            Don't understand what this actually does...anyone care to inform me?
            </summary>
            <param name="a">Umm...</param>
            <param name="b">Umm...</param>
            <returns>Umm...the NID I guess... :)</returns>
        </member>
        <member name="M:Kernel.FOS_System.Heap.Alloc(System.UInt32)">
            <summary>
            Attempts to allocate the specified amount of memory from the heap.
            </summary>
            <param name="size">The amount of memory to try and allocate.</param>
            <returns>A pointer to the start of the allocated memory or a null pointer if not enough 
            contiguous memory is available.</returns>
        </member>
        <member name="M:Kernel.FOS_System.Heap.Free(System.Void*)">
            <summary>
            Frees the specified memory giving it back to the heap.
            </summary>
            <param name="ptr">A pointer to the memory to free.</param>
        </member>
        <member name="P:Kernel.FOS_System.Heap.FBlock">
            <summary>
            A pointer to the most-recently added heap block.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Int64">
            <summary>
            Replacement class for methods, properties and fields usually found on standard System.Int64 type.
            </summary>
        </member>
        <member name="P:Kernel.FOS_System.Int64.MaxValue">
            <summary>
            Returns the maximum value of an Int32.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Int32">
            <summary>
            Replacement class for methods, properties and fields usually found on standard System.Int32 type.
            </summary>
        </member>
        <member name="P:Kernel.FOS_System.Int32.MaxValue">
            <summary>
            Returns the maximum value of an Int32.
            </summary>
        </member>
        <member name="T:Kernel.FOS_System.Math">
            <summary>
            Provides constants and static methods for common mathematical functions and some operations not supported by 
            IL code.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Math.Divide(System.UInt64,System.UInt32)">
            <summary>
            Divides a UInt64 by a UInt32.
            </summary>
            <param name="dividend">The UInt64 to be divided.</param>
            <param name="divisor">The UInt32 to divide.</param>
            <returns>The quotient of the division.</returns>
        </member>
        <member name="T:Kernel.FOS_System.String">
            <summary>
            Replacement class for methods, properties and fields usually found on standard System.String type.
            Also contains utility methods for low-level string manipulation.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.String.length">
            <summary>
            The length of the string.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.String.GetLength(System.String)">
            <summary>
            Gets the length of the specified string.
            </summary>
            <param name="aString">The string to get the length of.</param>
            <returns>The length of the specified string.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.GetCharPointer(System.String)">
            <summary>
            Gets a pointer to the first char (that represents a character) of the specified string.
            </summary>
            <param name="aString">The string to get a pointer to.</param>
            <returns>A pointer to the first char (that represents a character) of the specified string.</returns>
            <remarks>
            Skips over the length dword at the start of the string.
            </remarks>
        </member>
        <member name="M:Kernel.FOS_System.String.New(System.Int32)">
            <summary>
            Creates a new, blank FOS_System.String of specified length.
            IMPORTANT NOTE: You MUST assign the return value of this to a variable / local / arg / 
            field etc. You may not use IL or C# that results in an IL Pop op of the return value
            of this method as it will screw up the GC RefCount handling.
            </summary>
            <param name="length">The length of the string to create.</param>
            <returns>The new string.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.Concat(Kernel.FOS_System.String,Kernel.FOS_System.String)">
            <summary>
            Concatenates two strings into one new string.
            </summary>
            <param name="str1">The first part of the new string.</param>
            <param name="str2">The second part of the new string.</param>
            <returns>The new string.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.GetCharPointer">
            <summary>
            Gets a pointer to the first character in the string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kernel.FOS_System.String.PadLeft(System.Int32,System.Char)">
            <summary>
            Creates a new string and pads the left side of the string with the specified character until the 
            whole string is of the specified length.
            </summary>
            <param name="totalLength">The final length of the whole string.</param>
            <param name="padChar">The character to pad with.</param>
            <returns>The new, padded string.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.PadRight(System.Int32,System.Char)">
            <summary>
            Creates a new string and pads the right side of the string with the specified character until the 
            whole string is of the specified length.
            </summary>
            <param name="totalLength">The final length of the whole string.</param>
            <param name="padChar">The character to pad with.</param>
            <returns>The new, padded string.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.Trim">
            <summary>
            Creates a new string and trims all spaces from the beginning and end of the string.
            </summary>
            <returns>The new, trimmed string.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.TrimEnd">
            <summary>
            Creates a new string and trims all spaces from the end of the string.
            </summary>
            <returns>The new, trimmed string.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.Substring(System.Int32,System.Int32)">
            <summary>
            Creates a new string that is a copy of the current string starting at the specified index for specified length.
            </summary>
            <param name="startIndex">The index to start copying at.</param>
            <param name="aLength">The number of characters to copy.</param>
            <returns>The new string.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.StartsWith(Kernel.FOS_System.String)">
            <summary>
            Determines whether the string starts with the specified string.
            </summary>
            <param name="prefix">The string to test for.</param>
            <returns>Whether the string starts with the prefix.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.Split(System.Char)">
            <summary>
            Splits the string at every index where splitChar occurs and adds the splits parts (excluding splitChar)
            to a list of strings.
            </summary>
            <param name="splitChar">The char to split with.</param>
            <returns>The list of split parts.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.ToUpper">
            <summary>
            Copies the current string then converts all the alpha-characters to upper-case.
            </summary>
            <returns>The new, upper-case string.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.op_Addition(Kernel.FOS_System.String,Kernel.FOS_System.String)">
            <summary>
            Concatenates two strings using "+" operator.
            </summary>
            <param name="x">The first string.</param>
            <param name="y">The second string.</param>
            <returns>The new contenated string.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.op_Equality(Kernel.FOS_System.String,Kernel.FOS_System.String)">
            <summary>
            Tests whether all the characters of two strings are equal.
            </summary>
            <param name="x">The first string.</param>
            <param name="y">The second string.</param>
            <returns>Whether the two strings are identical or not.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.op_Inequality(Kernel.FOS_System.String,Kernel.FOS_System.String)">
            <summary>
            Tests whether any of the characters of two strings are not equal.
            </summary>
            <param name="x">The first string.</param>
            <param name="y">The second string.</param>
            <returns>Whether the two strings mismatch in any place.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.op_Implicit(System.Boolean)~Kernel.FOS_System.String">
            <summary>
            Implicitly converts the specified value to an FOS_System.String.
            </summary>
            <param name="x">The value to convert.</param>
            <returns>The FOS_System.String value.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.op_Implicit(System.String)~Kernel.FOS_System.String">
            <summary>
            Implicitly converts the specified value to an FOS_System.String.
            </summary>
            <param name="x">The value to convert.</param>
            <returns>The FOS_System.String value.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.op_Explicit(Kernel.FOS_System.String)~System.String">
            <summary>
            Implicitly converts the specified FOS_System.String to a System.String.
            </summary>
            <param name="x">The value to convert.</param>
            <returns>The System.String.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.op_Implicit(System.Byte)~Kernel.FOS_System.String">
            <summary>
            Implicitly converts the specified value to a hex FOS_System.String.
            </summary>
            <param name="x">The value to convert.</param>
            <returns>The FOS_System.String value.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.op_Implicit(System.UInt16)~Kernel.FOS_System.String">
            <summary>
            Implicitly converts the specified value to a hex FOS_System.String.
            </summary>
            <param name="x">The value to convert.</param>
            <returns>The FOS_System.String value.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.op_Implicit(System.Int16)~Kernel.FOS_System.String">
            <summary>
            Implicitly converts the specified value to a hex FOS_System.String.
            </summary>
            <param name="x">The value to convert.</param>
            <returns>The FOS_System.String value.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.op_Implicit(System.UInt32)~Kernel.FOS_System.String">
            <summary>
            Implicitly converts the specified value to a hex FOS_System.String.
            </summary>
            <param name="x">The value to convert.</param>
            <returns>The FOS_System.String value.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.op_Implicit(System.Int32)~Kernel.FOS_System.String">
            <summary>
            Implicitly converts the specified value to a hex FOS_System.String.
            </summary>
            <param name="x">The value to convert.</param>
            <returns>The FOS_System.String value.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.op_Implicit(System.UInt64)~Kernel.FOS_System.String">
            <summary>
            Implicitly converts the specified value to a hex FOS_System.String.
            </summary>
            <param name="x">The value to convert.</param>
            <returns>The FOS_System.String value.</returns>
        </member>
        <member name="M:Kernel.FOS_System.String.op_Implicit(System.Int64)~Kernel.FOS_System.String">
            <summary>
            Implicitly converts the specified value to a hex FOS_System.String.
            </summary>
            <param name="x">The value to convert.</param>
            <returns>The FOS_System.String value.</returns>
        </member>
        <member name="P:Kernel.FOS_System.String.Item(System.Int32)">
            <summary>
            Gets the character at the specified index.
            </summary>
            <param name="index">The index of the character to get.</param>
            <returns>The character at the specified index.</returns>
        </member>
        <member name="T:Kernel.FOS_System.Type">
            <summary>
            Represents an object type specification.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Type.Size">
            <summary>
            The size of the object in memory.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Type.Id">
            <summary>
            The type ID.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Type.StackSize">
            <summary>
            The size of the type when on the stack or in an array.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Type.IsValueType">
            <summary>
            Whether the type is a value type or not.
            </summary>
        </member>
        <member name="F:Kernel.FOS_System.Type.MethodTablePtr">
            <summary>
            A pointer to the start of the method table.
            </summary>
        </member>
        <member name="M:Kernel.FOS_System.Type.op_Equality(Kernel.FOS_System.Type,Kernel.FOS_System.Type)">
            <summary>
            Compares two types by ID to see if they represent the same type.
            </summary>
            <param name="x">The first type to compare with the second.</param>
            <param name="y">The second type to compare with the first.</param>
            <returns>True if they are equal, otherwise false.</returns>
        </member>
        <member name="M:Kernel.FOS_System.Type.op_Inequality(Kernel.FOS_System.Type,Kernel.FOS_System.Type)">
            <summary>
            Compares two types by ID to see if they represent the different types.
            </summary>
            <param name="x">The first type to compare with the second.</param>
            <param name="y">The second type to compare with the first.</param>
            <returns>True if they are not equal, otherwise false.</returns>
        </member>
        <member name="T:Kernel.FOS_System.Stubs.UInt32">
            <summary>
            Replacement class for methods, properties and fields usually found on standard System.Int32 type.
            </summary>
        </member>
        <member name="P:Kernel.FOS_System.Stubs.UInt32.MaxValue">
            <summary>
            Returns the maximum value of an Int32.
            </summary>
        </member>
    </members>
</doc>
