<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kernel.Debug.Debugger</name>
    </assembly>
    <members>
        <member name="T:Kernel.Debug.Debugger.ASMFile">
            <summary>
            Represents an assembler file
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.ASMFile.filePath">
            <summary>
            The file path to the ASM file to open.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.ASMFile.ASM">
            <summary>
            All the ASM lines read from the ASM file split by newline characters.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.ASMFile.#ctor(System.String)">
            <summary>
            Initialises a new ASMFile instance with the specified path to the ASm file to open.
            </summary>
            <param name="aFilePath">The path to the ASM file to open.</param>
        </member>
        <member name="M:Kernel.Debug.Debugger.ASMFile.Open">
            <summary>
            Opens the ASM file and scans it for important information such as label positions
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.ASMFile.GetMethodASM(Kernel.Debug.Data.DB_Method)">
            <summary>
            Gets the assembler text for the specified method.
            </summary>
            <param name="method">The method to get the ASM for.</param>
            <returns>The ASM text.</returns>
        </member>
        <member name="M:Kernel.Debug.Debugger.ASMFile.GetILOpASM(Kernel.Debug.Data.DB_ILOpInfo)">
            <summary>
            Gets the assembler text for the specified IL Op.
            </summary>
            <param name="anILOp">The IL Op to get the ASM for.</param>
            <returns>The ASM text.</returns>
        </member>
        <member name="T:Kernel.Debug.Debugger.DebugCommands">
            <summary>
            The list of basic debug commands used to debug the kernel.
            </summary>
            <remarks>
            Duplicated in Commands.*.asm file - any updates to this list
            must also be done to the ASM.
            </remarks>
        </member>
        <member name="F:Kernel.Debug.Debugger.DebugCommands.Break">
            <summary>
            Break command
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.DebugCommands.Continue">
            <summary>
            Continue command
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.DebugCommands.StepNext">
            <summary>
            StepNext command
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.DebugCommands.GetBreakAddress">
            <summary>
            GetBreakAddress command
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.DebugCommands.SendBreakAddress">
            <summary>
            SendBreakAddress command
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.DebugCommands.GetRegisters">
            <summary>
            GetRegisters command
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.DebugCommands.SendRegisters">
            <summary>
            SendRegisters command
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.DebugCommands.GetArguments">
            <summary>
            GetArguments command
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.DebugCommands.SendArguments">
            <summary>
            SendArguments command
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.DebugCommands.GetLocals">
            <summary>
            GetLocals command
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.DebugCommands.SendLocals">
            <summary>
            SendLocals command
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.DebugCommands.Message">
            <summary>
            Message command
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.DebugCommands.SetInt3">
            <summary>
            Set Int3 command
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.DebugCommands.ClearInt3">
            <summary>
            Clear Int3 command
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.DebugCommands.GetMemory">
            <summary>
            GetMemory command
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.DebugCommands.SendMemory">
            <summary>
            SendMemory command
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.DebugCommands.Connected">
            <summary>
            Connected command (notification)
            </summary>
        </member>
        <member name="T:Kernel.Debug.Debugger.BreakHandler">
            <summary>
            Handler for the OnBreak event.
            </summary>
        </member>
        <member name="T:Kernel.Debug.Debugger.InvalidCommandHandler">
            <summary>
            Handler for the OnInvalidCommand event.
            </summary>
            <param name="command">The invalid command byte.</param>
        </member>
        <member name="T:Kernel.Debug.Debugger.Debugger">
            <summary>
            The main class for handling debug communications with the Fling OS kernel.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.TheSerial">
            <summary>
            The serial connection to the kernel.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.TheElfMap">
            <summary>
            The Elf Map for the kernel being debugged.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.State">
            <summary>
            The current debugger state.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.breakAddress">
            <summary>
            The address of the last instruction executed before the break.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.currentNearestLabels">
            <summary>
            The nearest labels to the break address.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.currentNearestMethodBasedLabel">
            <summary>
            The nearest label to the break address that is a method-based label e.g.
            "method_METHODID.IL_OPNUMBER_ASMNUMBER"
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.currentILOpInfo">
            <summary>
            The IL Op info for the current line assuming we are not in a plugged method.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.lastILOpInfo">
            <summary>
            The last IL Op info that was found (if any).
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.registers">
            <summary>
            The data of the registers when execution was broken.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.currentMethod">
            <summary>
            The current method determined from break address.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.currentMethodASM">
            <summary>
            The current method's ASM text.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.currentCSLine">
            <summary>
            The current C# line info.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.currentCSMethod">
            <summary>
            The current C# method info.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.currentCSSymbol">
            <summary>
            The current C# symbol info.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.arguments">
            <summary>
            The current method's arguments.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.locals">
            <summary>
            The current method's locals.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.TheASMFile">
            <summary>
            The kernel's main assembler file.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.ThePDBDumpManager">
            <summary>
            The PDB dump manager used to access IL to C# mapping info.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.#ctor">
            <summary>
            Initialises a new instance on the debugger but does not connect 
            it to the kernel. Use <see cref="M:Kernel.Debug.Debugger.Debugger.Init(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Dispose">
            <summary>
            Disposes of the debugger instance cleanly.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Init(System.String,System.String)">
            <summary>
            Initialises the debugger, connects to the specified pipe and loads debug info
            from the build directory.
            </summary>
            <param name="pipe">The name of the pipe (excl. "\\.\pipe\")
            to connect to.</param>
            <param name="buildFolder">The folder path that the kernel was built to.</param>
            <returns>True if connected. Otherwise false.</returns>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.EndInit">
            <summary>
            Finishes off connecting to the OS.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Stop">
            <summary>
            Stops the debugger and closes the connection.
            </summary>
            <returns>True if debugger is succesfully stopped.</returns>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.WaitForCommand">
            <summary>
            Waits for and then handles an incoming command from the kernel
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.HandleCommand(System.Byte)">
            <summary>
            Handles the specified command as though it were received from the OS being debugged.
            </summary>
            <param name="cmdByte">The command to process.</param>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.HandleCommand(Kernel.Debug.Debugger.DebugCommands)">
            <summary>
            Handles the specified command as though it were received from the OS being debugged.
            </summary>
            <param name="cmd">The command to process.</param>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.TryLoadCurrentUnpluggedMethod">
            <summary>
            Loads the current method from the debug database 
            based on the break address.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.LoadCurrentMethodASM_Unplugged">
            <summary>
            Loads the current method's ASM assuming it is not plugged.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.LoadCurrentIlOp">
            <summary>
            Loads the current line's IL Op info (assuming we aren't in a plugged method)
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.LoadCurrentMethodCS">
            <summary>
            Loads the current method's C# code (if it isn't plugged).
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.TryLoadCurrentPluggedMethod">
            <summary>
            Loads the current method from the debug database 
            based on the break address.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.LoadCurrentMethodASM_Plugged">
            <summary>
            Loads the current method's ASM assuming it is plugged.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Handle_BreakCmd">
            <summary>
            Handles a received break command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Handle_ContinueCmd">
            <summary>
            Handles a received Continue command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Handle_GetArgumentsCmd">
            <summary>
            Handles a received GetArguments command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Handle_GetBreakAddressCmd">
            <summary>
            Handles a received GetBreakAddress command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Handle_GetLocalsCmd">
            <summary>
            Handles a received GetLocals command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Handle_GetRegistersCmd">
            <summary>
            Handles a received GetRegisters command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Handle_GetMemoryCmd">
            <summary>
            Handles a received GetMemory command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Handle_SetInt3Cmd">
            <summary>
            Handles a received SetInt3 command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Handle_ClearInt3Cmd">
            <summary>
            Handles a received ClearInt3 command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Handle_MessageCmd">
            <summary>
            Handles a received Message command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Handle_SendArgumentsCmd">
            <summary>
            Handles a received SendArguments command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Handle_SendBreakAddressCmd">
            <summary>
            Handles a received SendBreakAddress command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Handle_SendLocalsCmd">
            <summary>
            Handles a received SendLocals command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Handle_SendRegistersCmd">
            <summary>
            Handles a received SendRegisters command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Handle_SendMemoryCmd">
            <summary>
            Handles a received SendMemory command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Handle_ConnectedCmd">
            <summary>
            Handles a received Connected command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Handle_StepNextCmd">
            <summary>
            Handles a received StepNext command.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.BeginBreak">
            <summary>
            Breaks OS execution at the nearest possible moment.
            Note: EndBreak has to be called unless execution is immediately continued.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.EndBreak">
            <summary>
            Completes breaking of OS execution. Must be called immediately after OnBreak event is fired unless Continue 
            is immediately called.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.Continue">
            <summary>
            Continues OS execution - can be called immediately after OnBreak without EndBreak being called.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.StepNext">
            <summary>
            Performs an Int1 step
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.GetBreakAddress">
            <summary>
            Sends a request for the brwak address.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.GetRegisters">
            <summary>
            Gets the register values as they were immediately prior to the break interrupt.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.GetArguments">
            <summary>
            Gets the argument values as they were immediately prior to the break interrupt.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.GetLocals">
            <summary>
            Gets the locals values as they were immediately prior to the break interrupt.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.GetMemory(System.Byte[],System.UInt32)">
            <summary>
            Gets the value of the specified memory.
            </summary>
            <param name="address">The address of the memory to get.</param>
            <param name="length">The length of the memory to get.</param>
            <returns>The bytes of the value or null.</returns>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.SetInt3(System.UInt64)">
            <summary>
            Performs a delayed-set of an Int3 at the specified address.
            </summary>
            <param name="address">The addres to set the int3 at.</param>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.ClearInt3(System.UInt64)">
            <summary>
            Performs a delayed-clear of an Int3 at the specified address.
            </summary>
            <param name="address">The addres to set the int3 at.</param>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.StepToNextIL">
            <summary>
            Steps to the beggining of the next line of IL code.
            </summary>
            <returns>The address to break on.</returns>
        </member>
        <member name="F:Kernel.Debug.Debugger.Debugger.LoadMemoryRequests">
            <summary>
            The list of requests for memory.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.LoadMemoryValue(System.Byte[],System.UInt32,Kernel.Debug.Debugger.Debugger.LoadMemoryCompletedDelegate,System.Object)">
            <summary>
            Adds a memory request to the queue of memory requests.
            </summary>
            <param name="address">The bytes representing the address of the memory to load.</param>
            <param name="length">The length of the data to load.</param>
            <param name="onLoaded">The callback to call when the data has been loaded.</param>
            <param name="state">The request state object.</param>
        </member>
        <member name="M:Kernel.Debug.Debugger.Debugger.LoadMemoryValue_Run">
            <summary>
            Underlying method that asynchronously executes all the memory requests.
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.Debugger.BreakAddress">
            <summary>
            The address of the last instruction executed before the break.
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.Debugger.CurrentNearestLabels">
            <summary>
            The nearest labels to the break address.
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.Debugger.CurrentNearestMethodBasedLabel">
            <summary>
            The nearest label to the break address that is a method-based label e.g.
            "method_METHODID.IL_OPNUMBER_ASMNUMBER"
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.Debugger.CurrentNearestMethodLabel">
            <summary>
            The nearest label to the break address that is a method label e.g.
            "method_METHODID"
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.Debugger.CurrentILOpInfo">
            <summary>
            The IL Op info for the current line assuming we are not in a plugged method.
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.Debugger.LastILOpInfo">
            <summary>
            The last IL Op info that was found (if any).
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.Debugger.CurrentASMLineStartOffset">
            <summary>
            The offset from the start of the method ASM to the current ASM line
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.Debugger.CurrentASMLineLength">
            <summary>
            The length of the current ASM line.
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.Debugger.Registers">
            <summary>
            The data of the registers when execution was broken.
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.Debugger.CurrentMethod">
            <summary>
            The current method determined from break address.
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.Debugger.CurrentMethodASM">
            <summary>
            The current method's ASM text.
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.Debugger.CurrentCSLine">
            <summary>
            The current C# line info.
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.Debugger.CurrentCSMethod">
            <summary>
            The current C# method info.
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.Debugger.CurrentCSSymbol">
            <summary>
            The current C# method info.
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.Debugger.Arguments">
            <summary>
            The current method's arguments.
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.Debugger.Locals">
            <summary>
            The current method's locals.
            </summary>
        </member>
        <member name="E:Kernel.Debug.Debugger.Debugger.OnBreak">
            <summary>
            Fired when the Break command is received.
            </summary>
        </member>
        <member name="E:Kernel.Debug.Debugger.Debugger.OnInvalidCommand">
            <summary>
            Fired when an invalid command is received.
            </summary>
        </member>
        <member name="E:Kernel.Debug.Debugger.Debugger.OnConnected">
            <summary>
            Fired when the debugger first becomes connected.
            </summary>
        </member>
        <member name="T:Kernel.Debug.Debugger.Debugger.States">
            <summary>
            The states the deugger can be in.
            </summary>
        </member>
        <member name="T:Kernel.Debug.Debugger.Debugger.LoadMemoryCompletedDelegate">
            <summary>
            Represents a callback method for when requested memory data has been loaded.
            </summary>
            <param name="data">The loaded data.</param>
            <param name="state">The state is actually the request (tuple) object.</param>
        </member>
        <member name="T:Kernel.Debug.Debugger.Registers">
            <summary>
            All the supported registers
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Registers.EAX">
            <summary>
            EAX register
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Registers.EBX">
            <summary>
            EBX register
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Registers.ECX">
            <summary>
            ECX register
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Registers.EDX">
            <summary>
            EDX register
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Registers.ESI">
            <summary>
            ESI register
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Registers.EDI">
            <summary>
            EDI register
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Registers.EBP">
            <summary>
            EBP register
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Registers.EIP">
            <summary>
            EIP register
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Registers.ESP">
            <summary>
            ESP register
            </summary>
        </member>
        <member name="T:Kernel.Debug.Debugger.Register">
            <summary>
            Represents a register value
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Register.register">
            <summary>
            The register this value if from.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Register.value">
            <summary>
            The value of the register.
            </summary>
        </member>
        <member name="T:Kernel.Debug.Debugger.Variable">
            <summary>
            Represents any variable e.g. arguments or locals
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Variable.StringValueLoaded">
            <summary>
            Inidicates whether the value of the string has been loaded or only the address.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Variable.value">
            <summary>
            The bytes value of the variable
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Variable.dbType">
            <summary>
            The type of the variable
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Variable.Fields">
            <summary>
            The variables that represent the fields of this variable.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Variable.LoadFields(Kernel.Debug.Debugger.Debugger,Kernel.Debug.Debugger.Variable.OnLoadFieldsCompleteDelegate,System.Boolean)">
            <summary>
            Loads the values of the fields of this variable.
            </summary>
            <param name="debugger">The debugger to use for loading.</param>
        </member>
        <member name="M:Kernel.Debug.Debugger.Variable.ToString">
            <summary>
            Converts the variable's value to a string
            </summary>
            <returns>The variable's value represented as a string</returns>
        </member>
        <member name="T:Kernel.Debug.Debugger.Argument">
            <summary>
            Represents a method argument
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Argument.isReturnArg">
            <summary>
            Whether the argument is actually the return value.
            </summary>
        </member>
        <member name="T:Kernel.Debug.Debugger.Local">
            <summary>
            Represents a local variable
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.Local.isTemporary">
            <summary>
            Whether the local is a temporary value rather than a built-in local.
            </summary>
        </member>
        <member name="T:Kernel.Debug.Debugger.MainForm">
            <summary>
            The main window for the kernel debugger application
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.MainForm.#ctor">
            <summary>
            Initialises the window
            </summary>
        </member>
        <member name="F:Kernel.Debug.Debugger.MainForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.MainForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Kernel.Debug.Debugger.MainForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Kernel.Debug.Debugger.Program">
            <summary>
            The main program class for the debugger.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:Kernel.Debug.Debugger.OnConnectedHandler">
            <summary>
            Handler for methods called when the serial pipe is connected.
            </summary>
        </member>
        <member name="T:Kernel.Debug.Debugger.Serial">
            <summary>
            A serial pipe wrapper.
            </summary>
            <remarks>
            Implements IDisposable to cleanly close the pipe connection.
            </remarks>
        </member>
        <member name="F:Kernel.Debug.Debugger.Serial.ThePipe">
            <summary>
            The underlying pipe.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Serial.Dispose">
            <summary>
            Disposes of the serial class. Calls <see cref="M:Kernel.Debug.Debugger.Serial.Disconnect"/>.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Serial.Init(System.String)">
            <summary>
            Initialises the named pipe server and waits for a connection
            </summary>
            <param name="pipe">The name of the pipe to create</param>
            <returns>True if a connection is received. Otherwise false.</returns>
        </member>
        <member name="M:Kernel.Debug.Debugger.Serial.Disconnect">
            <summary>
            Cleanly disconnects the pipe and terminates reading.
            </summary>
            <returns>True if disconnected successfully.</returns>
        </member>
        <member name="M:Kernel.Debug.Debugger.Serial.ReadBytes(System.Int32)">
            <summary>
            Reads the specified number of bytes from the pipe.
            </summary>
            <param name="numToRead">The number of bytes to read.</param>
            <returns>The bytes read.</returns>
        </member>
        <member name="M:Kernel.Debug.Debugger.Serial.Write(System.Byte)">
            <summary>
            Writes a byte to the serial pipe.
            </summary>
            <param name="aByte">The byte to write.</param>
        </member>
        <member name="M:Kernel.Debug.Debugger.Serial.Write(System.UInt32)">
            <summary>
            Writes a UInt32 to the serial pipe.
            </summary>
            <param name="anInt">The UInt32 to write.</param>
        </member>
        <member name="M:Kernel.Debug.Debugger.Serial.Write(System.UInt64)">
            <summary>
            Writes a UInt64 to the serial pipe.
            </summary>
            <param name="anInt">The UInt64 to write.</param>
        </member>
        <member name="P:Kernel.Debug.Debugger.Serial.Connected">
            <summary>
            Whether the serial pipe is connected.
            </summary>
        </member>
        <member name="E:Kernel.Debug.Debugger.Serial.OnConnected">
            <summary>
            Fired when the serial pipe gains a connection.
            </summary>
        </member>
        <member name="T:Kernel.Debug.Debugger.Utils">
            <summary>
            Utility methods for the debugger.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.Utils.BytesToAddress(System.Byte[])">
            <summary>
            Converts the specified address bytes to an numeric address
            </summary>
            <param name="addressBytes">The bytes to convert.</param>
            <returns>The numeric address and the size of the address in bytes.</returns>
        </member>
        <member name="M:Kernel.Debug.Debugger.Utils.AddressToBytes(System.Tuple{System.UInt64,System.Byte})">
            <summary>
            Converts the specified address description to its bytes representation.
            </summary>
            <param name="address">The address decription to convert.</param>
            <returns>The address bytes.</returns>
        </member>
        <member name="M:Kernel.Debug.Debugger.Utils.GetValueStr(System.Byte[],System.String)">
            <summary>
            Converts the specified bytes to their human-readable representation
            </summary>
            <param name="bytes">The bytes to convert.</param>
            <param name="type">The type-signature of the type represented by the bytes.</param>
            <returns>The value string.</returns>
        </member>
        <member name="T:Kernel.Debug.Debugger.IVirtualMachine">
            <summary>
            An interface between the debugger and any virtual machine that the debugger can use to start and debug an instance of Fling OS on.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.IVirtualMachine.PowerOn">
            <summary>
            Powers on (i.e. starts) the VM.
            </summary>
            <returns>True if the VM starts succesfully, otherwise false.</returns>
        </member>
        <member name="M:Kernel.Debug.Debugger.IVirtualMachine.PowerOff">
            <summary>
            Powers off (i.e. stops) the VM.
            </summary>
            <returns>True if the VM stops, otherwise false.</returns>
        </member>
        <member name="P:Kernel.Debug.Debugger.IVirtualMachine.PoweredOn">
            <summary>
            Whether the VM is powered on or not (i.e. running or not).
            </summary>
        </member>
        <member name="T:Kernel.Debug.Debugger.VMWare_VM">
            <summary>
            An implementation of the IVirtualMachine interface for VMWare virtual machines.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Debugger.VMWare_VM.PowerOn">
            <summary>
            Powers on (i.e. starts) the VM.
            </summary>
            <returns>True if the VM starts succesfully, otherwise false.</returns>
        </member>
        <member name="M:Kernel.Debug.Debugger.VMWare_VM.PowerOff">
            <summary>
            Powers off (i.e. stops) the VM.
            </summary>
            <returns>True if the VM stops, otherwise false.</returns>
        </member>
        <member name="M:Kernel.Debug.Debugger.VMWare_VM.Dispose">
            <summary>
            The necessary dispose method. Calls PowerOff.
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.VMWare_VM.PoweredOn">
            <summary>
            Whether the VM is powered on or not (i.e. running or not).
            </summary>
        </member>
        <member name="T:Kernel.Debug.Debugger.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kernel.Debug.Debugger.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
