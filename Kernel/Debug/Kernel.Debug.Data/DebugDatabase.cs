#region Copyright Notice
/// ------------------------------------------------------------------------------ ///
///                                                                                ///
///               All contents copyright � Edward Nutting 2014                     ///
///                                                                                ///
///        You may not share, reuse, redistribute or otherwise use the             ///
///        contents this file outside of the Fling OS project without              ///
///        the express permission of Edward Nutting or other copyright             ///
///        holder. Any changes (including but not limited to additions,            ///
///        edits or subtractions) made to or from this document are not            ///
///        your copyright. They are the copyright of the main copyright            ///
///        holder for all Fling OS files. At the time of writing, this             ///
///        owner was Edward Nutting. To be clear, owner(s) do not include          ///
///        developers, contributors or other project members.                      ///
///                                                                                ///
/// ------------------------------------------------------------------------------ ///
#endregion
    
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Kernel.Debug.Data
{
    /// <summary>
    /// Provides a set of managed methods to interface to the Fling OS debug database.
    /// <para>To Do's:</para>
    /// <list type="bullet">    
    /// <item>
    /// <term>To do</term>
    /// <description>
    /// Add an invisble caching mechanism.
    /// </description>
    /// </item>
    /// <item>
    /// <term>To do</term>
    /// <description>
    /// Extend the invisible caching mechanism to adds/removes
    /// to improve efficiency.
    /// </description>
    /// </item>
    /// <item>
    /// <term>To do</term>
    /// <description>
    /// Use InsertAllOnSubmit / DeleteAllOnSubmit with caching mechanism if 
    /// they are faster / more efficient.
    /// </description>
    /// </item>
    /// <item>
    /// <term>To do</term>
    /// <description>
    /// Create extra Add methods that take required fields as arguments to
    /// increase ease of coding elsewhere / reduce code duplication.
    /// </description>
    /// </item>
    /// </list>
    /// </summary>
    /// <remarks>
    /// <para>
    /// The output database has a fixed path. It is not any of the output databases in the output directories 
    /// of this project or any referenced projects.
    /// </para>
    /// <para>
    /// The data in the output database can be viewed directly in VS2013.
    /// </para>
    /// <para>Steps for viewing debug database entries in VS2013</para>
    /// <list type="number">
    /// <item>
    /// <term>Open the server explorer</term>
    /// <description>Open the server explorer by going to View -> Server Explorer</description>
    /// </item>
    /// <item>
    /// <term>Add Connection...</term>
    /// <description>Right click on Data Connections and choose "Add Connection..."</description>
    /// </item>
    /// <item>
    /// <term>Change the Data Source</term>
    /// <description>Change the Data Source to "Microsoft SQL Server Database File".</description>
    /// </item>
    /// <item>
    /// <term>Select the database file</term>
    /// <description>Browse for and select the debug database file.</description>
    /// </item>
    /// <item>
    /// <term>Done!</term>
    /// <description>Done! Browse the data in the database as normal.</description>
    /// </item>
    /// </list>
    /// <para>
    /// To modify the debug database structure (e.g. tables), add a connection
    /// (as above) to the Database.mdf file in this project. Then double click
    /// on any table to modify its structure and use the standard "Update table"
    /// features.
    /// </para>
    /// </remarks>
    /// <example>
    /// Adding a new entry to the Methods table. 
    /// Note: No data is submitted to the database until 
    /// <c>DebugDatabase.SubmitChanges()</c> is called.
    /// <code>
    /// DB_Method dbMethod = new DB_Method();
    /// dbMethod.Id = MethodID;
    /// dbMethod.MethodSignature = methodSignature;
    /// dbMethod.Plugged = false;
    /// dbMethod.ASMStartPos = -1;
    /// dbMethod.ASMEndPos = -1;
    /// DebugDatabase.AddMethod(dbMethod);
    /// </code>
    /// </example>
    public static class DebugDatabase
    {
        /// <summary>
        /// The underlying data context (generated by the VS designer)
        /// used to access the local Debug Database.
        /// </summary>
        /// <remarks>
        /// Not to be accessed externally. All tasks should have a static method
        /// on this class to wrap it. This will allow extended management / 
        /// optimisation in future.
        /// </remarks>
        private static DatabaseDataContext DB
        {
            get
            {
                if(_DB == null)
                {
                    _DB = new DatabaseDataContext();
                    if (!_DB.DatabaseExists())
                    {
                        _DB.CreateDatabase();
                    }
                }
                return _DB;
            }
            set
            {
                _DB = value;
            }
        }
        private static DatabaseDataContext _DB;

        /// <summary>
        /// Submits changes and disposes of the underlying database connection.
        /// </summary>
        public static void Dispose()
        {
            SubmitChanges();
            DB.Connection.Close();
            DB.Dispose();
            DB = null;
        }

        /// <summary>
        /// Empties all the database's tables.
        /// </summary>
        /// <remarks>
        /// This does call <see cref="SubmitChanges"/> meaning the database 
        /// is emptied immediately this method is called.
        /// <item><description>Add any new tables to this empty method.</description></item>
        /// </remarks>
        public static void Empty()
        {
            //NOTE - Add new debug tables here
            DB.DB_ILOpInfos.DeleteAllOnSubmit(DB.DB_ILOpInfos);
            DB.DB_LocalVariables.DeleteAllOnSubmit(DB.DB_LocalVariables);
            DB.DB_Methods.DeleteAllOnSubmit(DB.DB_Methods);
            DB.DB_StringLiterals.DeleteAllOnSubmit(DB.DB_StringLiterals);
            DB.DB_StaticFields.DeleteAllOnSubmit(DB.DB_StaticFields);
            DB.DB_Arguments.DeleteAllOnSubmit(DB.DB_Arguments);
            DB.DB_ComplexTypeLinks.DeleteAllOnSubmit(DB.DB_ComplexTypeLinks);
            DB.DB_Types.DeleteAllOnSubmit(DB.DB_Types);
            SubmitChanges();
        }

        /// <summary>
        /// Submits all changes to the database.
        /// </summary>
        /// <remarks>
        /// This must be called after all expected changes have been 
        /// set up except after calling <see cref="Empty"/>.
        /// </remarks>
        public static void SubmitChanges()
        {
            DB.SubmitChanges();
        }

        #region Methods

        /// <summary>
        /// Gets the specified method from the database.
        /// <para>To Do's:</para>
        /// <list type="bullet">        
        /// <item>
        /// <term>To do</term>
        /// <description>Caching mechanism.</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="aMethodID">The ID of the entry to get/</param>
        /// <returns>The database method if found. Otherwise null.</returns>
        /// <remarks>
        /// <para>
        /// This is an exception-safe method so if you try to request
        /// an ID that isn't in the database, it won't throw an exception.
        /// Instead it will return null.
        /// </para>
        /// <para>
        /// The return value of this method can be cached because the 
        /// debug database used is a static instance so exceptions will 
        /// not occur if you modify values etc.
        /// </para>
        /// </remarks>
        public static DB_Method GetMethod(string aMethodID)
        {
            IQueryable<DB_Method> potMethods = (from methods in DB.DB_Methods
                                                where (methods.Id == aMethodID)
                                                select methods);
            if (potMethods.Count() > 0)
            {
                return potMethods.First();
            }
            return null;
        }
        /// <summary>
        /// Adds the pre-created method to the database. All the entries's
        /// required parameters (i.e. ones which cannot be null) should 
        /// be set.
        /// <para>To Do's:</para>
        /// <list type="bullet">        
        /// <item>
        /// <term>To do</term>
        /// <description>
        /// Add validation of fields and throw a pre-emptive exception if any 
        /// invalid or missing data is found.
        /// </description>
        /// </item>
        /// <item>
        /// <term>To do</term>
        /// <description>
        /// Check whether changes must be submitted before the 
        /// <see cref="GetMethod"/> method can return methods added by Add.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="aMethod">The method to add.</param>
        /// <remarks>
        /// <para>
        /// For the moment this method does no more than just directly add
        /// the method to the database.
        /// </para>
        /// <para>
        /// <see cref="SubmitChanges"/> must be called at some point after this
        /// method for changes to actually be submitted to the database.
        /// </para>
        /// </remarks>
        public static void AddMethod(DB_Method aMethod)
        {
            DB.DB_Methods.InsertOnSubmit(aMethod);
        }
        /// <summary>
        /// Removes the specified method from the database.
        /// <para>To Do's:</para>
        /// <list type="bullet">        
        /// <item>
        /// <term>To do</term>
        /// <description>
        /// Check for entries in other tables that link to the one being 
        /// deleted. If the dependent entries are not being deleted, throw an 
        /// error.
        /// </description>
        /// </item>
        /// <item>
        /// <term>To do</term>
        /// <description>
        /// Add an option to automatically delete dependent entries.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="aMethod">The method to remove.</param>
        /// <remarks>
        /// <para>
        /// For the moment this method does no more than just directly remove
        /// the method from the database.
        /// </para>
        /// <para>
        /// <see cref="SubmitChanges"/> must be called at some point after this
        /// method for changes to actually be submitted to the database.
        /// </para>
        /// </remarks>
        public static void RemoveMethod(DB_Method aMethod)
        {
            DB.DB_Methods.DeleteOnSubmit(aMethod);
        }

        #endregion

        #region ILOpInfos

        /// <summary>
        /// Gets the specified IL op info from the database.
        /// <para>To Do's: See <see cref="GetMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="anILOpInfoID">The ID of the entry to get.</param>
        /// <returns>The database IL op info if found. Otherwise null.</returns>
        /// <remarks>
        /// <para>
        /// This is an exception-safe method so if you try to request
        /// an ID that isn't in the database, it won't throw an exception.
        /// Instead it will return null.
        /// </para>
        /// <para>
        /// The return value of this method can be cached because the 
        /// debug database used is a static instance so exceptions will 
        /// not occur if you modify values etc.
        /// </para>
        /// </remarks>
        public static DB_ILOpInfo GetILOpInfo(Guid anILOpInfoID)
        {
            IQueryable<DB_ILOpInfo> potILOpInfos = (from ILOpInfos in DB.DB_ILOpInfos
                                                where (ILOpInfos.Id == anILOpInfoID)
                                                select ILOpInfos);
            if (potILOpInfos.Count() > 0)
            {
                return potILOpInfos.First();
            }
            return null;
        }
        /// <summary>
        /// Adds the pre-created IL op info to the database. All the entries's
        /// required parameters (i.e. ones which cannot be null) should 
        /// be set.
        /// <para>To Do's: See <see cref="AddMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="anILOpInfo">The entry to add.</param>
        /// <remarks>
        /// <para>
        /// For the moment this method does no more than just directly add
        /// the entry to the database.
        /// </para>
        /// <para>
        /// <see cref="SubmitChanges"/> must be called at some point after this
        /// method for changes to actually be submitted to the database.
        /// </para>
        /// </remarks>
        public static void AddILOpInfo(DB_ILOpInfo anILOpInfo)
        {
            anILOpInfo.ValueBytes = null;
            DB.DB_ILOpInfos.InsertOnSubmit(anILOpInfo);
        }
        /// <summary>
        /// Removes the specified IL op info from the database.
        /// <para>To Do's: See <see cref="RemoveMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="anILOpInfo">The entry to remove.</param>
        /// <remarks>
        /// <para>
        /// For the moment this method does no more than just directly remove
        /// the entry from the database.
        /// </para>
        /// <para>
        /// <see cref="SubmitChanges"/> must be called at some point after this
        /// method for changes to actually be submitted to the database.
        /// </para>
        /// </remarks>
        public static void RemoveILOpInfo(DB_ILOpInfo anILOpInfo)
        {
            DB.DB_ILOpInfos.DeleteOnSubmit(anILOpInfo);
        }

        #endregion

        #region StringLiterals

        /// <summary>
        /// Gets the specified string literal from the database.
        /// <para>To Do's: See <see cref="GetMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="aStringLiteralID">The ID of the entry to get.</param>
        /// <returns>The database string literal if found. Otherwise null.</returns>
        /// <remarks>
        /// <para>
        /// This is an exception-safe method so if you try to request
        /// an ID that isn't in the database, it won't throw an exception.
        /// Instead it will return null.
        /// </para>
        /// <para>
        /// The return value of this method can be cached because the 
        /// debug database used is a static instance so exceptions will 
        /// not occur if you modify values etc.
        /// </para>
        /// </remarks>
        public static DB_StringLiteral GetStringLiteral(string aStringLiteralID)
        {
            IQueryable<DB_StringLiteral> potStringLiterals = (from StringLiterals in DB.DB_StringLiterals
                                                where (StringLiterals.Id == aStringLiteralID)
                                                select StringLiterals);
            if (potStringLiterals.Count() > 0)
            {
                return potStringLiterals.First();
            }
            return null;
        }
        /// <summary>
        /// Adds the pre-created string literal to the database. All the entries's
        /// required parameters (i.e. ones which cannot be null) should 
        /// be set.
        /// <para>To Do's: See <see cref="AddMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="aStringLiteral">The entry to add.</param>
        /// <remarks>
        /// <para>
        /// For the moment this method does no more than just directly add
        /// the entry to the database.
        /// </para>
        /// <para>
        /// <see cref="SubmitChanges"/> must be called at some point after this
        /// method for changes to actually be submitted to the database.
        /// </para>
        /// </remarks>
        public static void AddStringLiteral(DB_StringLiteral aStringLiteral)
        {
            DB.DB_StringLiterals.InsertOnSubmit(aStringLiteral);
        }
        /// <summary>
        /// Removes the specified string literal from the database.
        /// <para>To Do's: See <see cref="RemoveMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="aStringLiteral">The entry to remove.</param>
        /// <remarks>
        /// <para>
        /// For the moment this method does no more than just directly remove
        /// the entry from the database.
        /// </para>
        /// <para>
        /// <see cref="SubmitChanges"/> must be called at some point after this
        /// method for changes to actually be submitted to the database.
        /// </para>
        /// </remarks>
        public static void RemoveStringLiteral(DB_StringLiteral aStringLiteral)
        {
            DB.DB_StringLiterals.DeleteOnSubmit(aStringLiteral);
        }

        #endregion

        #region StaticFields

        /// <summary>
        /// Gets the specified static field from the database.
        /// <para>To Do's: See <see cref="GetMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="aStaticFieldID">The ID of the entry to get.</param>
        /// <returns>The database static field if found. Otherwise null.</returns>
        /// <remarks>
        /// <para>
        /// This is an exception-safe method so if you try to request
        /// an ID that isn't in the database, it won't throw an exception.
        /// Instead it will return null.
        /// </para>
        /// <para>
        /// The return value of this method can be cached because the 
        /// debug database used is a static instance so exceptions will 
        /// not occur if you modify values etc.
        /// </para>
        /// </remarks>
        public static DB_StaticField GetStaticField(string aStaticFieldID)
        {
            IQueryable<DB_StaticField> potStaticFields = (from StaticFields in DB.DB_StaticFields
                                                              where (StaticFields.Id == aStaticFieldID)
                                                              select StaticFields);
            if (potStaticFields.Count() > 0)
            {
                return potStaticFields.First();
            }
            return null;
        }
        /// <summary>
        /// Adds the pre-created static field to the database. All the entries's
        /// required parameters (i.e. ones which cannot be null) should 
        /// be set.
        /// <para>To Do's: See <see cref="AddMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="aStaticField">The entry to add.</param>
        /// <remarks>
        /// <para>
        /// For the moment this method does no more than just directly add
        /// the entry to the database.
        /// </para>
        /// <para>
        /// <see cref="SubmitChanges"/> must be called at some point after this
        /// method for changes to actually be submitted to the database.
        /// </para>
        /// </remarks>
        public static void AddStaticField(DB_StaticField aStaticField)
        {
            DB.DB_StaticFields.InsertOnSubmit(aStaticField);
        }
        /// <summary>
        /// Removes the specified static field from the database.
        /// <para>To Do's: See <see cref="RemoveMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="aStaticField">The entry to remove.</param>
        /// <remarks>
        /// <para>
        /// For the moment this method does no more than just directly remove
        /// the entry from the database.
        /// </para>
        /// <para>
        /// <see cref="SubmitChanges"/> must be called at some point after this
        /// method for changes to actually be submitted to the database.
        /// </para>
        /// </remarks>
        public static void RemoveStaticField(DB_StaticField aStaticField)
        {
            DB.DB_StaticFields.DeleteOnSubmit(aStaticField);
        }

        #endregion

        #region LocalVariables

        /// <summary>
        /// Gets the specified local variable from the database.
        /// <para>To Do's: See <see cref="GetMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="aLocalVariableID">The ID of the entry to get.</param>
        /// <returns>The database local variable if found. Otherwise null.</returns>
        /// <remarks>
        /// <para>
        /// This is an exception-safe method so if you try to request
        /// an ID that isn't in the database, it won't throw an exception.
        /// Instead it will return null.
        /// </para>
        /// <para>
        /// The return value of this method can be cached because the 
        /// debug database used is a static instance so exceptions will 
        /// not occur if you modify values etc.
        /// </para>
        /// </remarks>
        public static DB_LocalVariable GetLocalVariable(Guid aLocalVariableID)
        {
            IQueryable<DB_LocalVariable> potLocalVariables = (from LocalVariables in DB.DB_LocalVariables
                                                where (LocalVariables.Id == aLocalVariableID)
                                                select LocalVariables);
            if (potLocalVariables.Count() > 0)
            {
                return potLocalVariables.First();
            }
            return null;
        }
        /// <summary>
        /// Adds the pre-created local variable to the database. All the entries's
        /// required parameters (i.e. ones which cannot be null) should 
        /// be set.
        /// <para>To Do's: See <see cref="AddMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="aLocalVariable">The entry to add.</param>
        /// <remarks>
        /// <para>
        /// For the moment this method does no more than just directly add
        /// the entry to the database.
        /// </para>
        /// <para>
        /// <see cref="SubmitChanges"/> must be called at some point after this
        /// method for changes to actually be submitted to the database.
        /// </para>
        /// </remarks>
        public static void AddLocalVariable(DB_LocalVariable aLocalVariable)
        {
            DB.DB_LocalVariables.InsertOnSubmit(aLocalVariable);
        }
        /// <summary>
        /// Removes the specified local variable from the database.
        /// <para>To Do's: See <see cref="RemoveMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="aLocalVariable">The entry to remove.</param>
        /// <remarks>
        /// <para>
        /// For the moment this method does no more than just directly remove
        /// the entry from the database.
        /// </para>
        /// <para>
        /// <see cref="SubmitChanges"/> must be called at some point after this
        /// method for changes to actually be submitted to the database.
        /// </para>
        /// </remarks>
        public static void RemoveLocalVariable(DB_LocalVariable aLocalVariable)
        {
            DB.DB_LocalVariables.DeleteOnSubmit(aLocalVariable);
        }

        #endregion

        #region Arguments

        /// <summary>
        /// Gets the specified argument from the database.
        /// <para>To Do's: See <see cref="GetMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="aArgumentID">The ID of the entry to get.</param>
        /// <returns>The database argument if found. Otherwise null.</returns>
        /// <remarks>
        /// <para>
        /// This is an exception-safe method so if you try to request
        /// an ID that isn't in the database, it won't throw an exception.
        /// Instead it will return null.
        /// </para>
        /// <para>
        /// The return value of this method can be cached because the 
        /// debug database used is a static instance so exceptions will 
        /// not occur if you modify values etc.
        /// </para>
        /// </remarks>
        public static DB_Argument GetArgument(Guid aArgumentID)
        {
            IQueryable<DB_Argument> potArguments = (from Arguments in DB.DB_Arguments
                                                              where (Arguments.Id == aArgumentID)
                                                              select Arguments);
            if (potArguments.Count() > 0)
            {
                return potArguments.First();
            }
            return null;
        }
        /// <summary>
        /// Adds the pre-created argument to the database. All the entries's
        /// required parameters (i.e. ones which cannot be null) should 
        /// be set.
        /// <para>To Do's: See <see cref="AddMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="aArgument">The entry to add.</param>
        /// <remarks>
        /// <para>
        /// For the moment this method does no more than just directly add
        /// the entry to the database.
        /// </para>
        /// <para>
        /// <see cref="SubmitChanges"/> must be called at some point after this
        /// method for changes to actually be submitted to the database.
        /// </para>
        /// </remarks>
        public static void AddArgument(DB_Argument aArgument)
        {
            DB.DB_Arguments.InsertOnSubmit(aArgument);
        }
        /// <summary>
        /// Removes the specified argument from the database.
        /// <para>To Do's: See <see cref="RemoveMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="aArgument">The entry to remove.</param>
        /// <remarks>
        /// <para>
        /// For the moment this method does no more than just directly remove
        /// the entry from the database.
        /// </para>
        /// <para>
        /// <see cref="SubmitChanges"/> must be called at some point after this
        /// method for changes to actually be submitted to the database.
        /// </para>
        /// </remarks>
        public static void RemoveArgument(DB_Argument aArgument)
        {
            DB.DB_Arguments.DeleteOnSubmit(aArgument);
        }

        #endregion

        #region ComplexTypeLinks

        /// <summary>
        /// Gets the specified complex type link from the database.
        /// <para>To Do's: See <see cref="GetMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="aComplexTypeLinkID">The ID of the entry to get.</param>
        /// <returns>The database complex type link if found. Otherwise null.</returns>
        /// <remarks>
        /// <para>
        /// This is an exception-safe method so if you try to request
        /// an ID that isn't in the database, it won't throw an exception.
        /// Instead it will return null.
        /// </para>
        /// <para>
        /// The return value of this method can be cached because the 
        /// debug database used is a static instance so exceptions will 
        /// not occur if you modify values etc.
        /// </para>
        /// </remarks>
        public static DB_ComplexTypeLink GetComplexTypeLink(Guid aComplexTypeLinkID)
        {
            IQueryable<DB_ComplexTypeLink> potComplexTypeLinks = (from ComplexTypeLinks in DB.DB_ComplexTypeLinks
                                                    where (ComplexTypeLinks.Id == aComplexTypeLinkID)
                                                    select ComplexTypeLinks);
            if (potComplexTypeLinks.Count() > 0)
            {
                return potComplexTypeLinks.First();
            }
            return null;
        }
        /// <summary>
        /// Adds the pre-created complex type link to the database. All the entries's
        /// required parameters (i.e. ones which cannot be null) should 
        /// be set.
        /// <para>To Do's: See <see cref="AddMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="aComplexTypeLink">The entry to add.</param>
        /// <remarks>
        /// <para>
        /// For the moment this method does no more than just directly add
        /// the entry to the database.
        /// </para>
        /// <para>
        /// <see cref="SubmitChanges"/> must be called at some point after this
        /// method for changes to actually be submitted to the database.
        /// </para>
        /// </remarks>
        public static void AddComplexTypeLink(DB_ComplexTypeLink aComplexTypeLink)
        {
            DB.DB_ComplexTypeLinks.InsertOnSubmit(aComplexTypeLink);
        }
        /// <summary>
        /// Removes the specified complex type link from the database.
        /// <para>To Do's: See <see cref="RemoveMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="aComplexTypeLink">The entry to remove.</param>
        /// <remarks>
        /// <para>
        /// For the moment this method does no more than just directly remove
        /// the entry from the database.
        /// </para>
        /// <para>
        /// <see cref="SubmitChanges"/> must be called at some point after this
        /// method for changes to actually be submitted to the database.
        /// </para>
        /// </remarks>
        public static void RemoveComplexTypeLink(DB_ComplexTypeLink aComplexTypeLink)
        {
            DB.DB_ComplexTypeLinks.DeleteOnSubmit(aComplexTypeLink);
        }

        #endregion

        #region Types

        /// <summary>
        /// Gets the specified type from the database.
        /// <para>To Do's: See <see cref="GetMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="aTypeID">The ID of the entry to get.</param>
        /// <returns>The database type if found. Otherwise null.</returns>
        /// <remarks>
        /// <para>
        /// This is an exception-safe method so if you try to request
        /// an ID that isn't in the database, it won't throw an exception.
        /// Instead it will return null.
        /// </para>
        /// <para>
        /// The return value of this method can be cached because the 
        /// debug database used is a static instance so exceptions will 
        /// not occur if you modify values etc.
        /// </para>
        /// </remarks>
        public static DB_Type GetType(string aTypeID)
        {
            IQueryable<DB_Type> potTypes = (from Types in DB.DB_Types
                                            where (Types.Id == aTypeID)
                                            select Types);
            if (potTypes.Count() > 0)
            {
                return potTypes.First();
            }
            return null;
        }
        /// <summary>
        /// Adds the pre-created type to the database. All the entries's
        /// required parameters (i.e. ones which cannot be null) should 
        /// be set.
        /// <para>To Do's: See <see cref="AddMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="aType">The entry to add.</param>
        /// <remarks>
        /// <para>
        /// For the moment this method does no more than just directly add
        /// the entry to the database.
        /// </para>
        /// <para>
        /// <see cref="SubmitChanges"/> must be called at some point after this
        /// method for changes to actually be submitted to the database.
        /// </para>
        /// </remarks>
        public static void AddType(DB_Type aType)
        {
            DB.DB_Types.InsertOnSubmit(aType);
        }
        /// <summary>
        /// Removes the specified type from the database.
        /// <para>To Do's: See <see cref="RemoveMethod"/>'s to do's.</para>
        /// </summary>
        /// <param name="aType">The entry to remove.</param>
        /// <remarks>
        /// <para>
        /// For the moment this method does no more than just directly remove
        /// the entry from the database.
        /// </para>
        /// <para>
        /// <see cref="SubmitChanges"/> must be called at some point after this
        /// method for changes to actually be submitted to the database.
        /// </para>
        /// </remarks>
        public static void RemoveType(DB_Type aType)
        {
            DB.DB_Types.DeleteOnSubmit(aType);
        }

        #endregion
    }
}
