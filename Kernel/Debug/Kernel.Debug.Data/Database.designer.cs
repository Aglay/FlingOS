#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kernel.Debug.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDB_ILOpInfo(DB_ILOpInfo instance);
    partial void UpdateDB_ILOpInfo(DB_ILOpInfo instance);
    partial void DeleteDB_ILOpInfo(DB_ILOpInfo instance);
    partial void InsertDB_StringLiteral(DB_StringLiteral instance);
    partial void UpdateDB_StringLiteral(DB_StringLiteral instance);
    partial void DeleteDB_StringLiteral(DB_StringLiteral instance);
    partial void InsertDB_Method(DB_Method instance);
    partial void UpdateDB_Method(DB_Method instance);
    partial void DeleteDB_Method(DB_Method instance);
    partial void InsertDB_Argument(DB_Argument instance);
    partial void UpdateDB_Argument(DB_Argument instance);
    partial void DeleteDB_Argument(DB_Argument instance);
    partial void InsertDB_ComplexTypeLink(DB_ComplexTypeLink instance);
    partial void UpdateDB_ComplexTypeLink(DB_ComplexTypeLink instance);
    partial void DeleteDB_ComplexTypeLink(DB_ComplexTypeLink instance);
    partial void InsertDB_LocalVariable(DB_LocalVariable instance);
    partial void UpdateDB_LocalVariable(DB_LocalVariable instance);
    partial void DeleteDB_LocalVariable(DB_LocalVariable instance);
    partial void InsertDB_Type(DB_Type instance);
    partial void UpdateDB_Type(DB_Type instance);
    partial void DeleteDB_Type(DB_Type instance);
    partial void InsertDB_StaticField(DB_StaticField instance);
    partial void UpdateDB_StaticField(DB_StaticField instance);
    partial void DeleteDB_StaticField(DB_StaticField instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::Kernel.Debug.Data.Properties.Settings.Default.DatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DB_ILOpInfo> DB_ILOpInfos
		{
			get
			{
				return this.GetTable<DB_ILOpInfo>();
			}
		}
		
		public System.Data.Linq.Table<DB_StringLiteral> DB_StringLiterals
		{
			get
			{
				return this.GetTable<DB_StringLiteral>();
			}
		}
		
		public System.Data.Linq.Table<DB_Method> DB_Methods
		{
			get
			{
				return this.GetTable<DB_Method>();
			}
		}
		
		public System.Data.Linq.Table<DB_Argument> DB_Arguments
		{
			get
			{
				return this.GetTable<DB_Argument>();
			}
		}
		
		public System.Data.Linq.Table<DB_ComplexTypeLink> DB_ComplexTypeLinks
		{
			get
			{
				return this.GetTable<DB_ComplexTypeLink>();
			}
		}
		
		public System.Data.Linq.Table<DB_LocalVariable> DB_LocalVariables
		{
			get
			{
				return this.GetTable<DB_LocalVariable>();
			}
		}
		
		public System.Data.Linq.Table<DB_Type> DB_Types
		{
			get
			{
				return this.GetTable<DB_Type>();
			}
		}
		
		public System.Data.Linq.Table<DB_StaticField> DB_StaticFields
		{
			get
			{
				return this.GetTable<DB_StaticField>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IlOpInfos")]
	public partial class DB_ILOpInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _MethodID;
		
		private int _Position;
		
		private int _NextPosition;
		
		private int _OpCode;
		
		private System.Data.Linq.Binary _ValueBytes;
		
		private int _CustomOpCode;
		
		private int _ASMStartPos;
		
		private int _ASMEndPos;
		
		private bool _ASMInsertLabel;
		
		private bool _IsDebugOp;
		
		private string _DebugOpMeta;
		
		private EntitySet<DB_StringLiteral> _DB_StringLiterals;
		
		private EntityRef<DB_Method> _DB_Method;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnMethodIDChanging(string value);
    partial void OnMethodIDChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnNextPositionChanging(int value);
    partial void OnNextPositionChanged();
    partial void OnOpCodeChanging(int value);
    partial void OnOpCodeChanged();
    partial void OnValueBytesChanging(System.Data.Linq.Binary value);
    partial void OnValueBytesChanged();
    partial void OnCustomOpCodeChanging(int value);
    partial void OnCustomOpCodeChanged();
    partial void OnASMStartPosChanging(int value);
    partial void OnASMStartPosChanged();
    partial void OnASMEndPosChanging(int value);
    partial void OnASMEndPosChanged();
    partial void OnASMInsertLabelChanging(bool value);
    partial void OnASMInsertLabelChanged();
    partial void OnIsDebugOpChanging(bool value);
    partial void OnIsDebugOpChanged();
    partial void OnDebugOpMetaChanging(string value);
    partial void OnDebugOpMetaChanged();
    #endregion
		
		public DB_ILOpInfo()
		{
			this._DB_StringLiterals = new EntitySet<DB_StringLiteral>(new Action<DB_StringLiteral>(this.attach_DB_StringLiterals), new Action<DB_StringLiteral>(this.detach_DB_StringLiterals));
			this._DB_Method = default(EntityRef<DB_Method>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MethodID", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string MethodID
		{
			get
			{
				return this._MethodID;
			}
			set
			{
				if ((this._MethodID != value))
				{
					if (this._DB_Method.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMethodIDChanging(value);
					this.SendPropertyChanging();
					this._MethodID = value;
					this.SendPropertyChanged("MethodID");
					this.OnMethodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextPosition", DbType="Int NOT NULL")]
		public int NextPosition
		{
			get
			{
				return this._NextPosition;
			}
			set
			{
				if ((this._NextPosition != value))
				{
					this.OnNextPositionChanging(value);
					this.SendPropertyChanging();
					this._NextPosition = value;
					this.SendPropertyChanged("NextPosition");
					this.OnNextPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpCode", DbType="Int NOT NULL")]
		public int OpCode
		{
			get
			{
				return this._OpCode;
			}
			set
			{
				if ((this._OpCode != value))
				{
					this.OnOpCodeChanging(value);
					this.SendPropertyChanging();
					this._OpCode = value;
					this.SendPropertyChanged("OpCode");
					this.OnOpCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueBytes", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ValueBytes
		{
			get
			{
				return this._ValueBytes;
			}
			set
			{
				if ((this._ValueBytes != value))
				{
					this.OnValueBytesChanging(value);
					this.SendPropertyChanging();
					this._ValueBytes = value;
					this.SendPropertyChanged("ValueBytes");
					this.OnValueBytesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomOpCode", DbType="Int NOT NULL")]
		public int CustomOpCode
		{
			get
			{
				return this._CustomOpCode;
			}
			set
			{
				if ((this._CustomOpCode != value))
				{
					this.OnCustomOpCodeChanging(value);
					this.SendPropertyChanging();
					this._CustomOpCode = value;
					this.SendPropertyChanged("CustomOpCode");
					this.OnCustomOpCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ASMStartPos", DbType="Int NOT NULL")]
		public int ASMStartPos
		{
			get
			{
				return this._ASMStartPos;
			}
			set
			{
				if ((this._ASMStartPos != value))
				{
					this.OnASMStartPosChanging(value);
					this.SendPropertyChanging();
					this._ASMStartPos = value;
					this.SendPropertyChanged("ASMStartPos");
					this.OnASMStartPosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ASMEndPos", DbType="Int NOT NULL")]
		public int ASMEndPos
		{
			get
			{
				return this._ASMEndPos;
			}
			set
			{
				if ((this._ASMEndPos != value))
				{
					this.OnASMEndPosChanging(value);
					this.SendPropertyChanging();
					this._ASMEndPos = value;
					this.SendPropertyChanged("ASMEndPos");
					this.OnASMEndPosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ASMInsertLabel", DbType="Bit NOT NULL")]
		public bool ASMInsertLabel
		{
			get
			{
				return this._ASMInsertLabel;
			}
			set
			{
				if ((this._ASMInsertLabel != value))
				{
					this.OnASMInsertLabelChanging(value);
					this.SendPropertyChanging();
					this._ASMInsertLabel = value;
					this.SendPropertyChanged("ASMInsertLabel");
					this.OnASMInsertLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDebugOp", DbType="Bit NOT NULL")]
		public bool IsDebugOp
		{
			get
			{
				return this._IsDebugOp;
			}
			set
			{
				if ((this._IsDebugOp != value))
				{
					this.OnIsDebugOpChanging(value);
					this.SendPropertyChanging();
					this._IsDebugOp = value;
					this.SendPropertyChanged("IsDebugOp");
					this.OnIsDebugOpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DebugOpMeta", DbType="NVarChar(500)")]
		public string DebugOpMeta
		{
			get
			{
				return this._DebugOpMeta;
			}
			set
			{
				if ((this._DebugOpMeta != value))
				{
					this.OnDebugOpMetaChanging(value);
					this.SendPropertyChanging();
					this._DebugOpMeta = value;
					this.SendPropertyChanged("DebugOpMeta");
					this.OnDebugOpMetaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_ILOpInfo_DB_StringLiteral", Storage="_DB_StringLiterals", ThisKey="Id", OtherKey="ILOpInfoID")]
		public EntitySet<DB_StringLiteral> DB_StringLiterals
		{
			get
			{
				return this._DB_StringLiterals;
			}
			set
			{
				this._DB_StringLiterals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Method_DB_ILOpInfo", Storage="_DB_Method", ThisKey="MethodID", OtherKey="Id", IsForeignKey=true)]
		public DB_Method DB_Method
		{
			get
			{
				return this._DB_Method.Entity;
			}
			set
			{
				DB_Method previousValue = this._DB_Method.Entity;
				if (((previousValue != value) 
							|| (this._DB_Method.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Method.Entity = null;
						previousValue.DB_ILOpInfos.Remove(this);
					}
					this._DB_Method.Entity = value;
					if ((value != null))
					{
						value.DB_ILOpInfos.Add(this);
						this._MethodID = value.Id;
					}
					else
					{
						this._MethodID = default(string);
					}
					this.SendPropertyChanged("DB_Method");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_StringLiterals(DB_StringLiteral entity)
		{
			this.SendPropertyChanging();
			entity.DB_ILOpInfo = this;
		}
		
		private void detach_DB_StringLiterals(DB_StringLiteral entity)
		{
			this.SendPropertyChanging();
			entity.DB_ILOpInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StringLiterals")]
	public partial class DB_StringLiteral : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Value;
		
		private System.Nullable<System.Guid> _ILOpInfoID;
		
		private EntityRef<DB_ILOpInfo> _DB_ILOpInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnILOpInfoIDChanging(System.Nullable<System.Guid> value);
    partial void OnILOpInfoIDChanged();
    #endregion
		
		public DB_StringLiteral()
		{
			this._DB_ILOpInfo = default(EntityRef<DB_ILOpInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(150) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ILOpInfoID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ILOpInfoID
		{
			get
			{
				return this._ILOpInfoID;
			}
			set
			{
				if ((this._ILOpInfoID != value))
				{
					if (this._DB_ILOpInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnILOpInfoIDChanging(value);
					this.SendPropertyChanging();
					this._ILOpInfoID = value;
					this.SendPropertyChanged("ILOpInfoID");
					this.OnILOpInfoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_ILOpInfo_DB_StringLiteral", Storage="_DB_ILOpInfo", ThisKey="ILOpInfoID", OtherKey="Id", IsForeignKey=true)]
		public DB_ILOpInfo DB_ILOpInfo
		{
			get
			{
				return this._DB_ILOpInfo.Entity;
			}
			set
			{
				DB_ILOpInfo previousValue = this._DB_ILOpInfo.Entity;
				if (((previousValue != value) 
							|| (this._DB_ILOpInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_ILOpInfo.Entity = null;
						previousValue.DB_StringLiterals.Remove(this);
					}
					this._DB_ILOpInfo.Entity = value;
					if ((value != null))
					{
						value.DB_StringLiterals.Add(this);
						this._ILOpInfoID = value.Id;
					}
					else
					{
						this._ILOpInfoID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("DB_ILOpInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Methods")]
	public partial class DB_Method : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _MethodSignature;
		
		private int _ASMStartPos;
		
		private int _ASMEndPos;
		
		private System.Nullable<bool> _Plugged;
		
		private EntitySet<DB_ILOpInfo> _DB_ILOpInfos;
		
		private EntitySet<DB_Argument> _DB_Arguments;
		
		private EntitySet<DB_LocalVariable> _LocalVariables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnMethodSignatureChanging(string value);
    partial void OnMethodSignatureChanged();
    partial void OnASMStartPosChanging(int value);
    partial void OnASMStartPosChanged();
    partial void OnASMEndPosChanging(int value);
    partial void OnASMEndPosChanged();
    partial void OnPluggedChanging(System.Nullable<bool> value);
    partial void OnPluggedChanged();
    #endregion
		
		public DB_Method()
		{
			this._DB_ILOpInfos = new EntitySet<DB_ILOpInfo>(new Action<DB_ILOpInfo>(this.attach_DB_ILOpInfos), new Action<DB_ILOpInfo>(this.detach_DB_ILOpInfos));
			this._DB_Arguments = new EntitySet<DB_Argument>(new Action<DB_Argument>(this.attach_DB_Arguments), new Action<DB_Argument>(this.detach_DB_Arguments));
			this._LocalVariables = new EntitySet<DB_LocalVariable>(new Action<DB_LocalVariable>(this.attach_LocalVariables), new Action<DB_LocalVariable>(this.detach_LocalVariables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(500) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MethodSignature", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string MethodSignature
		{
			get
			{
				return this._MethodSignature;
			}
			set
			{
				if ((this._MethodSignature != value))
				{
					this.OnMethodSignatureChanging(value);
					this.SendPropertyChanging();
					this._MethodSignature = value;
					this.SendPropertyChanged("MethodSignature");
					this.OnMethodSignatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ASMStartPos", DbType="Int NOT NULL")]
		public int ASMStartPos
		{
			get
			{
				return this._ASMStartPos;
			}
			set
			{
				if ((this._ASMStartPos != value))
				{
					this.OnASMStartPosChanging(value);
					this.SendPropertyChanging();
					this._ASMStartPos = value;
					this.SendPropertyChanged("ASMStartPos");
					this.OnASMStartPosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ASMEndPos", DbType="Int NOT NULL")]
		public int ASMEndPos
		{
			get
			{
				return this._ASMEndPos;
			}
			set
			{
				if ((this._ASMEndPos != value))
				{
					this.OnASMEndPosChanging(value);
					this.SendPropertyChanging();
					this._ASMEndPos = value;
					this.SendPropertyChanged("ASMEndPos");
					this.OnASMEndPosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Plugged", DbType="Bit")]
		public System.Nullable<bool> Plugged
		{
			get
			{
				return this._Plugged;
			}
			set
			{
				if ((this._Plugged != value))
				{
					this.OnPluggedChanging(value);
					this.SendPropertyChanging();
					this._Plugged = value;
					this.SendPropertyChanged("Plugged");
					this.OnPluggedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Method_DB_ILOpInfo", Storage="_DB_ILOpInfos", ThisKey="Id", OtherKey="MethodID")]
		public EntitySet<DB_ILOpInfo> DB_ILOpInfos
		{
			get
			{
				return this._DB_ILOpInfos;
			}
			set
			{
				this._DB_ILOpInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Method_DB_Argument", Storage="_DB_Arguments", ThisKey="Id", OtherKey="MethodID")]
		public EntitySet<DB_Argument> DB_Arguments
		{
			get
			{
				return this._DB_Arguments;
			}
			set
			{
				this._DB_Arguments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Method_DB_LocalVariable", Storage="_LocalVariables", ThisKey="Id", OtherKey="MethodID")]
		public EntitySet<DB_LocalVariable> DB_LocalVariables
		{
			get
			{
				return this._LocalVariables;
			}
			set
			{
				this._LocalVariables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_ILOpInfos(DB_ILOpInfo entity)
		{
			this.SendPropertyChanging();
			entity.DB_Method = this;
		}
		
		private void detach_DB_ILOpInfos(DB_ILOpInfo entity)
		{
			this.SendPropertyChanging();
			entity.DB_Method = null;
		}
		
		private void attach_DB_Arguments(DB_Argument entity)
		{
			this.SendPropertyChanging();
			entity.DB_Method = this;
		}
		
		private void detach_DB_Arguments(DB_Argument entity)
		{
			this.SendPropertyChanging();
			entity.DB_Method = null;
		}
		
		private void attach_LocalVariables(DB_LocalVariable entity)
		{
			this.SendPropertyChanging();
			entity.DB_Method = this;
		}
		
		private void detach_LocalVariables(DB_LocalVariable entity)
		{
			this.SendPropertyChanging();
			entity.DB_Method = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Arguments")]
	public partial class DB_Argument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _TypeID;
		
		private int _Index;
		
		private int _BytesSize;
		
		private string _MethodID;
		
		private bool _IsReturnArg;
		
		private EntityRef<DB_Method> _DB_Method;
		
		private EntityRef<DB_Type> _DB_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnTypeIDChanging(string value);
    partial void OnTypeIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnBytesSizeChanging(int value);
    partial void OnBytesSizeChanged();
    partial void OnMethodIDChanging(string value);
    partial void OnMethodIDChanged();
    partial void OnIsReturnArgChanging(bool value);
    partial void OnIsReturnArgChanged();
    #endregion
		
		public DB_Argument()
		{
			this._DB_Method = default(EntityRef<DB_Method>);
			this._DB_Type = default(EntityRef<DB_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._DB_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BytesSize", DbType="Int NOT NULL")]
		public int BytesSize
		{
			get
			{
				return this._BytesSize;
			}
			set
			{
				if ((this._BytesSize != value))
				{
					this.OnBytesSizeChanging(value);
					this.SendPropertyChanging();
					this._BytesSize = value;
					this.SendPropertyChanged("BytesSize");
					this.OnBytesSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MethodID", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string MethodID
		{
			get
			{
				return this._MethodID;
			}
			set
			{
				if ((this._MethodID != value))
				{
					if (this._DB_Method.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMethodIDChanging(value);
					this.SendPropertyChanging();
					this._MethodID = value;
					this.SendPropertyChanged("MethodID");
					this.OnMethodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsReturnArg", DbType="Bit NOT NULL")]
		public bool IsReturnArg
		{
			get
			{
				return this._IsReturnArg;
			}
			set
			{
				if ((this._IsReturnArg != value))
				{
					this.OnIsReturnArgChanging(value);
					this.SendPropertyChanging();
					this._IsReturnArg = value;
					this.SendPropertyChanged("IsReturnArg");
					this.OnIsReturnArgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Method_DB_Argument", Storage="_DB_Method", ThisKey="MethodID", OtherKey="Id", IsForeignKey=true)]
		public DB_Method DB_Method
		{
			get
			{
				return this._DB_Method.Entity;
			}
			set
			{
				DB_Method previousValue = this._DB_Method.Entity;
				if (((previousValue != value) 
							|| (this._DB_Method.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Method.Entity = null;
						previousValue.DB_Arguments.Remove(this);
					}
					this._DB_Method.Entity = value;
					if ((value != null))
					{
						value.DB_Arguments.Add(this);
						this._MethodID = value.Id;
					}
					else
					{
						this._MethodID = default(string);
					}
					this.SendPropertyChanged("DB_Method");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Type_DB_Argument", Storage="_DB_Type", ThisKey="TypeID", OtherKey="Id", IsForeignKey=true)]
		public DB_Type DB_Type
		{
			get
			{
				return this._DB_Type.Entity;
			}
			set
			{
				DB_Type previousValue = this._DB_Type.Entity;
				if (((previousValue != value) 
							|| (this._DB_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Type.Entity = null;
						previousValue.DB_Arguments.Remove(this);
					}
					this._DB_Type.Entity = value;
					if ((value != null))
					{
						value.DB_Arguments.Add(this);
						this._TypeID = value.Id;
					}
					else
					{
						this._TypeID = default(string);
					}
					this.SendPropertyChanged("DB_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ComplexTypeLinks")]
	public partial class DB_ComplexTypeLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _ParentTypeID;
		
		private string _ChildTypeID;
		
		private int _ParentIndex;
		
		private string _FieldId;
		
		private EntityRef<DB_Type> _Type;
		
		private EntityRef<DB_Type> _DB_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnParentTypeIDChanging(string value);
    partial void OnParentTypeIDChanged();
    partial void OnChildTypeIDChanging(string value);
    partial void OnChildTypeIDChanged();
    partial void OnParentIndexChanging(int value);
    partial void OnParentIndexChanged();
    partial void OnFieldIdChanging(string value);
    partial void OnFieldIdChanged();
    #endregion
		
		public DB_ComplexTypeLink()
		{
			this._Type = default(EntityRef<DB_Type>);
			this._DB_Type = default(EntityRef<DB_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentTypeID", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string ParentTypeID
		{
			get
			{
				return this._ParentTypeID;
			}
			set
			{
				if ((this._ParentTypeID != value))
				{
					if (this._DB_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ParentTypeID = value;
					this.SendPropertyChanged("ParentTypeID");
					this.OnParentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildTypeID", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string ChildTypeID
		{
			get
			{
				return this._ChildTypeID;
			}
			set
			{
				if ((this._ChildTypeID != value))
				{
					if (this._Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ChildTypeID = value;
					this.SendPropertyChanged("ChildTypeID");
					this.OnChildTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentIndex", DbType="Int NOT NULL")]
		public int ParentIndex
		{
			get
			{
				return this._ParentIndex;
			}
			set
			{
				if ((this._ParentIndex != value))
				{
					this.OnParentIndexChanging(value);
					this.SendPropertyChanging();
					this._ParentIndex = value;
					this.SendPropertyChanged("ParentIndex");
					this.OnParentIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", DbType="NVarChar(500)")]
		public string FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					this.OnFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FieldId = value;
					this.SendPropertyChanged("FieldId");
					this.OnFieldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Type_DB_ComplexTypeLink", Storage="_Type", ThisKey="ChildTypeID", OtherKey="Id", IsForeignKey=true)]
		public DB_Type ChildType
		{
			get
			{
				return this._Type.Entity;
			}
			set
			{
				DB_Type previousValue = this._Type.Entity;
				if (((previousValue != value) 
							|| (this._Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type.Entity = null;
						previousValue.ParentTypes.Remove(this);
					}
					this._Type.Entity = value;
					if ((value != null))
					{
						value.ParentTypes.Add(this);
						this._ChildTypeID = value.Id;
					}
					else
					{
						this._ChildTypeID = default(string);
					}
					this.SendPropertyChanged("ChildType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Type_DB_ComplexTypeLink1", Storage="_DB_Type", ThisKey="ParentTypeID", OtherKey="Id", IsForeignKey=true)]
		public DB_Type ParentType
		{
			get
			{
				return this._DB_Type.Entity;
			}
			set
			{
				DB_Type previousValue = this._DB_Type.Entity;
				if (((previousValue != value) 
							|| (this._DB_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Type.Entity = null;
						previousValue.ChildTypes.Remove(this);
					}
					this._DB_Type.Entity = value;
					if ((value != null))
					{
						value.ChildTypes.Add(this);
						this._ParentTypeID = value.Id;
					}
					else
					{
						this._ParentTypeID = default(string);
					}
					this.SendPropertyChanged("ParentType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocalVariables")]
	public partial class DB_LocalVariable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _TypeID;
		
		private int _Index;
		
		private int _BytesSize;
		
		private string _MethodID;
		
		private EntityRef<DB_Method> _DB_Method;
		
		private EntityRef<DB_Type> _DB_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnTypeIDChanging(string value);
    partial void OnTypeIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnBytesSizeChanging(int value);
    partial void OnBytesSizeChanged();
    partial void OnMethodIDChanging(string value);
    partial void OnMethodIDChanged();
    #endregion
		
		public DB_LocalVariable()
		{
			this._DB_Method = default(EntityRef<DB_Method>);
			this._DB_Type = default(EntityRef<DB_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._DB_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BytesSize", DbType="Int NOT NULL")]
		public int BytesSize
		{
			get
			{
				return this._BytesSize;
			}
			set
			{
				if ((this._BytesSize != value))
				{
					this.OnBytesSizeChanging(value);
					this.SendPropertyChanging();
					this._BytesSize = value;
					this.SendPropertyChanged("BytesSize");
					this.OnBytesSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MethodID", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string MethodID
		{
			get
			{
				return this._MethodID;
			}
			set
			{
				if ((this._MethodID != value))
				{
					if (this._DB_Method.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMethodIDChanging(value);
					this.SendPropertyChanging();
					this._MethodID = value;
					this.SendPropertyChanged("MethodID");
					this.OnMethodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Method_DB_LocalVariable", Storage="_DB_Method", ThisKey="MethodID", OtherKey="Id", IsForeignKey=true)]
		public DB_Method DB_Method
		{
			get
			{
				return this._DB_Method.Entity;
			}
			set
			{
				DB_Method previousValue = this._DB_Method.Entity;
				if (((previousValue != value) 
							|| (this._DB_Method.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Method.Entity = null;
						previousValue.DB_LocalVariables.Remove(this);
					}
					this._DB_Method.Entity = value;
					if ((value != null))
					{
						value.DB_LocalVariables.Add(this);
						this._MethodID = value.Id;
					}
					else
					{
						this._MethodID = default(string);
					}
					this.SendPropertyChanged("DB_Method");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Type_DB_LocalVariable", Storage="_DB_Type", ThisKey="TypeID", OtherKey="Id", IsForeignKey=true)]
		public DB_Type DB_Type
		{
			get
			{
				return this._DB_Type.Entity;
			}
			set
			{
				DB_Type previousValue = this._DB_Type.Entity;
				if (((previousValue != value) 
							|| (this._DB_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Type.Entity = null;
						previousValue.DB_LocalVariables.Remove(this);
					}
					this._DB_Type.Entity = value;
					if ((value != null))
					{
						value.DB_LocalVariables.Add(this);
						this._TypeID = value.Id;
					}
					else
					{
						this._TypeID = default(string);
					}
					this.SendPropertyChanged("DB_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Types")]
	public partial class DB_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Signature;
		
		private int _BytesSize;
		
		private int _StackBytesSize;
		
		private bool _IsValueType;
		
		private bool _IsPointerType;
		
		private string _BaseTypeId;
		
		private EntitySet<DB_Argument> _DB_Arguments;
		
		private EntitySet<DB_ComplexTypeLink> _DB_ComplexTypeLinks;
		
		private EntitySet<DB_ComplexTypeLink> _DB_ComplexTypeLinks1;
		
		private EntitySet<DB_LocalVariable> _LocalVariables;
		
		private EntitySet<DB_StaticField> _StaticFields;
		
		private EntitySet<DB_StaticField> _StaticFields1;
		
		private EntitySet<DB_Type> _InheritedTypes;
		
		private EntityRef<DB_Type> _BaseType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnSignatureChanging(string value);
    partial void OnSignatureChanged();
    partial void OnBytesSizeChanging(int value);
    partial void OnBytesSizeChanged();
    partial void OnStackBytesSizeChanging(int value);
    partial void OnStackBytesSizeChanged();
    partial void OnIsValueTypeChanging(bool value);
    partial void OnIsValueTypeChanged();
    partial void OnIsPointerTypeChanging(bool value);
    partial void OnIsPointerTypeChanged();
    partial void OnBaseTypeIdChanging(string value);
    partial void OnBaseTypeIdChanged();
    #endregion
		
		public DB_Type()
		{
			this._DB_Arguments = new EntitySet<DB_Argument>(new Action<DB_Argument>(this.attach_DB_Arguments), new Action<DB_Argument>(this.detach_DB_Arguments));
			this._DB_ComplexTypeLinks = new EntitySet<DB_ComplexTypeLink>(new Action<DB_ComplexTypeLink>(this.attach_DB_ComplexTypeLinks), new Action<DB_ComplexTypeLink>(this.detach_DB_ComplexTypeLinks));
			this._DB_ComplexTypeLinks1 = new EntitySet<DB_ComplexTypeLink>(new Action<DB_ComplexTypeLink>(this.attach_DB_ComplexTypeLinks1), new Action<DB_ComplexTypeLink>(this.detach_DB_ComplexTypeLinks1));
			this._LocalVariables = new EntitySet<DB_LocalVariable>(new Action<DB_LocalVariable>(this.attach_LocalVariables), new Action<DB_LocalVariable>(this.detach_LocalVariables));
			this._StaticFields = new EntitySet<DB_StaticField>(new Action<DB_StaticField>(this.attach_StaticFields), new Action<DB_StaticField>(this.detach_StaticFields));
			this._StaticFields1 = new EntitySet<DB_StaticField>(new Action<DB_StaticField>(this.attach_StaticFields1), new Action<DB_StaticField>(this.detach_StaticFields1));
			this._InheritedTypes = new EntitySet<DB_Type>(new Action<DB_Type>(this.attach_InheritedTypes), new Action<DB_Type>(this.detach_InheritedTypes));
			this._BaseType = default(EntityRef<DB_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(150) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Signature", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Signature
		{
			get
			{
				return this._Signature;
			}
			set
			{
				if ((this._Signature != value))
				{
					this.OnSignatureChanging(value);
					this.SendPropertyChanging();
					this._Signature = value;
					this.SendPropertyChanged("Signature");
					this.OnSignatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BytesSize", DbType="Int NOT NULL")]
		public int BytesSize
		{
			get
			{
				return this._BytesSize;
			}
			set
			{
				if ((this._BytesSize != value))
				{
					this.OnBytesSizeChanging(value);
					this.SendPropertyChanging();
					this._BytesSize = value;
					this.SendPropertyChanged("BytesSize");
					this.OnBytesSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StackBytesSize", DbType="Int NOT NULL")]
		public int StackBytesSize
		{
			get
			{
				return this._StackBytesSize;
			}
			set
			{
				if ((this._StackBytesSize != value))
				{
					this.OnStackBytesSizeChanging(value);
					this.SendPropertyChanging();
					this._StackBytesSize = value;
					this.SendPropertyChanged("StackBytesSize");
					this.OnStackBytesSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsValueType", DbType="Bit NOT NULL")]
		public bool IsValueType
		{
			get
			{
				return this._IsValueType;
			}
			set
			{
				if ((this._IsValueType != value))
				{
					this.OnIsValueTypeChanging(value);
					this.SendPropertyChanging();
					this._IsValueType = value;
					this.SendPropertyChanged("IsValueType");
					this.OnIsValueTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPointerType", DbType="Bit NOT NULL")]
		public bool IsPointerType
		{
			get
			{
				return this._IsPointerType;
			}
			set
			{
				if ((this._IsPointerType != value))
				{
					this.OnIsPointerTypeChanging(value);
					this.SendPropertyChanging();
					this._IsPointerType = value;
					this.SendPropertyChanged("IsPointerType");
					this.OnIsPointerTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseTypeId", DbType="NVarChar(150)")]
		public string BaseTypeId
		{
			get
			{
				return this._BaseTypeId;
			}
			set
			{
				if ((this._BaseTypeId != value))
				{
					if (this._BaseType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BaseTypeId = value;
					this.SendPropertyChanged("BaseTypeId");
					this.OnBaseTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Type_DB_Argument", Storage="_DB_Arguments", ThisKey="Id", OtherKey="TypeID")]
		public EntitySet<DB_Argument> DB_Arguments
		{
			get
			{
				return this._DB_Arguments;
			}
			set
			{
				this._DB_Arguments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Type_DB_ComplexTypeLink", Storage="_DB_ComplexTypeLinks", ThisKey="Id", OtherKey="ChildTypeID")]
		public EntitySet<DB_ComplexTypeLink> ParentTypes
		{
			get
			{
				return this._DB_ComplexTypeLinks;
			}
			set
			{
				this._DB_ComplexTypeLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Type_DB_ComplexTypeLink1", Storage="_DB_ComplexTypeLinks1", ThisKey="Id", OtherKey="ParentTypeID")]
		public EntitySet<DB_ComplexTypeLink> ChildTypes
		{
			get
			{
				return this._DB_ComplexTypeLinks1;
			}
			set
			{
				this._DB_ComplexTypeLinks1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Type_DB_LocalVariable", Storage="_LocalVariables", ThisKey="Id", OtherKey="TypeID")]
		public EntitySet<DB_LocalVariable> DB_LocalVariables
		{
			get
			{
				return this._LocalVariables;
			}
			set
			{
				this._LocalVariables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Type_DB_StaticField", Storage="_StaticFields", ThisKey="Id", OtherKey="TypeID")]
		public EntitySet<DB_StaticField> StaticFields
		{
			get
			{
				return this._StaticFields;
			}
			set
			{
				this._StaticFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Type_DB_StaticField1", Storage="_StaticFields1", ThisKey="Id", OtherKey="DeclaringTypeID")]
		public EntitySet<DB_StaticField> DB_StaticFields
		{
			get
			{
				return this._StaticFields1;
			}
			set
			{
				this._StaticFields1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Type_DB_Type", Storage="_InheritedTypes", ThisKey="Id", OtherKey="BaseTypeId")]
		public EntitySet<DB_Type> InheritedTypes
		{
			get
			{
				return this._InheritedTypes;
			}
			set
			{
				this._InheritedTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Type_DB_Type", Storage="_BaseType", ThisKey="BaseTypeId", OtherKey="Id", IsForeignKey=true)]
		public DB_Type BaseType
		{
			get
			{
				return this._BaseType.Entity;
			}
			set
			{
				DB_Type previousValue = this._BaseType.Entity;
				if (((previousValue != value) 
							|| (this._BaseType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseType.Entity = null;
						previousValue.InheritedTypes.Remove(this);
					}
					this._BaseType.Entity = value;
					if ((value != null))
					{
						value.InheritedTypes.Add(this);
						this._BaseTypeId = value.Id;
					}
					else
					{
						this._BaseTypeId = default(string);
					}
					this.SendPropertyChanged("BaseType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DB_Arguments(DB_Argument entity)
		{
			this.SendPropertyChanging();
			entity.DB_Type = this;
		}
		
		private void detach_DB_Arguments(DB_Argument entity)
		{
			this.SendPropertyChanging();
			entity.DB_Type = null;
		}
		
		private void attach_DB_ComplexTypeLinks(DB_ComplexTypeLink entity)
		{
			this.SendPropertyChanging();
			entity.ChildType = this;
		}
		
		private void detach_DB_ComplexTypeLinks(DB_ComplexTypeLink entity)
		{
			this.SendPropertyChanging();
			entity.ChildType = null;
		}
		
		private void attach_DB_ComplexTypeLinks1(DB_ComplexTypeLink entity)
		{
			this.SendPropertyChanging();
			entity.ParentType = this;
		}
		
		private void detach_DB_ComplexTypeLinks1(DB_ComplexTypeLink entity)
		{
			this.SendPropertyChanging();
			entity.ParentType = null;
		}
		
		private void attach_LocalVariables(DB_LocalVariable entity)
		{
			this.SendPropertyChanging();
			entity.DB_Type = this;
		}
		
		private void detach_LocalVariables(DB_LocalVariable entity)
		{
			this.SendPropertyChanging();
			entity.DB_Type = null;
		}
		
		private void attach_StaticFields(DB_StaticField entity)
		{
			this.SendPropertyChanging();
			entity.DB_Type = this;
		}
		
		private void detach_StaticFields(DB_StaticField entity)
		{
			this.SendPropertyChanging();
			entity.DB_Type = null;
		}
		
		private void attach_StaticFields1(DB_StaticField entity)
		{
			this.SendPropertyChanging();
			entity.DB_Type1 = this;
		}
		
		private void detach_StaticFields1(DB_StaticField entity)
		{
			this.SendPropertyChanging();
			entity.DB_Type1 = null;
		}
		
		private void attach_InheritedTypes(DB_Type entity)
		{
			this.SendPropertyChanging();
			entity.BaseType = this;
		}
		
		private void detach_InheritedTypes(DB_Type entity)
		{
			this.SendPropertyChanging();
			entity.BaseType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaticFields")]
	public partial class DB_StaticField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _TypeID;
		
		private string _DeclaringTypeID;
		
		private EntityRef<DB_Type> _DB_Type;
		
		private EntityRef<DB_Type> _DB_Type1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnTypeIDChanging(string value);
    partial void OnTypeIDChanged();
    partial void OnDeclaringTypeIDChanging(string value);
    partial void OnDeclaringTypeIDChanged();
    #endregion
		
		public DB_StaticField()
		{
			this._DB_Type = default(EntityRef<DB_Type>);
			this._DB_Type1 = default(EntityRef<DB_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(500) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._DB_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeclaringTypeID", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string DeclaringTypeID
		{
			get
			{
				return this._DeclaringTypeID;
			}
			set
			{
				if ((this._DeclaringTypeID != value))
				{
					if (this._DB_Type1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeclaringTypeIDChanging(value);
					this.SendPropertyChanging();
					this._DeclaringTypeID = value;
					this.SendPropertyChanged("DeclaringTypeID");
					this.OnDeclaringTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Type_DB_StaticField", Storage="_DB_Type", ThisKey="TypeID", OtherKey="Id", IsForeignKey=true)]
		public DB_Type DB_Type
		{
			get
			{
				return this._DB_Type.Entity;
			}
			set
			{
				DB_Type previousValue = this._DB_Type.Entity;
				if (((previousValue != value) 
							|| (this._DB_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Type.Entity = null;
						previousValue.StaticFields.Remove(this);
					}
					this._DB_Type.Entity = value;
					if ((value != null))
					{
						value.StaticFields.Add(this);
						this._TypeID = value.Id;
					}
					else
					{
						this._TypeID = default(string);
					}
					this.SendPropertyChanged("DB_Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DB_Type_DB_StaticField1", Storage="_DB_Type1", ThisKey="DeclaringTypeID", OtherKey="Id", IsForeignKey=true)]
		public DB_Type DB_Type1
		{
			get
			{
				return this._DB_Type1.Entity;
			}
			set
			{
				DB_Type previousValue = this._DB_Type1.Entity;
				if (((previousValue != value) 
							|| (this._DB_Type1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DB_Type1.Entity = null;
						previousValue.DB_StaticFields.Remove(this);
					}
					this._DB_Type1.Entity = value;
					if ((value != null))
					{
						value.DB_StaticFields.Add(this);
						this._DeclaringTypeID = value.Id;
					}
					else
					{
						this._DeclaringTypeID = default(string);
					}
					this.SendPropertyChanged("DB_Type1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
