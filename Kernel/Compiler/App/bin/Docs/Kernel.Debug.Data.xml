<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kernel.Debug.Data</name>
    </assembly>
    <members>
        <member name="T:Kernel.Debug.Data.DebugDatabase">
            <summary>
            Provides a set of managed methods to interface to the Fling OS debug database.
            <para>To Do's:</para>
            <list type="bullet">    
            <item>
            <term>To do</term>
            <description>
            Add an invisble caching mechanism.
            </description>
            </item>
            <item>
            <term>To do</term>
            <description>
            Extend the invisible caching mechanism to adds/removes
            to improve efficiency.
            </description>
            </item>
            <item>
            <term>To do</term>
            <description>
            Use InsertAllOnSubmit / DeleteAllOnSubmit with caching mechanism if 
            they are faster / more efficient.
            </description>
            </item>
            <item>
            <term>To do</term>
            <description>
            Create extra Add methods that take required fields as arguments to
            increase ease of coding elsewhere / reduce code duplication.
            </description>
            </item>
            </list>
            </summary>
            <remarks>
            <para>
            The output database has a fixed path. It is not any of the output databases in the output directories 
            of this project or any referenced projects.
            </para>
            <para>
            The data in the output database can be viewed directly in VS2013.
            </para>
            <para>Steps for viewing debug database entries in VS2013</para>
            <list type="number">
            <item>
            <term>Open the server explorer</term>
            <description>Open the server explorer by going to View -> Server Explorer</description>
            </item>
            <item>
            <term>Add Connection...</term>
            <description>Right click on Data Connections and choose "Add Connection..."</description>
            </item>
            <item>
            <term>Change the Data Source</term>
            <description>Change the Data Source to "Microsoft SQL Server Database File".</description>
            </item>
            <item>
            <term>Select the database file</term>
            <description>Browse for and select the debug database file.</description>
            </item>
            <item>
            <term>Done!</term>
            <description>Done! Browse the data in the database as normal.</description>
            </item>
            </list>
            <para>
            To modify the debug database structure (e.g. tables), add a connection
            (as above) to the Database.mdf file in this project. Then double click
            on any table to modify its structure and use the standard "Update table"
            features.
            </para>
            </remarks>
            <example>
            Adding a new entry to the Methods table. 
            Note: No data is submitted to the database until 
            <c>DebugDatabase.SubmitChanges()</c> is called.
            <code>
            DB_Method dbMethod = new DB_Method();
            dbMethod.Id = MethodID;
            dbMethod.MethodSignature = methodSignature;
            dbMethod.Plugged = false;
            dbMethod.ASMStartPos = -1;
            dbMethod.ASMEndPos = -1;
            DebugDatabase.AddMethod(dbMethod);
            </code>
            </example>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.Dispose">
            <summary>
            Submits changes and disposes of the underlying database connection.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.Empty">
            <summary>
            Empties all the database's tables.
            </summary>
            <remarks>
            This does call <see cref="M:Kernel.Debug.Data.DebugDatabase.SubmitChanges"/> meaning the database 
            is emptied immediately this method is called.
            <item><description>Add any new tables to this empty method.</description></item>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.SubmitChanges">
            <summary>
            Submits all changes to the database.
            </summary>
            <remarks>
            This must be called after all expected changes have been 
            set up except after calling <see cref="M:Kernel.Debug.Data.DebugDatabase.Empty"/>.
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.GetMethod(System.String)">
            <summary>
            Gets the specified method from the database.
            <para>To Do's:</para>
            <list type="bullet">        
            <item>
            <term>To do</term>
            <description>Caching mechanism.</description>
            </item>
            </list>
            </summary>
            <param name="aMethodID">The ID of the entry to get/</param>
            <returns>The database method if found. Otherwise null.</returns>
            <remarks>
            <para>
            This is an exception-safe method so if you try to request
            an ID that isn't in the database, it won't throw an exception.
            Instead it will return null.
            </para>
            <para>
            The return value of this method can be cached because the 
            debug database used is a static instance so exceptions will 
            not occur if you modify values etc.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.AddMethod(Kernel.Debug.Data.DB_Method)">
            <summary>
            Adds the pre-created method to the database. All the entries's
            required parameters (i.e. ones which cannot be null) should 
            be set.
            <para>To Do's:</para>
            <list type="bullet">        
            <item>
            <term>To do</term>
            <description>
            Add validation of fields and throw a pre-emptive exception if any 
            invalid or missing data is found.
            </description>
            </item>
            <item>
            <term>To do</term>
            <description>
            Check whether changes must be submitted before the 
            <see cref="M:Kernel.Debug.Data.DebugDatabase.GetMethod(System.String)"/> method can return methods added by Add.
            </description>
            </item>
            </list>
            </summary>
            <param name="aMethod">The method to add.</param>
            <remarks>
            <para>
            For the moment this method does no more than just directly add
            the method to the database.
            </para>
            <para>
            <see cref="M:Kernel.Debug.Data.DebugDatabase.SubmitChanges"/> must be called at some point after this
            method for changes to actually be submitted to the database.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.RemoveMethod(Kernel.Debug.Data.DB_Method)">
            <summary>
            Removes the specified method from the database.
            <para>To Do's:</para>
            <list type="bullet">        
            <item>
            <term>To do</term>
            <description>
            Check for entries in other tables that link to the one being 
            deleted. If the dependent entries are not being deleted, throw an 
            error.
            </description>
            </item>
            <item>
            <term>To do</term>
            <description>
            Add an option to automatically delete dependent entries.
            </description>
            </item>
            </list>
            </summary>
            <param name="aMethod">The method to remove.</param>
            <remarks>
            <para>
            For the moment this method does no more than just directly remove
            the method from the database.
            </para>
            <para>
            <see cref="M:Kernel.Debug.Data.DebugDatabase.SubmitChanges"/> must be called at some point after this
            method for changes to actually be submitted to the database.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.GetILOpInfo(System.Guid)">
            <summary>
            Gets the specified IL op info from the database.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.GetMethod(System.String)"/>'s to do's.</para>
            </summary>
            <param name="anILOpInfoID">The ID of the entry to get.</param>
            <returns>The database IL op info if found. Otherwise null.</returns>
            <remarks>
            <para>
            This is an exception-safe method so if you try to request
            an ID that isn't in the database, it won't throw an exception.
            Instead it will return null.
            </para>
            <para>
            The return value of this method can be cached because the 
            debug database used is a static instance so exceptions will 
            not occur if you modify values etc.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.AddILOpInfo(Kernel.Debug.Data.DB_ILOpInfo)">
            <summary>
            Adds the pre-created IL op info to the database. All the entries's
            required parameters (i.e. ones which cannot be null) should 
            be set.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.AddMethod(Kernel.Debug.Data.DB_Method)"/>'s to do's.</para>
            </summary>
            <param name="anILOpInfo">The entry to add.</param>
            <remarks>
            <para>
            For the moment this method does no more than just directly add
            the entry to the database.
            </para>
            <para>
            <see cref="M:Kernel.Debug.Data.DebugDatabase.SubmitChanges"/> must be called at some point after this
            method for changes to actually be submitted to the database.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.RemoveILOpInfo(Kernel.Debug.Data.DB_ILOpInfo)">
            <summary>
            Removes the specified IL op info from the database.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.RemoveMethod(Kernel.Debug.Data.DB_Method)"/>'s to do's.</para>
            </summary>
            <param name="anILOpInfo">The entry to remove.</param>
            <remarks>
            <para>
            For the moment this method does no more than just directly remove
            the entry from the database.
            </para>
            <para>
            <see cref="M:Kernel.Debug.Data.DebugDatabase.SubmitChanges"/> must be called at some point after this
            method for changes to actually be submitted to the database.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.GetStringLiteral(System.Guid)">
            <summary>
            Gets the specified string literal from the database.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.GetMethod(System.String)"/>'s to do's.</para>
            </summary>
            <param name="aStringLiteralID">The ID of the entry to get.</param>
            <returns>The database string literal if found. Otherwise null.</returns>
            <remarks>
            <para>
            This is an exception-safe method so if you try to request
            an ID that isn't in the database, it won't throw an exception.
            Instead it will return null.
            </para>
            <para>
            The return value of this method can be cached because the 
            debug database used is a static instance so exceptions will 
            not occur if you modify values etc.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.AddStringLiteral(Kernel.Debug.Data.DB_StringLiteral)">
            <summary>
            Adds the pre-created string literal to the database. All the entries's
            required parameters (i.e. ones which cannot be null) should 
            be set.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.AddMethod(Kernel.Debug.Data.DB_Method)"/>'s to do's.</para>
            </summary>
            <param name="aStringLiteral">The entry to add.</param>
            <remarks>
            <para>
            For the moment this method does no more than just directly add
            the entry to the database.
            </para>
            <para>
            <see cref="M:Kernel.Debug.Data.DebugDatabase.SubmitChanges"/> must be called at some point after this
            method for changes to actually be submitted to the database.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.RemoveStringLiteral(Kernel.Debug.Data.DB_StringLiteral)">
            <summary>
            Removes the specified string literal from the database.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.RemoveMethod(Kernel.Debug.Data.DB_Method)"/>'s to do's.</para>
            </summary>
            <param name="aStringLiteral">The entry to remove.</param>
            <remarks>
            <para>
            For the moment this method does no more than just directly remove
            the entry from the database.
            </para>
            <para>
            <see cref="M:Kernel.Debug.Data.DebugDatabase.SubmitChanges"/> must be called at some point after this
            method for changes to actually be submitted to the database.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.GetStaticField(System.String)">
            <summary>
            Gets the specified static field from the database.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.GetMethod(System.String)"/>'s to do's.</para>
            </summary>
            <param name="aStaticFieldID">The ID of the entry to get.</param>
            <returns>The database static field if found. Otherwise null.</returns>
            <remarks>
            <para>
            This is an exception-safe method so if you try to request
            an ID that isn't in the database, it won't throw an exception.
            Instead it will return null.
            </para>
            <para>
            The return value of this method can be cached because the 
            debug database used is a static instance so exceptions will 
            not occur if you modify values etc.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.AddStaticField(Kernel.Debug.Data.DB_StaticField)">
            <summary>
            Adds the pre-created static field to the database. All the entries's
            required parameters (i.e. ones which cannot be null) should 
            be set.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.AddMethod(Kernel.Debug.Data.DB_Method)"/>'s to do's.</para>
            </summary>
            <param name="aStaticField">The entry to add.</param>
            <remarks>
            <para>
            For the moment this method does no more than just directly add
            the entry to the database.
            </para>
            <para>
            <see cref="M:Kernel.Debug.Data.DebugDatabase.SubmitChanges"/> must be called at some point after this
            method for changes to actually be submitted to the database.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.RemoveStaticField(Kernel.Debug.Data.DB_StaticField)">
            <summary>
            Removes the specified static field from the database.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.RemoveMethod(Kernel.Debug.Data.DB_Method)"/>'s to do's.</para>
            </summary>
            <param name="aStaticField">The entry to remove.</param>
            <remarks>
            <para>
            For the moment this method does no more than just directly remove
            the entry from the database.
            </para>
            <para>
            <see cref="M:Kernel.Debug.Data.DebugDatabase.SubmitChanges"/> must be called at some point after this
            method for changes to actually be submitted to the database.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.GetLocalVariable(System.Guid)">
            <summary>
            Gets the specified local variable from the database.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.GetMethod(System.String)"/>'s to do's.</para>
            </summary>
            <param name="aLocalVariableID">The ID of the entry to get.</param>
            <returns>The database local variable if found. Otherwise null.</returns>
            <remarks>
            <para>
            This is an exception-safe method so if you try to request
            an ID that isn't in the database, it won't throw an exception.
            Instead it will return null.
            </para>
            <para>
            The return value of this method can be cached because the 
            debug database used is a static instance so exceptions will 
            not occur if you modify values etc.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.AddLocalVariable(Kernel.Debug.Data.DB_LocalVariable)">
            <summary>
            Adds the pre-created local variable to the database. All the entries's
            required parameters (i.e. ones which cannot be null) should 
            be set.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.AddMethod(Kernel.Debug.Data.DB_Method)"/>'s to do's.</para>
            </summary>
            <param name="aLocalVariable">The entry to add.</param>
            <remarks>
            <para>
            For the moment this method does no more than just directly add
            the entry to the database.
            </para>
            <para>
            <see cref="M:Kernel.Debug.Data.DebugDatabase.SubmitChanges"/> must be called at some point after this
            method for changes to actually be submitted to the database.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.RemoveLocalVariable(Kernel.Debug.Data.DB_LocalVariable)">
            <summary>
            Removes the specified local variable from the database.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.RemoveMethod(Kernel.Debug.Data.DB_Method)"/>'s to do's.</para>
            </summary>
            <param name="aLocalVariable">The entry to remove.</param>
            <remarks>
            <para>
            For the moment this method does no more than just directly remove
            the entry from the database.
            </para>
            <para>
            <see cref="M:Kernel.Debug.Data.DebugDatabase.SubmitChanges"/> must be called at some point after this
            method for changes to actually be submitted to the database.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.GetArgument(System.Guid)">
            <summary>
            Gets the specified argument from the database.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.GetMethod(System.String)"/>'s to do's.</para>
            </summary>
            <param name="aArgumentID">The ID of the entry to get.</param>
            <returns>The database argument if found. Otherwise null.</returns>
            <remarks>
            <para>
            This is an exception-safe method so if you try to request
            an ID that isn't in the database, it won't throw an exception.
            Instead it will return null.
            </para>
            <para>
            The return value of this method can be cached because the 
            debug database used is a static instance so exceptions will 
            not occur if you modify values etc.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.AddArgument(Kernel.Debug.Data.DB_Argument)">
            <summary>
            Adds the pre-created argument to the database. All the entries's
            required parameters (i.e. ones which cannot be null) should 
            be set.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.AddMethod(Kernel.Debug.Data.DB_Method)"/>'s to do's.</para>
            </summary>
            <param name="aArgument">The entry to add.</param>
            <remarks>
            <para>
            For the moment this method does no more than just directly add
            the entry to the database.
            </para>
            <para>
            <see cref="M:Kernel.Debug.Data.DebugDatabase.SubmitChanges"/> must be called at some point after this
            method for changes to actually be submitted to the database.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.RemoveArgument(Kernel.Debug.Data.DB_Argument)">
            <summary>
            Removes the specified argument from the database.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.RemoveMethod(Kernel.Debug.Data.DB_Method)"/>'s to do's.</para>
            </summary>
            <param name="aArgument">The entry to remove.</param>
            <remarks>
            <para>
            For the moment this method does no more than just directly remove
            the entry from the database.
            </para>
            <para>
            <see cref="M:Kernel.Debug.Data.DebugDatabase.SubmitChanges"/> must be called at some point after this
            method for changes to actually be submitted to the database.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.GetComplexTypeLink(System.Guid)">
            <summary>
            Gets the specified complex type link from the database.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.GetMethod(System.String)"/>'s to do's.</para>
            </summary>
            <param name="aComplexTypeLinkID">The ID of the entry to get.</param>
            <returns>The database complex type link if found. Otherwise null.</returns>
            <remarks>
            <para>
            This is an exception-safe method so if you try to request
            an ID that isn't in the database, it won't throw an exception.
            Instead it will return null.
            </para>
            <para>
            The return value of this method can be cached because the 
            debug database used is a static instance so exceptions will 
            not occur if you modify values etc.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.AddComplexTypeLink(Kernel.Debug.Data.DB_ComplexTypeLink)">
            <summary>
            Adds the pre-created complex type link to the database. All the entries's
            required parameters (i.e. ones which cannot be null) should 
            be set.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.AddMethod(Kernel.Debug.Data.DB_Method)"/>'s to do's.</para>
            </summary>
            <param name="aComplexTypeLink">The entry to add.</param>
            <remarks>
            <para>
            For the moment this method does no more than just directly add
            the entry to the database.
            </para>
            <para>
            <see cref="M:Kernel.Debug.Data.DebugDatabase.SubmitChanges"/> must be called at some point after this
            method for changes to actually be submitted to the database.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.RemoveComplexTypeLink(Kernel.Debug.Data.DB_ComplexTypeLink)">
            <summary>
            Removes the specified complex type link from the database.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.RemoveMethod(Kernel.Debug.Data.DB_Method)"/>'s to do's.</para>
            </summary>
            <param name="aComplexTypeLink">The entry to remove.</param>
            <remarks>
            <para>
            For the moment this method does no more than just directly remove
            the entry from the database.
            </para>
            <para>
            <see cref="M:Kernel.Debug.Data.DebugDatabase.SubmitChanges"/> must be called at some point after this
            method for changes to actually be submitted to the database.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.GetType(System.Guid)">
            <summary>
            Gets the specified type from the database.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.GetMethod(System.String)"/>'s to do's.</para>
            </summary>
            <param name="aTypeID">The ID of the entry to get.</param>
            <returns>The database type if found. Otherwise null.</returns>
            <remarks>
            <para>
            This is an exception-safe method so if you try to request
            an ID that isn't in the database, it won't throw an exception.
            Instead it will return null.
            </para>
            <para>
            The return value of this method can be cached because the 
            debug database used is a static instance so exceptions will 
            not occur if you modify values etc.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.GetType(System.String)">
            <summary>
            Gets the specified type from the database.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.GetMethod(System.String)"/>'s to do's.</para>
            </summary>
            <param name="Signature">The signature of the entry to get.</param>
            <returns>The database type if found. Otherwise null.</returns>
            <remarks>
            <para>
            This is an exception-safe method so if you try to request
            an ID that isn't in the database, it won't throw an exception.
            Instead it will return null.
            </para>
            <para>
            The return value of this method can be cached because the 
            debug database used is a static instance so exceptions will 
            not occur if you modify values etc.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.AddType(Kernel.Debug.Data.DB_Type)">
            <summary>
            Adds the pre-created type to the database. All the entries's
            required parameters (i.e. ones which cannot be null) should 
            be set.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.AddMethod(Kernel.Debug.Data.DB_Method)"/>'s to do's.</para>
            </summary>
            <param name="aType">The entry to add.</param>
            <remarks>
            <para>
            For the moment this method does no more than just directly add
            the entry to the database.
            </para>
            <para>
            <see cref="M:Kernel.Debug.Data.DebugDatabase.SubmitChanges"/> must be called at some point after this
            method for changes to actually be submitted to the database.
            </para>
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.DebugDatabase.RemoveType(Kernel.Debug.Data.DB_Type)">
            <summary>
            Removes the specified type from the database.
            <para>To Do's: See <see cref="M:Kernel.Debug.Data.DebugDatabase.RemoveMethod(Kernel.Debug.Data.DB_Method)"/>'s to do's.</para>
            </summary>
            <param name="aType">The entry to remove.</param>
            <remarks>
            <para>
            For the moment this method does no more than just directly remove
            the entry from the database.
            </para>
            <para>
            <see cref="M:Kernel.Debug.Data.DebugDatabase.SubmitChanges"/> must be called at some point after this
            method for changes to actually be submitted to the database.
            </para>
            </remarks>
        </member>
        <member name="P:Kernel.Debug.Data.DebugDatabase.DB">
            <summary>
            The underlying data context (generated by the VS designer)
            used to access the local Debug Database.
            </summary>
            <remarks>
            Not to be accessed externally. All tasks should have a static method
            on this class to wrap it. This will allow extended management / 
            optimisation in future.
            </remarks>
        </member>
        <member name="T:Kernel.Debug.Data.ElfMap">
            <summary>
            Used to access data from the .map file generated by Cygwin\ObjDump.exe
            </summary>
        </member>
        <member name="F:Kernel.Debug.Data.ElfMap.minAddress">
            <summary>
            The minimum loaded address. Used in nearest label searching to reduce search time.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Data.ElfMap.Map">
            <summary>
            The underlying map dictionary that maps addresses to labels
            </summary>
        </member>
        <member name="M:Kernel.Debug.Data.ElfMap.#ctor(System.String)">
            <summary>
            Initialises a new elf map and opens the specified map file.
            </summary>
            <param name="mapFileName">The map file to open.</param>
        </member>
        <member name="M:Kernel.Debug.Data.ElfMap.ReadFile(System.String)">
            <summary>
            Reads the specified file as an elf map file.
            </summary>
            <param name="fileName">The file to read.</param>
        </member>
        <member name="M:Kernel.Debug.Data.ElfMap.ContainsExactAddress(System.UInt64)">
            <summary>
            Determines whether the map contains exactly the specified address
            </summary>
            <param name="address">The address to look for.</param>
            <returns>Whether the map contains exactly the specified address or not.</returns>
        </member>
        <member name="M:Kernel.Debug.Data.ElfMap.GetNearestLabels(System.UInt64)">
            <summary>
            Gets the labels that are at or the nearest before the specified address.
            </summary>
            <param name="address">The address to get the nearest labels for.</param>
            <returns>The nearest labels.</returns>
            <remarks>
            Multiple labels per a given address can mean more than 1 label returned.
            </remarks>
        </member>
        <member name="M:Kernel.Debug.Data.ElfMap.GetAddress(System.String)">
            <summary>
            gets the address of the specified label or returns UInt.MaxValue 
            if label not found.
            </summary>
            <param name="label">The label to get the address of.</param>
            <returns>The address of the label.</returns>
        </member>
        <member name="T:Kernel.Debug.Data.PDBDumpReader">
            <summary>
            Used to read data from a PDB dump file.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Data.PDBDumpReader.SectionsData">
            <summary>
            All the data from the various sections of the PDB dump file.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Data.PDBDumpReader.Symbols">
            <summary>
            All the symbols loaded from the PDB dump.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Data.PDBDumpReader.#ctor(System.String)">
            <summary>
            Initialises a new PDM dump reader and reads the specified dump file.
            </summary>
            <param name="aDumpPath">The dump file to read.</param>
        </member>
        <member name="M:Kernel.Debug.Data.PDBDumpReader.Read(System.String)">
            <summary>
            Reads the specified dump file.
            </summary>
            <param name="aDumpPath">The dump file to read.</param>
        </member>
        <member name="T:Kernel.Debug.Data.PDB_SymbolInfo">
            <summary>
            Represents a symbol loaded from a PDB dump.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Data.PDB_SymbolInfo.Methods">
            <summary>
            The methods within the symbol.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Data.PDB_SymbolInfo.#ctor">
            <summary>
            Creates a new, empty symbol info.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Data.PDB_SymbolInfo.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Creates a new symbol info and loads method infos from the specified
            lines of text.
            </summary>
            <param name="symbolText">The lines of symbol text to parse.</param>
        </member>
        <member name="T:Kernel.Debug.Data.PDB_MethodInfo">
            <summary>
            Represents method info loaded from a PDB dump.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Data.PDB_MethodInfo.Lines">
            <summary>
            The lines within this method.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Data.PDB_MethodInfo.SourceFilePath">
            <summary>
            The path to the C# source file for the method.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Data.PDB_MethodInfo.FunctionName">
            <summary>
            The name of the function in C#.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Data.PDB_MethodInfo.DumpStartAddress">
            <summary>
            Dump start address - an internel number used by dump reader.
            Never sure where it comes from / how it's generated, but
            we use it for linking up bits of the PDB dump.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Data.PDB_MethodInfo.ParseLines(System.Collections.Generic.List{System.String})">
            <summary>
            Parses the specified lines of text for method line info.
            </summary>
            <param name="linesText">The lines of text to parse.</param>
        </member>
        <member name="F:Kernel.Debug.Data.PDB_MethodInfo.cachedCS">
            <summary>
            The cached C# code text - stops us doing endless file reads etc.
            </summary>
        </member>
        <member name="M:Kernel.Debug.Data.PDB_MethodInfo.GetCS">
            <summary>
            Gets the C# code (text) for the method. Used by debugger for 
            display to developer.
            </summary>
            <returns>The C# code (text) or a string with an error message starting "Error loading C#!".</returns>
        </member>
        <member name="T:Kernel.Debug.Data.PDB_LineInfo">
            <summary>
            Represents line info loaded from a PDB dump.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Data.PDB_LineInfo.ILStartNum">
            <summary>
            The IL (byte offset) number the line starts at.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Data.PDB_LineInfo.ILEndNum">
            <summary>
            The IL (byte offset) number the line ends at.
            </summary>
        </member>
        <member name="F:Kernel.Debug.Data.PDB_LineInfo.CSLineNum">
            <summary>
            The C# line number the line is on.
            </summary>
        </member>
    </members>
</doc>
