#region LICENSE
// ---------------------------------- LICENSE ---------------------------------- //
//
//    Fling OS - The educational operating system
//    Copyright (C) 2015 Edward Nutting
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//  Project owner: 
//		Email: edwardnutting@outlook.com
//		For paper mail address, please contact via email for details.
//
// ------------------------------------------------------------------------------ //
#endregion
    
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Reflection;
using System.Reflection.Emit;

namespace Kernel.Compiler
{
    /// <summary>
    /// Represents an individual IL op.
    /// </summary>
    public class ILOpInfo
    {
        /// <summary>
        /// The OpCode (from System.Reflection.Emit) for this IL op.
        /// Note: opCode.Value == IlOps.ILOp.OpCodes - they can be used interchangeably.
        /// </summary>
        public OpCode opCode;
        /// <summary>
        /// The position of this IL op in its method.
        /// </summary>
        public int Position;
        /// <summary>
        /// The position of the next IL op in the same method. (-1 if none)
        /// </summary>
        public int NextPosition;
        /// <summary>
        /// The value bytes loaded with this IL op (which, for example, are used to specify string values.)
        /// </summary>
        public byte[] ValueBytes;
        /// <summary>
        /// When the IL op is a Call, this field holds the value of the method base to call. It should be used
        /// in preference to getting the method base from the metadata token in the ValueBytes.
        ///
        /// When the IL op is a Ldftn, this field holds the value of the method base to load. It should be used
        /// in preference to getting the method base from the metadata token in the ValueBytes.
        /// </summary>
        /// <remarks>
        /// This field was added so that ILOpInfos could be generated by the compiler without them originating
        /// from IL code. This field will either contain a manually-set method base (in which case ValueBytes 
        /// will be null) or it will contain the method base obtained from the metadata token in ValueBytes.
        /// </remarks>
        public MethodBase MethodToCall;
        /// <summary>
        /// Whether to set the MethodToCall to the kernel's GC Decrement Ref Count method.
        /// </summary>
        /// <remarks>
        /// Used by ILReader as an instruction to ILScanner.
        /// </remarks>
        public bool SetToGCDecRefCountMethod = false;
        /// <summary>
        /// The offset (in IL bytes) to load the method token at.
        /// </summary>
        /// <remarks>
        /// Used by exception handling to load catch / finally 
        /// handler addresses using LdToken IL op.
        /// </remarks>
        public int LoadAtILOffset;

        /// <summary>
        /// The ASM (text) index where the ASM for this ILOp starts.
        /// </summary>
        public int ASMStartPos = -1;
        /// <summary>
        /// The ASM (text) index where the ASM for this ILOp ends.
        /// </summary>
        public int ASMEndPos = -1;
        ///// <summary>
        ///// Whether the ILScanner should insert a label for this ILOp.
        ///// </summary>
        //public bool ASMInsertLabel = false;

        /// <summary>
        /// The debug database record asscoiated with this IL op.
        /// </summary>
        public Debug.Data.DB_ILOpInfo DBILOpInfo;

        /// <summary>
        /// Indicates whether the IL Op is a debug op. 
        /// </summary>
        /// <example>
        /// Nops with IsDebugNop set to true should be outputted
        /// as a debug interrupt e.g. Int3 on x86 architecture
        /// </example>
        public bool IsDebugOp = false;
    }
}
