<?xml version="1.0" encoding="utf-8"?>
<topic id="f62a6762-25f2-49ea-a6cb-18267dbaf9b2" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    
    <introduction>
      <autoOutline>20</autoOutline>
    </introduction>
    
    
    <!--
    	
    	Structure:
    		- Introduction
    			- Scope of this article
    			- How this article is structured
    			- [Section titles]
    		- What is debugging?
    			- Definition
    			- Explanation
    		- Types of debugging
    			- Definitions
    			- Recommendations
    		- Virtual machines / emulators
    			- VMWare
    			- Virtual box
    			- Qemu
    		- Debugging by thinking
    		- Debugging by output
    			- General
    			- Recommended styles
    			- Screen
    			- Log file
    			- Making use of Halt op
    		- Debugging by interrupting
    			- Break instruction
    				- General idea
    				- x86 Int3 - See later
    			- Registers
    			- Stack
    			- Memory
    			- Symbols
    			- Virtual Machines (use serial port)
    			- Real hardware
    			- GUIs
    				- GDB and alternatives
    				- Write your own
    				- IDE integration
    		- Required debugging tools
    			- Text-based output
    			- Code-line-specific failure output
    		- Useful debugging tools
    			- Interrupting debugger
    			- Integration with development environment
    			- Register, memory and stack output
    		- Unnessescary debugging tools
    			- Edit and continue
    			- Anything which takes you far too long to program
    		- x86 Debugging
    			- Disassembly : Thought debugging
    			- VGA Text-Mode Video : Output Debugging
    			- Int3 & Int1 : Interrupt debugging
    		- Tips 'n' Tricks
    		- Tutorials
    		- Further Reading
    		- References
    		
    -->
    
    
    <!-- - - - - - - - - - - - - - - - -  Introduction  - - - - - - - - - - - - - - - - -->
    <!--
    
    	Scope of this article
    		This article looks at a variety of common techniques used in both general and OS-specific debugging. It also
    		offers explanation of how basic debugging works and some suggestions and recommendations for your own
    		approach. 
    	
    	How this article is structured
    		This article is structured into separate sections for the different types of debugging followed by sections for
    		related, practical information.
    		
    	[Section titles]
    		
    -->
    
    <!-- - - - - - - - - - - - - - - - -  What is debugging?  - - - - - - - - - - - - - - - - -->
    <!--
    
    	Definition
    		
    		
    	Explanation
    		
    		
    -->
    
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>Optional section title</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>Add one or more sections with content</para>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>