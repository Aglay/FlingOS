<?xml version="1.0" encoding="utf-8"?>
<topic id="d5b852b6-ab5a-416e-8aa6-bf3dfae2a240" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <autoOutline>20</autoOutline>
    </introduction>
    
    <section address="Introduction">
      <title>Introduction</title>
      <sections>
          <section address="Introduction_ScopeOfThisArticle">
              <title>Scope of this article</title>
              <content>
                  <para>
                    This article covers disk devices in general with brief overviews of common disk devices. The overviews provide
                    sufficient information for you to understand the differences between the specific types of disk device and 
                    thus to decide what to learn more about. Links to further reading about a specific type of disk device are 
                    provided after the relevant overview.
                  </para>
                  <para>
                    This article also covers abstract disk devices (as Fling OS describes them) such as partitions. While it is not
                    apparently obvious that a data storage system is a disk device, upon inspection it is clear why treating a
                    partition as a disk device is not only useful, but also creates a clean code structure. This is discussed more
                    further on.
                  </para>
              </content>
          </section>
          <section address="Introduction_HowThisArticleIsStructured">
              <title>How this article is structured</title>
              <content>
                  <para>
                    The article is structured into a section of general description followed by sections for the specific types of
                    disk device. Each device-type specific section consists of an overview followed by links to further reading.
                    The majority of the further reading links point to more detailed articles on this site which not only describe
                    and explain in more detail, but also provide code samples and practical tips. The article finishes with a few
                    recommendations for your own code structure.
                  </para>
              </content>
          </section>
      </sections>
    </section>
    
    
    <section address="WhatAreDiskDevices">
      <title>What are disk devices?</title>
      <sections>
          <section address="WhatAreDiskDevices_GenericDefinition">
              <title>Generic definition</title>
              <content>
                  <para>
                    As a very broad and generic definition, a modern disk device is any device which stores data. This includes
                    hard disk drives, flash memory (e.g. USB sticks) and perhaps we can even include modern cloud storage. 
                    Essentially anything which is accessed as though data is stored permanently and in some form of byte order.
                    It is important to note that for a disk device we need raw byte (or block) level access to the storage medium
                    not just file-level access. However, we could treat a raw binary file as a disk device.
                  </para>
              </content>
          </section>
          <section address="WhatAreDiskDevices_HistoricalNaming">
              <title>Historical naming</title>
              <content>
                  <para>
                    The name "disk device" comes from the fact that the original storage mediums (post magnetic-tape era) were 
                    magnetic disks and/or compact discs (CDs). This meant they got know by their commonality - the fact that 
                    they used discs.
                  </para>
                  <para>
                    The name "disk device" is now historical given the new forms of storage available (e.g. flash memory,
                    solid-state storage devices). However, many storage devices still use discs (HDD, CDs, DVDs) so the name is
                    still relevant. 
                  </para>
              </content>
          </section>
          <section address="WhatAreDiskDevices_ModernDevelopmentsInStorage">
              <title>Modern developments in storage</title>
              <content>
                  <para>
                    Modern developments in storage have blurred what can be thought of as a disc device. For instance, SSDs don't
                    store data anything like a disc does, but we still refer to it as a disc device because, from an OS perspective,
                    it still has all the same properties of a normal hard disk drive (excluding complex things like spin-up time).
                  </para>
                  <para>
                    Other developments include multi-level partitioning schemes and cloud storage. Both of these abstract the "disk 
                    device" that the OS interacts with away from the physical device. For instance, cloud storage can be used to 
                    store one large binary file which the computer simply treats as though it were a large hard disc.
                  </para>
                  <para>
                    For the sake of simplicity (and because it is mostly unnecessary to complicate things), we simply refer to most
                    modern storage technology as disk devices and, so far as possible, treat it as such. This allows easy abstraction
                    into file systems which hide the everyday developer from the physical differences between mediums.
                  </para>
                  <para>
                    The main issue that affects users when it comes to different types of disk device is ejection / disconnection.
                    For instance, cloud storage can become disconnected or, as another example, USB sticks need ejecting before 
                    being pulled out. This results in a level of roughness for the user as they must consciously consider which
                    type of device they use for what. 
                  </para>
                  <para>
                    Modern OSes such as Chrome OS have tried to make progress in this area by offering services such as a local 
                    cache that later uploads to cloud storage when the user has a stable connection. USB mass storage devices 
                    are also built with flush commands which, if utilised properly, can mitigate the risk of unejected disconnection.
                  </para>
              </content>
          </section>
          <section address="WhatAreDiskDevices_CommonTypesOfDiskDevice">
              <title>Common types of disk device</title>
              <content>
                  <para>
                    There are several common types of disk device which a hobby OS developer is likely to come across and need or want
                    to support. These are:
                  </para>
                  <list class="ordered">
                    <listItem>
                      <para>
                        Hard disks (ATA, IDE, SATA, RAID) - Fling OS, and consequently this documentation, currently only supports ATA.
                      </para>
                    </listItem>
                    <listItem>
                      <para>
                        Partitions (MBR-, EBR-, GPT-based) - These are an abstract form of disc device, all of which are supported
                                                    by Fling OS and are discussed later.
                      </para>
                    </listItem>
                    <listItem>
                      <para>
                        USB Mass Storage Devices - For example USB Flash Memory Sticks, USB External Hard Drives. These are 
                                          discussed in significantly greater detail in the USB reference articles.
                                          Fling OS currently supports only USB 2.0 MSDs that support SCSI Over USB 
                                          commands.
                      </para>
                    </listItem>
                  </list>
              </content>
          </section>
      </sections>
    </section>
    
    
    <section address="ATADevices">
      <title>ATA devices</title>
      <sections>
          <section address="ATADevices_Overview">
              <title>Overview</title>
              <content>
                  <para>
                    ATA (AT Attachment) devices (or derivatives) are probably the second most common type of storage device 
                    now in existence (the first being Flash memory). ATA was the major standard (still supported today) by computers
                    the world over for reading and writing to hard disk drives. Nowadays ATA has largely been replaced by SATA or 
                    RAID systems. However, most SATA devices still support ATA and most PCs still contain the ATA controller hardware
                    required. (For the sake of simplicity, this article will ignore the term IDE. IDE is discussed more in
                    the detailed article on ATA.)
                  </para>
                  <para>
                    ATA is the easiest way for a hobby OS developer to access the main hard disk drive (and CD drive if present) in a
                    PC. Getting ATA working is often one of the first things to do so you can begin reading in more OS code and setting
                    up processes.
                  </para>
              </content>
          </section>
          <section address="ATADevices_FurtherReading">
              <title>Further reading</title>
              <content>
                  <para>
                    ATA, ATAPio and IDE are discussed in more detail in the <link xlink:href="c3ceab20-c685-4be3-8ad3-42bb04ac445c">main ATA article</link> in the Disk Devices section.
                  </para>
              </content>
          </section>
      </sections>
    </section>
    
    
    <section address="USBDevices">
      <title>USB devices</title>
      <sections>
          <section address="USBDevices_Overview">
              <title>Overview</title>
              <content>
                  <para>
                    USB (Universal Serial Bus) devices are now probably the most common type of device that users consciously use
                    and recognise. USB Mass Storage Devices (USB MSDs) have become the most common way of using portable storage
                    to the point where booting from a USB stick is now the easiest way to test-boot a Hobby OS. As a result,
                    supporting reading and writing USB MSDs is tremendously helpful. However, a USB stack (even just for one version
                    and only MSD type devices) is a complex and difficult thing to write. Fling OS currently only supports USB 2.0
                    MSDs (excl. 1.0 or 1.1). It is recommended that a hobby developer get ATA (much easier!) and a file system driver 
                    working before setting up USB so that they can be sure USB is their issue when testing and not the file system.
                  </para>
              </content>
          </section>
          <section address="USBDevices_USBStructure">
              <title>USB Structure</title>
              <content>
                  <para>
                    A basic USB stack consists of the Host Controller Driver (UHCI/OHCI = v1.0/1.1, EHCI = v2.0, xHCI=v3.0). On top
                    of this is the USB driver and on top of that is the USB Device Driver (e.g. Mass Storage Device driver). On
                    top of the device driver you might put a file system driver or application level software.
                  </para>
                  <para>
                    Developing and testing all this for Fling OS took a month alone and a weekend or two of very long hours. If you
                    are going to attempt USB support you will need a good level of commitment. However, the rewards are well worth it.
                  </para>
              </content>
          </section>
          <section address="USBDevices_USBMassStorageDevices">
              <title>USB Mass Storage Devices</title>
              <content>
                  <para>
                      USB MSDs are anything from external hard drives to flash memory sticks. It is easiest to provide support for SCSI
                      Over USB devices. SCSI Over USB will allow you to read, write and manage the majority of USB MSDs if implemented
                      properly. However, you may not achieve support for the most advanced features of some USB MSDs which would require
                      their own specialist driver. Often specialist drivers are implemented such that they sit on top of the generic
                      device driver, making use of the generic code as far as possible.
                  </para>
              </content>
          </section>
          <section address="USBDevices_FurtherReading">
              <title>Further Reading</title>
              <content>
                  <para>
                    USB (inc. host controllers, USB and USB MSDs) are discussed in more detail in the USB section found 
                    <link xlink:href="116cfd83-d795-4e91-bc2f-4cf97b85b60f">here</link>
                  </para>
              </content>
          </section>
      </sections>
    </section>
    
    
    <section address="AbstractDevices">
      <title>Abstract devices</title>
      <sections>
          <section address="AbstractDevices_Overview">
              <title>Overview</title>
              <content>
                  <para>
                    Abstract disk devices are a concept used to describe non-physical (/virtual) disk devices. They are constructs 
                    which vary wildly in how they actually manage storage but, to the developer, look and behave exactly like a 
                    normal disk device.
                  </para>
              </content>
          </section>
          <section address="AbstractDevices_Partitions">
              <title>Partitions</title>
              <content>
                  <para>
                    Partitions are the most common abstract disk device since they are almost always found as the lowest level data 
                    structure on a storage device. Partitions can be thought of just like a storage device since they merely describe
                    the location of a large block of data on another (abstract or otherwise) disk device. The partition as the same
                    properties and functions as a disk device, namely read, write and information such as name. Overall, therefore,
                    we can see how a partition is a form of abstract disk device.
                  </para>
              </content>
          </section>
          <section address="AbstractDevices_MBREBRAndGPT">
              <title></title>
              <content>
                  <para>
                    Mast Boot Record (MBR), Extended Boot Record (EBR) and Guid Partition Table (GPT) are all ways of managing 
                    partitions. It is mentioned here only as a note that they are the only major ways of storing partition data
                    in desktop computers. 
                  </para>
              </content>
          </section>
          <section address="AbstractDevices_FurtherReading">
              <title></title>
              <content>
                  <para>
                  Partitions in general and MBR/EBR and GPT are all discussed in their respective articles:
                  </para>
                  <list class="bullet">
                    <listItem>
                      <para>
                        <link xlink:href="d4ad0b56-a5dc-4c2b-8bde-b37c690b716d">Partitions</link>
                      </para>
                    </listItem>
                    <listItem>
                      <para>
                        <link xlink:href="5bae7d76-c48c-4a96-82f7-3d1d858a0649">MBR and EBR</link>
                      </para>
                    </listItem>
                    <listItem>
                      <para>
                        <link xlink:href="b164b3b0-1a8d-422c-8d90-c70b3825c731">GPT</link>
                      </para>
                    </listItem>
                  </list>
              </content>
          </section>
      </sections>
    </section>
    
    
    <section address="CodeStructureAdvice">
      <title>Code structure advice</title>
      <content>
          <para>
            Disk devices form a core part of OS operation as they underpin file systems. However, in general, the file 
            system used is independent of the disk device type. Furthermore, most of the time, the specific type of disk
            device is irrelevant. All that really matters is the read, write and get size functions. So, it is highly
            recommended that you structure your code so that you have a generic disk device class, from which all specific
            disk device types are inherit. This will allow you to pass any disk device into a file system to be used for
            storage, without the file system code having to worry about the specific type of disk device.
          </para>
      </content>
    </section>
    
    <relatedTopics>
      <link xlink:href="c3ceab20-c685-4be3-8ad3-42bb04ac445c"/>
      <link xlink:href="116cfd83-d795-4e91-bc2f-4cf97b85b60f"/>
      <link xlink:href="d4ad0b56-a5dc-4c2b-8bde-b37c690b716d"/>
      <link xlink:href="5bae7d76-c48c-4a96-82f7-3d1d858a0649"/>
      <link xlink:href="b164b3b0-1a8d-422c-8d90-c70b3825c731"/>
    </relatedTopics>
  </developerConceptualDocument>
</topic>