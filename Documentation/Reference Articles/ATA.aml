<?xml version="1.0" encoding="utf-8"?>
<topic id="c3ceab20-c685-4be3-8ad3-42bb04ac445c" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    
    <introduction>
      <autoOutline>20</autoOutline>
    </introduction>
    
    <!--
      
      Sections:
        - Introduction
            - Scope of this article
                - ATA history
                - ATA as IDE, PIO but not SATA
                - Basic hardware info
                - Complete software explanation and sample
            - How this article is structured
                - History and overview
                - Followed by explanation
                - Followed by sample code and common problems
        - History
            - Foreword
                    ATA has a long and winding history which is reasonably well documented across the internet
                    (see references and Google search). So for the purposes of this article I will provide only 
                    a brief summary of its history. Note, the information in this article is drawn largely from
                    the references provided at the end of this article, so specific citations are not being
                    provided.
                    
            - Origin of ATA
                - Originally called AT Attachment
                    ATA is the old name for what is now called "Parallel ATA" (PATA). ATA originally stood for AT 
                    Attachment and ATAPI stood for AT Attachment Packet Interface. These two standards are described
                    in more detail throughout this article.
                    
                    Notably, the "AT" in "AT Attachment" stood for "Advanced Technology", however, to avoid possible
                    trademark infringement with IBM, current specifications simply use AT. (And developers would 
                    be well advised to follow suit...)
                    
                - Consists of hardware and software standards: AT Attachment, AT Attachment Packet Interface
                    ATA is a hardware interface standard for connecting storage devices to a PC (originally via
                    the 16-bit ISA bus created by IBM for the IBM PC/AT). It also includes the basic Parallel ATA
                    transfer protocol.
                    
                    ATAPI is a software protocol which was layered on top of ATA to allow it to connect a wider 
                    range of devices than the original protocol allowed for. It is essentially a way to send SCSI
                    commands over the existing ATA protocol.
                    
                - Started with Western Digital's IDE
                    The first version of what would later become ATA was developed by Western Digital in around 1983.
                    They developed a standard called Integrated Drive Electronics (IDE). The first hardware for IDE 
                    arrived in 1986. Over time ATA and IDE have become used somewhat interchangeably, since the 
                    versions of IDE have essentially always been implementations of the versions of ATA (though 
                    often Western Digital released new IDE drives before the official release of a new ATA standard).
                
                - Turned into ATA
                    Western Digital co-developed, along with Control Data Corporation and Compaq Computer, the ATA
                    standard and in 1994 it was officially adopted as ANSI standard 
                    "X3.221-1994, AT Attachment Interface for Disk Drives". Since then there have been 7 major 
                    versions of the ATA standard (up to Dec 2014) with the last one introducing SATA (Serial ATA) 
                    in 2005. Parallel ATA drives and Serial ATA drives are not compatible but all IDE drives are 
                    compatible with at least one version of ATA. The current working version (8) will standardise
                    so-called Hybrid drives (which utilise non-volatile caches for frequently accessed or high
                    priority files).
                
                - ATA now has many acronyms
                    Due to its long history and many versions, ATA now has many acronyms associated with it. The 
                    common ones have already been mentioned (ATA, ATAPI and IDE) but it is worth mentioning these
                    few too:
                        - EIDE - Enhanced IDE (Western Digital, IDE version 2, ATA 2 and 3 compatible)
                        - Fast ATA, Fast IDE - All ATA-2 related versions developed by manufacturers. 
                        - Ultra ATA - associated with ATA version 2 and 4 to 7 with assorted suffixes. 
                    
                - ATA now actually Parallel ATA (PATA)
                    Since the introduction of ATA/ATAPI-7 it has become technically incorrect to refer to anything
                    as an ATA or IDE drive. Devices are now either Parallel ATA devices (the old way) or Serial ATA
                    devices (the new way). These are referred to as PATA and SATA, though frequently PATA is simply
                    ATA and SATA is SATA. 
                    
                    The original ATA standard cable had 40 wires to create a connection which could transfer 16-bits
                    in parallel. Later, this increased to 80 wires, with the additional 40 wires interleaved with the
                    original 40 to act as ground wires. This was required to reduce capacitive coupling between
                    data wires when running at higher bit rates. The connector remained the same size (40 pins)
                    since the additional wires could be connected to the existing ground pin.
                    
                    As with most hardware, PATA (and SATA) only communicate with one device at once. It is a common
                    misconception that Parallel means you can communicate with multiple devices at once. This is
                    not true and has never been true. A consequence of this is that many driver developers forget that 
                    you have to select which drive you wish to communicate with at any given moment. This is described
                    in more detail later.
                
                - Serial ATA (2003) (SATA)
                   While this article does not provide hardware or software description for SATA, it is worth 
                   mentioning since it is probably the most common type of drive (though many SATA drives are IDE
                   compatible). SATA stands for Serial ATA and is a very different hardware and software standard.
                   
                   For hobby OS developers, SATA is initially much harder to implement than PATA. It is worth getting
                   a PATA driver working which you can use to load driver executables from a hard disc or CD drive
                   which can the be executed to control SATA drives.
                  
            - ATA as Parallel ATA
                - PATA and IDE now broadly equivalent
                    As has been mentioned earlier, ATA, now known at Parallel ATA (PATA), is used now broadly equivalent
                    to IDE due to the standards long, intertwined history with IDE devices. Equally, due to the historical
                    naming, most information refers to PATA as ATA since PATA is the original, old hardware standard, as 
                    opposed to the latest ATA standard Serial ATA (SATA).
                                    
                - Meaning at a hobbyist level, what you program will work with most stuff
                    Since ATA and IDE are broadly equivalent, and both are the de-facto old-school hard drive standard, 
                    if you as a hobbyist choose to write ATA drivers, you will find that your code work with almost
                    all virtualisation technologies and a vast number of real hard drives.
                
                - PATA much simpler than SATA
                - Limitations of PATA
                    PATA is simple, very simple. Much, much simpler than SATA. This is possibly because its old, from a time 
                    when software had to be simpler or because its a more mature technology (by nearly 20 years). However,
                    the simplicity comes at a slight penalty (by modern standards). The penalty is primarily speed. PATA
                    disks are significantly slower than SATA disks (how much slower depends on version etc. It is left to the 
                    reader to research the potential difference, especially given the ever increasing speed of SATA disks).
                
            - ATA as Serial ATA (SATA)
                - Improvements with SATA
                - SATA much more complex than PATA
                    SATA drives offer significantly faster disk access times and much higher data transfer rates along with 
                    high burst access speeds and the ability to connect more devices to the bus than PATA allows. However, this
                    comes at the cost of complexity. To use a SATA drive you must support the significantly more complex 
                    protocol along with the Advance Host Controller Interface hardware that Intel developed to allow SATA
                    bus control.
                    
                - Not always backwards compatible
                    SATA is also often not backwards compatible. Older SATA devices would present themselves as PATA devices and 
                    then require the BIOS or OS to switch the bus to SATA mode. However, newer SATA devices are either in SATA
                    mode or PATA mode and only a BIOS setting can be used to switch (if available). However, switching will often 
                    cause the pre-installed OS to stop working since it will expect a SATA drive. As a consequence, to run a hobby
                    OS on a very new laptop or desktop, SATA support will be required, unless USB support or similar is added.
                
                - Get PATA working first
                    Due to PATA's comparative simplicity, wide support in virtualisation and high stability, it is worth getting
                    PATA working before moving on to SATA. This will allow you to develop partition and file system drivers 
                    that work and are stable, thus eliminating two big areas of potential issue when getting a SATA driver to 
                    work.
                    
        - Overview (PATA)
            - General
                - What does ATA do?
                    ATA is a hardware standard which sets out the physical cable, electronic signal and hardware requirements for 
                    connecting storage devices. For PATA, the cable is a 40 or 80 pin connector which can transfer 16 bits at a 
                    time. The later versions of PATA used an 80-pin connector to increase the maximum transfer speed. All the 
                    additional wires were shielding wires connected to the ground pin. Thus, the connectors (plugs/sockets) remained
                    40-pins wide, thereby ensuring backwards compatibility.
                    
                    ATA also sets out standards for handling hardware faults, unrecoverable errors and one possible standard for 
                    connecting (P)ATA devices to the motherboard and processor. However, other possibilities do exist. Many PATA
                    (and SATA) devices now appear on the PCI bus.
                    
                    Lastly, ATA defines a basic protocol for communicating with disk devices. Essentially a basic software
                    protocol. This is the protocol used by IDE drives such as hard disks. For CD Drives it is usually 
                    replaced by ATAPI.
                    
                - What does ATAPI do?
                    ATAPI is a software standard ("packet interface") which sets out new command and data transfer protocols that
                    sit on top of (but essentially replace) the basic ATA protocol. This is still separate from the hardware standard
                    though. The hardware standard sets out how to transfer individual bits and bytes. The software standard sets out what 
                    those bits and bytes actually mean and in what order they must be sent. The ATAPI protocol makes used 
                    of only one of the original ATA commands (Identify packet). It replaces all other commands by SCSI commands.
                    
                    In general, hard disks use plain PATA, CD Drives used PATAPI. PATAPI is itself essentially SCSI commands.
                    
                - How common is it?
                    ATA is extremely common. It has been included in PCs and laptop for over a decade. This means most PCs and 
                    laptops that are more than 3 years old will have PATA support. However, with the recent introduction of 
                    SATA, some laptops and PCs no longer include PATA connectors or support. The Sony Vaio Fit Multiflip 15A,
                    for example, only has a SATA drive with no detectable backwards compatibility for PATA.
                    
                    Note, many manufacturers or specifications list drives as IDE. As discussed previously, this is broadly 
                    equivalent to a PATA drive. If your PC or laptop says it has an IDE drive, then it has PATA support.
                    
                - Why is it important?
                    ATA is important as it has long been the standard for hard disk and CD drive control. So much so, that 
                    the only successful alternative connector for storage mediums (excluding ethernet, for obvious reasons)
                    has been USB. 
                    
                    For a hobby OS developer, ATA is important as it (meaning PATA) is the easiest route to accessing 
                    permanent storage. The only 4 other viable alternatives are: 
                      1. Network stack to access cloud files,
                      2. Serial connection to a file stored on a connected or host computer,
                      3. Firewire connection to a file stored on a connected or host computer,
                      4. USB Mass Storage support (which is recommended (necessary?) anyway).
                        
                    ATA (as PATA or SATA) is also important as the hard disk remains the primary boot device in most 
                    tablets, laptops and PCs. To install an operating system in a way which is user friendly essentially
                    requires you to install it to the primary boot device.
                    
                    Finally, for hobby OS developers, ATA support is useful as ATA is reliable and fairly easy to implement.
                    This makes developing partition and file system drivers significantly easier as it eliminates a whole
                    subsystem of potential error. Having weel tested, reliable file system drivers means writing USB and USB 
                    Mass Storage support is easier.
                    
                - ATA for hard drives vs. CD drives
                    TODO: Look up the key differences
                        
                    Fling OS currently only supports PATA (hard disk) devices and not PATAPI (CD ROM) devices. However, many 
                    modern laptops and PCs do not come with CD drives and external drives are usually attached via USB. 
                    This means that CD drive support is fairly unnecessary for a hobby OS.
                        
                - How complex to program?
                    PATA support is relatively simply to program. It requires only a basic knowledge of IO ports, hard disk 
                    structure and the protocol. There is plenty of information on the first two but details of the protocol
                    are hard to come by in a useful way. This article will cover basic hard disk structure (ignoring legacy 
                    CHS structure wherever possible) and cover the practical implementation of the protocol in detail.
                
                - Basic ideas
                    ATA devices each come with a number of registers. These registers are accessed through IO ports. The IO
                    port numbers are determined by which ATA bus the device is attached to. ATA supports a Primary bus and a 
                    Secondary bus, each of which can have at least a Master device and up to one Slave device. This allows a 
                    maximum of 4 devices to be attached. Up to 2 devices share the same set of ports. As a consequence, you 
                    can only access one of the two devices on a single bus at the same time.
                    
                    There are a number of different things you can do with an ATA device. But to do anything you must first
                    detect what devices are present and then select the one you want to communicate with. This utilises the 
                    Device Select register (/port). Once you have selected a device you can send it commands through the 
                    Command register. Data is sent though the Data register and there are a few other registers for extra 
                    important information.
                        
                    Accessing a memory location on a disk is done in blocks. The block size used depends on the disk but in 
                    general the minimum block size if 512 bytes. This means you can only read or write a minimum of 512 bytes 
                    at a time. Each block has an address. Not so long ago, disks were accessed based on their real-world 
                    physical structure. Addresses were supplied as three numbers to select which Cylinder, Head and Sector.
                    However, with advances in modern hardware, disks now used Logical Block Addressing (LBA for short). 
                        
                    There are a fixed number of LBAs on a disk and the block size is fixed. So if the block size is 512, and 
                    you want the byte 1024, you would read LBA 2 from the disk. Nowadays, all disks are accessed via LBA not 
                    CHS addresses so in this article we will focus on LBA addresses.
                    
            - PIO mode
                - What does PIO stand for?
                    PIO stands for Programmed Input/Output. It is a common way of connecting an external device to the CPU.
                    It allows data to be transferred by using input/output commands to addresses in the I/O address space.
                    These are often referred to as IO ports. 
                    
                    PIO is in contrast to DMA (Direct Memory Access) where data is transferred by directly reading/writing
                    memory addresses. PIO is significantly more costly than DMA since it requires the CPU to transfer
                    every byte of data not via memory. PIO mode is still important because when a CPU is just beginning to
                    boot it must be able to load from a boot device without knowledge of what memory is available.
                
                - Which types of device?
                    ATA PIO mode is now the default mode at startup for all ATA compliant devices. It is what allows the CPU
                    to use any ATA device as a boot device. However, many modern devices which are ATA compliant also support
                    switching to more advanced modes such as DMA.
                    
        - Hardware
            - Overview
                ATA hardware works by having a controller chip on the motherboard which links the CPU IO ports or links memory 
                to the pins of the IDE connector (the physical cable). Each attached device also has a controller chip that 
                processes the signals on the cable and responds appropriately. 
                
            - Cables & Connectors
                Old ATA cables are 40-wires with 40-pin connectors at either end. Modern ATA cables use the same size connector
                but have 80 wires in the cable. The additional wires are in between the existing 40 wires and are connected to
                the existing ground pin in the connector. The additional ground wires create a shield between the data wires
                allowing them to use a higher data rate (as the cross-wire inductive effects are significantly reduced).
            
            - Backwards Compatibility
                - Versions of PATA / IDE
                    Hardware that is PATA or IDE is usually fully backwards compatible. The new 80-wire cables are fully 
                    compatible with devices designed to use the old 40-wire cable. However, new devices will not work with the
                    old 40-wire cables if they use the higher data rates introduced in newer PATA devices. 
                
                - SATA to PATA
                    Some SATA devices support a PATA compatible mode but most new SATA devices do not. All SATA devices support 
                    the IDENTIFY command, as required by the specification. This allows your PATA driver to detect a SATA device
                    but not retrieve any data from it.
                
            - Virtual hardware / virtual disks / virtual machines
                Most VMs will give you a choice of device type to add. The choices are generally listed as: IDE, SCSI and SATA.
                IDE means PATA, SCSI means PATAPI or SATAPI (probably given the version choice later) and SATA means, well, SATA.
                
        - Software
            - Basic outline
            - Main classes
            - Enumerations
            - IO Ports
            - Device info
            - Sending commands
            - Initialisation
            - Drive Discovery
            - Drive Select
            - Getting info (strings)
            - Reading & Writing
            
        - Example Code
            - Overview
            - Download
            
        - Common problems
            - Drive/device selection (often secondary)
                A common problem with ATA is drive/device selection. This is a bit of a misleading trail, as I experienced.
                The problem is often not device selection. If you can select and use a PATA hard drive then your code
                is working. The issue is more likely to be the device is actually PATAPI (i.e. SCSI ATA) or SATA/SATAPI. For
                example, a CD Drive is a PATAPI device.
                
                Unfortunately, common samples of "PATA only" code on the internet fail to handle PATAPI/SATA/SATAPI devices
                properly and so hang when one is encountered during bus enumeration. This gives the impression that an entire
                bus is failing to work, often the secondary bus. 
                
                To fix the issue, take a look at the sample code which demonstrates how to handle PATAPI/SATA/SATAPI devices
                without hanging.
                
            - CD drives
                CD Drives are PATAPI devices and often cause "PATA only" code samples to hang during devic eenumaration. 
                Failing that, PATA only code simply cannot retrieve data from PATAPI devices. Take a look at the sample code 
                which demonstrates how to detect and avoid PATAPI/SATA/SATAPI devices.
            
            - Disk lock / security
                Some hard-disk and CD drives come with locking or security mechanisms which prevent them being read and/or
                 written to until the lock is switched off or a security code is passed. Fling OS currently does not handle 
                 these devices. However, I have yet to come across one "in the wild" so if you've found one, good work! Google
                 just became your best friend... ;)
            
            - SATA / RAID drives
                Take a look at the sample code 
                which demonstrates how to detect and avoid PATAPI/SATA/SATAPI devices. If you want PATAPI/SATA/SATAPI/RAID 
                support, please check the other Fling OS reference articles or research further online.
            
        - Sources
            - http://en.wikipedia.org/wiki/Parallel_ATA
            - http://en.wikipedia.org/wiki/ATA_Packet_Interface
            - http://en.wikipedia.org/wiki/Programmed_input/output
            - http://wiki.osdev.org/ATA_PIO_Mode
            - http://wiki.osdev.org/ATA_read/write_sectors
            - http://wiki.osdev.org/LBA
            - http://wiki.osdev.org/PCI_IDE_Controller
            - http://wiki.osdev.org/SATA
            - http://en.wikipedia.org/wiki/Programmed_input/output
    -->
    
    <section address="">
      <title></title>
      <sections>
          <section address="">
              <title></title>
              <content>
                  <para></para>
              </content>
          </section>
          <section address="">
              <title></title>
              <content>
                  <para></para>
              </content>
          </section>
      </sections>
    </section>
    
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>