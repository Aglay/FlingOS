<?xml version="1.0" encoding="utf-8"?>
<topic id="c3ceab20-c685-4be3-8ad3-42bb04ac445c" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    
    <introduction>
      <autoOutline>20</autoOutline>
    </introduction>
    
    <!--
      
      Sections:
        - Introduction
            - Scope of this article
                - ATA history
                - ATA as IDE, PIO but not SATA
                - Basic hardware info
                - Complete software explanation and sample
            - How this article is structured
                - History and overview
                - Followed by explanation
                - Followed by sample code and common problems
        - History
            - Foreword
                    ATA has a long and winding history which is reasonably well documented across the internet
                    (see references and Google search). So for the purposes of this article I will provide only 
                    a brief summary of its history. Note, the information in this article is drawn largely from
                    the references provided at the end of this article, so specific citations are not being
                    provided.
                    
            - Origin of ATA
                - Originally called AT Attachment
                    ATA is the old name for what is now called "Parallel ATA" (PATA). ATA originally stood for AT 
                    Attachment and ATAPI stood for AT Attachment Packet Interface. These two standards are described
                    in more detail throughout this article.
                    
                    Notably, the "AT" in "AT Attachment" stood for "Advanced Technology", however, to avoid possible
                    trademark infringement with IBM, current specifications simply use AT. (And developers would 
                    be well advised to follow suit...)
                    
                - Consists of hardware and software standards: AT Attachment, AT Attachment Packet Interface
                    ATA is a hardware interface standard for connecting storage devices to a PC (originally via
                    the 16-bit ISA bus created by IBM for the IBM PC/AT). 
                    
                    ATAPI is a software protocol which was layered on top of ATA to allow it to connect a wider 
                    range of devices than the original protocol allowed for. Over time the two have become so
                    entwined that you wouldn't really consider one without the other.
                    
                - Started with Western Digital's IDE
                    The first version of what would later become ATA was developed by Western Digital in around 1983.
                    They developed a standard called Integrated Drive Electronics (IDE). The first hardware for IDE 
                    arrived in 1986. Over time ATA and IDE have become used somewhat interchangeably, since the 
                    versions of IDE have essentially always been implementations of the versions of ATA (though 
                    often Western Digital released new IDE drives before the official release of a new ATA standard).
                
                - Turned into ATA
                    Western Digital co-developed, along with Control Data Corporation and Compaq Computer, the ATA
                    standard and in 1994 it was officially adopted as ANSI standard 
                    "X3.221-1994, AT Attachment Interface for Disk Drives". Since then there have been 7 major 
                    versions of the ATA standard (up to Dec 2014) with the last one introducing SATA (Serial ATA) 
                    in 2005. Parallel ATA drives and Serial ATA drives are not compatible but all IDE drives are 
                    compatible with at least one version of ATA. The current working version (8) will standardise
                    so-called Hybrid drives (which utilise non-volatile caches for frequently accessed or high
                    priority files).
                
                - ATA now has many acronyms
                    Due to its long history and many versions, ATA now has many acronyms associated with it. The 
                    common ones have already been mentioned (ATA, ATAPI and IDE) but it is worth mentioning these
                    few too:
                        - EIDE - Enhanced IDE (Western Digital, IDE version 2, ATA 2 and 3 compatible)
                        - Fast ATA, Fast IDE - All ATA-2 related versions developed by manufacturers. 
                        - Ultra ATA - associated with ATA version 2 and 4 to 7 with assorted suffixes. 
                    
                - ATA now actually Parallel ATA (PATA)
                    Since the introduction of ATA/ATAPI-7 it has become technically incorrect to refer to anything
                    as an ATA or IDE drive. Devices are now either Parallel ATA devices (the old way) or Serial ATA
                    devices (the new way). These are referred to as PATA and SATA, though frequently PATA is simply
                    ATA and SATA is SATA. 
                    
                    The original ATA standard cable had 40 wires to create a connection which could transfer 16-bits
                    in parallel. Later, this increased to 80 wires, with the additional 40 wires interleaved with the
                    original 40 to act as ground wires. This was required to reduce capacitive coupling between
                    data wires when running at higher bit rates. The connector remained the same size (40 pins)
                    since the additional wires could be connected to the existing ground pin.
                    
                    As with most hardware, PATA (and SATA) only communicate with one device at once. It is a common
                    misconception that Parallel means you can communicate with multiple devices at once. This is
                    not true and has never been true. A consequence of this is that many driver developers forget that 
                    you have to select which drive you wish to communicate with at any given moment. This is described
                    in more detail later.
                
                - Serial ATA (2003) (SATA)
                   While this article does not provide hardware or software description for SATA, it is worth 
                   mentioning since it is probably the most common type of drive (though many SATA drives are IDE
                   compatible). SATA stands for Serial ATA and is a very different hardware and software standard.
                   
                   For hobby OS developers, SATA is initially much harder to implement than PATA. It is worth getting
                   a PATA driver working which you can use to load driver executables from a hard disc or CD drive
                   which can the be executed to control SATA drives.
                  
            - ATA as Parallel ATA
                - PATA and IDE now broadly equivalent
                    As has been mentioned earlier, ATA, now known at Parallel ATA (PATA), is used now broadly equivalent
                    to IDE due to the standards long, intertwined history with IDE devices. Equally, due to the historical
                    naming, most information refers to PATA as ATA since PATA is the original, old hardware standard, as 
                    opposed to the latest ATA standard Serial ATA (SATA).
                                    
                - Meaning at a hobbyist level, what you program will work with most stuff
                    Since ATA and IDE are broadly equivalent, and both are the de-facto old-school hard drive standard, 
                    if you as a hobbyist choose to write ATA drivers, you will find that your code work with almost
                    all virtualisation technologies and a vast number of real hard drives.
                
                - PATA much simpler than SATA
                - Limitations of PATA
                    PATA is simple, very simple. Much, much simpler than SATA. This is possibly because its old, from a time 
                    when software had to be simpler or because its a more mature technology (by nearly 20 years). However,
                    the simplicity comes at a slight penalty (by modern standards). The penalty is primarily speed. PATA
                    disks are significantly slower than SATA disks (how much slower depends on version etc. It is left to the 
                    reader to research the potential difference, especially given the ever increasing speed of SATA disks).
                
            - ATA as Serial ATA (SATA)
                - Improvements with SATA
                - SATA much more complex than PATA
                    SATA drives offer significantly faster disk access times and much higher data transfer rates along with 
                    high burst access speeds and the ability to connect more devices to the bus than PATA allows. However, this
                    comes at the cost of complexity. To use a SATA drive you must support the significantly more complex 
                    protocol along with the Advance Host Controller Interface hardware that Intel developed to allow SATA
                    bus control.
                    
                - Not always backwards compatible
                    SATA is also often not backwards compatible. Older SATA devices would present themselves as PATA devices and 
                    then require the BIOS or OS to switch the bus to SATA mode. However, newer SATA devices are either in SATA
                    mode or PATA mode and only a BIOS setting can be used to switch (if available). However, switching will often 
                    cause the pre-installed OS to stop working since it will expect a SATA drive. As a consequence, to run a hobby
                    OS on a very new laptop or desktop, SATA support will be required, unless USB support or similar is added.
                
                - Get PATA working first
                    Due to PATA's comparative simplicity, wide support in virtualisation and high stability, it is worth getting
                    PATA working before moving on to SATA. This will allow you to develop partition and file system drivers 
                    that work and are stable, thus eliminating two big areas of potential issue when getting a SATA driver to 
                    work.
                    
        - Overview (PATA)
            - General
                - What does ATA do?
                - What does ATAPI do?
                - How common is it?
                - Why is it important?
                - ATA for hard drives
                - ATA for CD drives
                - How complex to program?
                - Basic ideas
            - PIO mode
                - What does PIO stand for?
                - Which types of device?
                - How does this link to IDE?
        - Hardware
            - Overview
            - Cables & Connectors
            - Backwards Compatibility
                - Versions of PATA / IDE
                - SATA to PATA
            - Virtual hardware / virtual disks / virtual machines
                - Set up as IDE drive
        - Software
            - Basic outline
            - Main classes
            - Enumerations
            - IO Ports
            - Device info
            - Sending commands
            - Initialisation
            - Drive Discovery
            - Drive Select
            - Getting info (strings)
            - Reading & Writing
        - Example Code
            - Overview
            - Download
        - Common problems
            - Second drive selection
            - CD drives
            - Disk lock / security
            - SATA / RAID drives
        - Sources
            - http://en.wikipedia.org/wiki/Parallel_ATA
            - http://en.wikipedia.org/wiki/ATA_Packet_Interface
            - http://en.wikipedia.org/wiki/Programmed_input/output
            - http://wiki.osdev.org/ATA_PIO_Mode
            - http://wiki.osdev.org/ATA_read/write_sectors
            - http://wiki.osdev.org/LBA
            - http://wiki.osdev.org/PCI_IDE_Controller
            - http://wiki.osdev.org/SATA
    -->
    
    <section address="">
      <title></title>
      <sections>
          <section address="">
              <title></title>
              <content>
                  <para></para>
              </content>
          </section>
          <section address="">
              <title></title>
              <content>
                  <para></para>
              </content>
          </section>
      </sections>
    </section>
    
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>